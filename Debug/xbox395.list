
xbox395.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007450  08007450  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007458  08007458  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00000a04  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b6c  20000b6c  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018527  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003603  00000000  00000000  000386bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  0003bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024082  00000000  00000000  0003ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016eb4  00000000  00000000  00061e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca3d2  00000000  00000000  00078cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001430c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046fc  00000000  00000000  00143114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073d8 	.word	0x080073d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	080073d8 	.word	0x080073d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fbcc 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f814 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f910 	bl	80006f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f87a 	bl	80005c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8a6 	bl	8000624 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8d4 	bl	8000684 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f006 fb0a 	bl	8006af4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  data[0] = '0';
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <main+0x30>)
 80004e2:	2230      	movs	r2, #48	; 0x30
 80004e4:	701a      	strb	r2, [r3, #0]
	  data[1] = '0';
 80004e6:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <main+0x30>)
 80004e8:	2230      	movs	r2, #48	; 0x30
 80004ea:	705a      	strb	r2, [r3, #1]
	  data[0] = '0';
 80004ec:	e7f8      	b.n	80004e0 <main+0x20>
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f006 ff60 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fe1e 	bl	80031bc <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000586:	f000 f9bd 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2105      	movs	r1, #5
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f87f 	bl	80036ac <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f9a6 	bl	8000904 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fe89 	bl	800131c <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f978 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000019c 	.word	0x2000019c
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_I2S3_Init+0x54>)
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <MX_I2S3_Init+0x58>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2S3_Init+0x54>)
 8000630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000634:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_I2S3_Init+0x54>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2S3_Init+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_I2S3_Init+0x54>)
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <MX_I2S3_Init+0x5c>)
 800064e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_I2S3_Init+0x54>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_I2S3_Init+0x54>)
 8000664:	f000 ff9e 	bl	80015a4 <HAL_I2S_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800066e:	f000 f949 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000248 	.word	0x20000248
 800067c:	40003c00 	.word	0x40003c00
 8000680:	00017700 	.word	0x00017700

08000684 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_SPI1_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_SPI1_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d0:	220a      	movs	r2, #10
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d6:	f003 fb11 	bl	8003cfc <HAL_SPI_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e0:	f000 f910 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001f0 	.word	0x200001f0
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b78      	ldr	r3, [pc, #480]	; (80008ec <MX_GPIO_Init+0x1fc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a77      	ldr	r2, [pc, #476]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b75      	ldr	r3, [pc, #468]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b71      	ldr	r3, [pc, #452]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a70      	ldr	r2, [pc, #448]	; (80008ec <MX_GPIO_Init+0x1fc>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b6e      	ldr	r3, [pc, #440]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a69      	ldr	r2, [pc, #420]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b67      	ldr	r3, [pc, #412]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b63      	ldr	r3, [pc, #396]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a62      	ldr	r2, [pc, #392]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b60      	ldr	r3, [pc, #384]	; (80008ec <MX_GPIO_Init+0x1fc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <MX_GPIO_Init+0x1fc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a5b      	ldr	r2, [pc, #364]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b59      	ldr	r3, [pc, #356]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b55      	ldr	r3, [pc, #340]	; (80008ec <MX_GPIO_Init+0x1fc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a54      	ldr	r2, [pc, #336]	; (80008ec <MX_GPIO_Init+0x1fc>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b52      	ldr	r3, [pc, #328]	; (80008ec <MX_GPIO_Init+0x1fc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	484f      	ldr	r0, [pc, #316]	; (80008f0 <MX_GPIO_Init+0x200>)
 80007b4:	f000 fd98 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	484d      	ldr	r0, [pc, #308]	; (80008f4 <MX_GPIO_Init+0x204>)
 80007be:	f000 fd93 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c8:	484b      	ldr	r0, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x208>)
 80007ca:	f000 fd8d 	bl	80012e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4842      	ldr	r0, [pc, #264]	; (80008f0 <MX_GPIO_Init+0x200>)
 80007e6:	f000 fbe3 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	483c      	ldr	r0, [pc, #240]	; (80008f4 <MX_GPIO_Init+0x204>)
 8000802:	f000 fbd5 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080e:	2301      	movs	r3, #1
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4836      	ldr	r0, [pc, #216]	; (80008f4 <MX_GPIO_Init+0x204>)
 800081a:	f000 fbc9 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082e:	2305      	movs	r3, #5
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <MX_GPIO_Init+0x204>)
 800083a:	f000 fbb9 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000842:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	482a      	ldr	r0, [pc, #168]	; (80008fc <MX_GPIO_Init+0x20c>)
 8000854:	f000 fbac 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000858:	2304      	movs	r3, #4
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4825      	ldr	r0, [pc, #148]	; (8000900 <MX_GPIO_Init+0x210>)
 800086c:	f000 fba0 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_GPIO_Init+0x210>)
 800088e:	f000 fb8f 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000892:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000896:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_GPIO_Init+0x208>)
 80008ac:	f000 fb80 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_GPIO_Init+0x208>)
 80008c4:	f000 fb74 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x200>)
 80008de:	f000 fb67 	bl	8000fb0 <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020400 	.word	0x40020400

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094e:	2007      	movs	r0, #7
 8000950:	f000 faec 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_I2C_MspInit+0x84>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12c      	bne.n	80009dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800099e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a4:	2312      	movs	r3, #18
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b0:	2304      	movs	r3, #4
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <HAL_I2C_MspInit+0x8c>)
 80009bc:	f000 faf8 	bl	8000fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 80009ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_I2C_MspInit+0x88>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400

080009f0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <HAL_I2S_MspInit+0xf0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d15a      	bne.n	8000ad6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a20:	2301      	movs	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 f823 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a3c:	f7ff ff62 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a26      	ldr	r2, [pc, #152]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a94:	2310      	movs	r3, #16
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <HAL_I2S_MspInit+0xf8>)
 8000ab0:	f000 fa7e 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ab4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_I2S_MspInit+0xfc>)
 8000ad2:	f000 fa6d 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40003c00 	.word	0x40003c00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020800 	.word	0x40020800

08000af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_SPI_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12b      	bne.n	8000b6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b4a:	23e0      	movs	r3, #224	; 0xe0
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_SPI_MspInit+0x8c>)
 8000b66:	f000 fa23 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f89a 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <OTG_FS_IRQHandler+0x10>)
 8000bda:	f001 fad3 	bl	8002184 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000764 	.word	0x20000764

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f006 fba1 	bl	8007380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fc3f 	bl	80004c0 <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000c50:	08007460 	.word	0x08007460
  ldr r2, =_sbss
 8000c54:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000c58:	20000b6c 	.word	0x20000b6c

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f94f 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe3c 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f967 	bl	8000f96 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f92f 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000290 	.word	0x20000290

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000290 	.word	0x20000290

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e16b      	b.n	80012a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 815a 	bne.w	800129e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80b4 	beq.w	800129e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_GPIO_Init+0x30c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <HAL_GPIO_Init+0x310>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x314>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x318>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x31c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x320>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x324>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x328>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x20e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x20a>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x310>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_GPIO_Init+0x334>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae90 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e12b      	b.n	8001586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fb0c 	bl	8000960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800136e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001380:	f002 fb68 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a81      	ldr	r2, [pc, #516]	; (8001590 <HAL_I2C_Init+0x274>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d807      	bhi.n	80013a0 <HAL_I2C_Init+0x84>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a80      	ldr	r2, [pc, #512]	; (8001594 <HAL_I2C_Init+0x278>)
 8001394:	4293      	cmp	r3, r2
 8001396:	bf94      	ite	ls
 8001398:	2301      	movls	r3, #1
 800139a:	2300      	movhi	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	e006      	b.n	80013ae <HAL_I2C_Init+0x92>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <HAL_I2C_Init+0x27c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0e7      	b.n	8001586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4a78      	ldr	r2, [pc, #480]	; (800159c <HAL_I2C_Init+0x280>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_I2C_Init+0x274>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d802      	bhi.n	80013f0 <HAL_I2C_Init+0xd4>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	e009      	b.n	8001404 <HAL_I2C_Init+0xe8>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_I2C_Init+0x284>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	3301      	adds	r3, #1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	430b      	orrs	r3, r1
 800140a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	495c      	ldr	r1, [pc, #368]	; (8001590 <HAL_I2C_Init+0x274>)
 8001420:	428b      	cmp	r3, r1
 8001422:	d819      	bhi.n	8001458 <HAL_I2C_Init+0x13c>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e59      	subs	r1, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001432:	1c59      	adds	r1, r3, #1
 8001434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001438:	400b      	ands	r3, r1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <HAL_I2C_Init+0x138>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1e59      	subs	r1, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb1 f3f3 	udiv	r3, r1, r3
 800144c:	3301      	adds	r3, #1
 800144e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001452:	e051      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001454:	2304      	movs	r3, #4
 8001456:	e04f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_I2C_Init+0x168>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e012      	b.n	80014aa <HAL_I2C_Init+0x18e>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	0099      	lsls	r1, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Init+0x196>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e022      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10e      	bne.n	80014d8 <HAL_I2C_Init+0x1bc>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e58      	subs	r0, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d6:	e00f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e58      	subs	r0, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	0099      	lsls	r1, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6809      	ldr	r1, [r1, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6911      	ldr	r1, [r2, #16]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68d2      	ldr	r2, [r2, #12]
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	000186a0 	.word	0x000186a0
 8001594:	001e847f 	.word	0x001e847f
 8001598:	003d08ff 	.word	0x003d08ff
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e128      	b.n	8001808 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a90      	ldr	r2, [pc, #576]	; (8001810 <HAL_I2S_Init+0x26c>)
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fa0d 	bl	80009f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015ec:	f023 030f 	bic.w	r3, r3, #15
 80015f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2202      	movs	r2, #2
 80015f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d060      	beq.n	80016c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800160a:	2310      	movs	r3, #16
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e001      	b.n	8001614 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b20      	cmp	r3, #32
 800161a:	d802      	bhi.n	8001622 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001622:	2001      	movs	r0, #1
 8001624:	f002 fb0c 	bl	8003c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8001628:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001632:	d125      	bne.n	8001680 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d010      	beq.n	800165e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	fbb2 f2f3 	udiv	r2, r2, r3
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	3305      	adds	r3, #5
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	e01f      	b.n	800169e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	fbb2 f2f3 	udiv	r2, r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	3305      	adds	r3, #5
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e00e      	b.n	800169e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fbb2 f2f3 	udiv	r2, r2, r3
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	3305      	adds	r3, #5
 800169c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4a5c      	ldr	r2, [pc, #368]	; (8001814 <HAL_I2S_Init+0x270>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	e003      	b.n	80016cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d902      	bls.n	80016d8 <HAL_I2S_Init+0x134>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d907      	bls.n	80016e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e08f      	b.n	8001808 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	ea42 0103 	orr.w	r1, r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6851      	ldr	r1, [r2, #4]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68d2      	ldr	r2, [r2, #12]
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6992      	ldr	r2, [r2, #24]
 800171e:	430a      	orrs	r2, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d161      	bne.n	80017f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_I2S_Init+0x274>)
 8001738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a37      	ldr	r2, [pc, #220]	; (800181c <HAL_I2S_Init+0x278>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_I2S_Init+0x1a4>
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_I2S_Init+0x27c>)
 8001746:	e001      	b.n	800174c <HAL_I2S_Init+0x1a8>
 8001748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4932      	ldr	r1, [pc, #200]	; (800181c <HAL_I2S_Init+0x278>)
 8001754:	428a      	cmp	r2, r1
 8001756:	d101      	bne.n	800175c <HAL_I2S_Init+0x1b8>
 8001758:	4a31      	ldr	r2, [pc, #196]	; (8001820 <HAL_I2S_Init+0x27c>)
 800175a:	e001      	b.n	8001760 <HAL_I2S_Init+0x1bc>
 800175c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001760:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001764:	f023 030f 	bic.w	r3, r3, #15
 8001768:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2b      	ldr	r2, [pc, #172]	; (800181c <HAL_I2S_Init+0x278>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_I2S_Init+0x1d4>
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_I2S_Init+0x27c>)
 8001776:	e001      	b.n	800177c <HAL_I2S_Init+0x1d8>
 8001778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800177c:	2202      	movs	r2, #2
 800177e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <HAL_I2S_Init+0x278>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_I2S_Init+0x1ea>
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_I2S_Init+0x27c>)
 800178c:	e001      	b.n	8001792 <HAL_I2S_Init+0x1ee>
 800178e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179e:	d003      	beq.n	80017a8 <HAL_I2S_Init+0x204>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	e001      	b.n	80017b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017be:	4313      	orrs	r3, r2
 80017c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	897b      	ldrh	r3, [r7, #10]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_I2S_Init+0x278>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_I2S_Init+0x24c>
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_I2S_Init+0x27c>)
 80017ee:	e001      	b.n	80017f4 <HAL_I2S_Init+0x250>
 80017f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f4:	897a      	ldrh	r2, [r7, #10]
 80017f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	0800191b 	.word	0x0800191b
 8001814:	cccccccd 	.word	0xcccccccd
 8001818:	08001a31 	.word	0x08001a31
 800181c:	40003800 	.word	0x40003800
 8001820:	40003400 	.word	0x40003400

08001824 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c9a      	adds	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffb8 	bl	8001824 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	b292      	uxth	r2, r2
 80018d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	1c9a      	adds	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10e      	bne.n	8001912 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001902:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff93 	bl	8001838 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b04      	cmp	r3, #4
 8001934:	d13a      	bne.n	80019ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d109      	bne.n	8001954 <I2S_IRQHandler+0x3a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d102      	bne.n	8001954 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb4 	bl	80018bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d126      	bne.n	80019ac <I2S_IRQHandler+0x92>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b20      	cmp	r3, #32
 800196a:	d11f      	bne.n	80019ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800197a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f043 0202 	orr.w	r2, r3, #2
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff50 	bl	800184c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d136      	bne.n	8001a26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d109      	bne.n	80019d6 <I2S_IRQHandler+0xbc>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d102      	bne.n	80019d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff45 	bl	8001860 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d122      	bne.n	8001a26 <I2S_IRQHandler+0x10c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d11b      	bne.n	8001a26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f043 0204 	orr.w	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff13 	bl	800184c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4aa2      	ldr	r2, [pc, #648]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a4a:	4ba2      	ldr	r3, [pc, #648]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a4c:	e001      	b.n	8001a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a9b      	ldr	r2, [pc, #620]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a68:	4b9a      	ldr	r3, [pc, #616]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a6a:	e001      	b.n	8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a7c:	d004      	beq.n	8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8099 	bne.w	8001bba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f925 	bl	8001cec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9c8 	bl	8001e4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d13a      	bne.n	8001b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d035      	beq.n	8001b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7e      	ldr	r2, [pc, #504]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ada:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001adc:	e001      	b.n	8001ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4979      	ldr	r1, [pc, #484]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001aea:	428b      	cmp	r3, r1
 8001aec:	d101      	bne.n	8001af2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001aee:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001af0:	e001      	b.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001afa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe88 	bl	800184c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	f040 80be 	bne.w	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80b8 	beq.w	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b6e:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b70:	e001      	b.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4954      	ldr	r1, [pc, #336]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b7e:	428b      	cmp	r3, r1
 8001b80:	d101      	bne.n	8001b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b82:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b84:	e001      	b.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe4a 	bl	800184c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bb8:	e084      	b.n	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d107      	bne.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8be 	bl	8001d50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8fd 	bl	8001de8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d12f      	bne.n	8001c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d02a      	beq.n	8001c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c1e:	e001      	b.n	8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4929      	ldr	r1, [pc, #164]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c32:	e001      	b.n	8001c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fdfa 	bl	800184c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d131      	bne.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d02c      	beq.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c78:	e001      	b.n	8001c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c86:	428b      	cmp	r3, r1
 8001c88:	d101      	bne.n	8001c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c8c:	e001      	b.n	8001c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ca6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fdc5 	bl	800184c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cc4:	bf00      	nop
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40003800 	.word	0x40003800
 8001cd4:	40003400 	.word	0x40003400

08001cd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	1c99      	adds	r1, r3, #2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6251      	str	r1, [r2, #36]	; 0x24
 8001cfe:	881a      	ldrh	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d113      	bne.n	8001d46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffc9 	bl	8001cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c99      	adds	r1, r3, #2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6251      	str	r1, [r2, #36]	; 0x24
 8001d62:	8819      	ldrh	r1, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <I2SEx_TxISR_I2SExt+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <I2SEx_TxISR_I2SExt+0x22>
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <I2SEx_TxISR_I2SExt+0x94>)
 8001d70:	e001      	b.n	8001d76 <I2SEx_TxISR_I2SExt+0x26>
 8001d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d76:	460a      	mov	r2, r1
 8001d78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d121      	bne.n	8001dd6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <I2SEx_TxISR_I2SExt+0x90>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <I2SEx_TxISR_I2SExt+0x50>
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <I2SEx_TxISR_I2SExt+0x94>)
 8001d9e:	e001      	b.n	8001da4 <I2SEx_TxISR_I2SExt+0x54>
 8001da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <I2SEx_TxISR_I2SExt+0x90>)
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d101      	bne.n	8001db4 <I2SEx_TxISR_I2SExt+0x64>
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <I2SEx_TxISR_I2SExt+0x94>)
 8001db2:	e001      	b.n	8001db8 <I2SEx_TxISR_I2SExt+0x68>
 8001db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff81 	bl	8001cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40003800 	.word	0x40003800
 8001de4:	40003400 	.word	0x40003400

08001de8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d8      	ldr	r0, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	1c99      	adds	r1, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e00:	b282      	uxth	r2, r0
 8001e02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d113      	bne.n	8001e44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff4a 	bl	8001cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a20      	ldr	r2, [pc, #128]	; (8001edc <I2SEx_RxISR_I2SExt+0x90>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <I2SEx_RxISR_I2SExt+0x16>
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x94>)
 8001e60:	e001      	b.n	8001e66 <I2SEx_RxISR_I2SExt+0x1a>
 8001e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e66:	68d8      	ldr	r0, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	1c99      	adds	r1, r3, #2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e72:	b282      	uxth	r2, r0
 8001e74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d121      	bne.n	8001ed2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <I2SEx_RxISR_I2SExt+0x90>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <I2SEx_RxISR_I2SExt+0x50>
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x94>)
 8001e9a:	e001      	b.n	8001ea0 <I2SEx_RxISR_I2SExt+0x54>
 8001e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	490d      	ldr	r1, [pc, #52]	; (8001edc <I2SEx_RxISR_I2SExt+0x90>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d101      	bne.n	8001eb0 <I2SEx_RxISR_I2SExt+0x64>
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x94>)
 8001eae:	e001      	b.n	8001eb4 <I2SEx_RxISR_I2SExt+0x68>
 8001eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eb8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff03 	bl	8001cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40003800 	.word	0x40003800
 8001ee0:	40003400 	.word	0x40003400

08001ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	; 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e10f      	b.n	8002116 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f004 ff25 	bl	8006d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 f87e 	bl	8004036 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f001 ff56 	bl	8003e0e <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d0      	b.n	8002116 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 f86c 	bl	8004058 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	333c      	adds	r3, #60	; 0x3c
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3344      	adds	r3, #68	; 0x44
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3350      	adds	r3, #80	; 0x50
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f002 f804 	bl	80040f0 <USB_DevInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00d      	b.n	8002116 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f880 	bl	8005214 <USB_DevDisconnect>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800211e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_Start+0x1c>
 8002136:	2302      	movs	r3, #2
 8002138:	e020      	b.n	800217c <HAL_PCD_Start+0x5e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	2b01      	cmp	r3, #1
 8002148:	d109      	bne.n	800215e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800214e:	2b01      	cmp	r3, #1
 8002150:	d005      	beq.n	800215e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f001 ff56 	bl	8004014 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f830 	bl	80051d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b08d      	sub	sp, #52	; 0x34
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f8ee 	bl	800537c <USB_GetMode>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 839d 	bne.w	80028e2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f852 	bl	8005256 <USB_ReadInterrupts>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8393 	beq.w	80028e0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 f849 	bl	8005256 <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f002 0202 	and.w	r2, r2, #2
 80021dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f837 	bl	8005256 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d161      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0210 	bic.w	r2, r2, #16
 8002200:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	0c5b      	lsrs	r3, r3, #17
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	2b02      	cmp	r3, #2
 800222c:	d124      	bne.n	8002278 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d035      	beq.n	80022a6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	6a38      	ldr	r0, [r7, #32]
 800224e:	f002 fe6e 	bl	8004f2e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225e:	441a      	add	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002270:	441a      	add	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	619a      	str	r2, [r3, #24]
 8002276:	e016      	b.n	80022a6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	0c5b      	lsrs	r3, r3, #17
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2b06      	cmp	r3, #6
 8002282:	d110      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800228a:	2208      	movs	r2, #8
 800228c:	4619      	mov	r1, r3
 800228e:	6a38      	ldr	r0, [r7, #32]
 8002290:	f002 fe4d 	bl	8004f2e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a0:	441a      	add	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0210 	orr.w	r2, r2, #16
 80022b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ffcb 	bl	8005256 <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022ca:	d16e      	bne.n	80023aa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 ffd1 	bl	800527c <USB_ReadDevAllOutEpInterrupt>
 80022da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022dc:	e062      	b.n	80023a4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d057      	beq.n	8002398 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fff6 	bl	80052e4 <USB_ReadDevOutEPInterrupt>
 80022f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00c      	beq.n	800231e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fd99 	bl	8002e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	2308      	movs	r3, #8
 8002338:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800233a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fe93 	bl	8003068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	2310      	movs	r3, #16
 800235c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2320      	movs	r3, #32
 8002378:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002390:	461a      	mov	r2, r3
 8002392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002396:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3301      	adds	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d199      	bne.n	80022de <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ff51 	bl	8005256 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023be:	f040 80c0 	bne.w	8002542 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 ff72 	bl	80052b0 <USB_ReadDevAllInEpInterrupt>
 80023cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023d2:	e0b2      	b.n	800253a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a7 	beq.w	800252e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 ff98 	bl	8005320 <USB_ReadDevInEPInterrupt>
 80023f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d057      	beq.n	80024ac <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	2201      	movs	r2, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800241c:	4013      	ands	r3, r2
 800241e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800242c:	461a      	mov	r2, r3
 800242e:	2301      	movs	r3, #1
 8002430:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d132      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3348      	adds	r3, #72	; 0x48
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	3344      	adds	r3, #68	; 0x44
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4419      	add	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4403      	add	r3, r0
 800246e:	3348      	adds	r3, #72	; 0x48
 8002470:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d113      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x31c>
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3350      	adds	r3, #80	; 0x50
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002498:	461a      	mov	r2, r3
 800249a:	2101      	movs	r1, #1
 800249c:	f002 ffa0 	bl	80053e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f004 fce9 	bl	8006e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c2:	461a      	mov	r2, r3
 80024c4:	2308      	movs	r3, #8
 80024c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	461a      	mov	r2, r3
 80024e0:	2310      	movs	r3, #16
 80024e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fa:	461a      	mov	r2, r3
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	2302      	movs	r3, #2
 800251a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fc03 	bl	8002d34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af49 	bne.w	80023d4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fe85 	bl	8005256 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002556:	d122      	bne.n	800259e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fe0f 	bl	80031a4 <HAL_PCDEx_LPM_Callback>
 8002586:	e002      	b.n	800258e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f004 fcef 	bl	8006f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800259c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fe57 	bl	8005256 <USB_ReadInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b2:	d112      	bne.n	80025da <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f004 fcab 	bl	8006f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025d8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fe39 	bl	8005256 <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ee:	f040 80c7 	bne.w	8002780 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2110      	movs	r1, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fed3 	bl	80043b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002616:	e056      	b.n	80026c6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002624:	461a      	mov	r2, r3
 8002626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800262a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	440a      	add	r2, r1
 8002642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800264a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	440a      	add	r2, r1
 8002662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800266a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	461a      	mov	r2, r3
 800267a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800267e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	440a      	add	r2, r1
 8002696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800269a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800269e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b0:	0151      	lsls	r1, r2, #5
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	440a      	add	r2, r1
 80026b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	3301      	adds	r3, #1
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3a3      	bcc.n	8002618 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d016      	beq.n	800271a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f043 030b 	orr.w	r3, r3, #11
 8002700:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002712:	f043 030b 	orr.w	r3, r3, #11
 8002716:	6453      	str	r3, [r2, #68]	; 0x44
 8002718:	e015      	b.n	8002746 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002730:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f043 030b 	orr.w	r3, r3, #11
 8002744:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002754:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002758:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800276a:	461a      	mov	r2, r3
 800276c:	f002 fe38 	bl	80053e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800277e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fd66 	bl	8005256 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d124      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fdfc 	bl	8005398 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fe64 	bl	8004472 <USB_GetDevSpeed>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681c      	ldr	r4, [r3, #0]
 80027b6:	f001 f941 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 80027ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	4620      	mov	r0, r4
 80027c6:	f001 fb83 	bl	8003ed0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f004 fb7f 	bl	8006ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fd36 	bl	8005256 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d10a      	bne.n	800280a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f004 fb5c 	bl	8006eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f002 0208 	and.w	r2, r2, #8
 8002808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fd21 	bl	8005256 <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800281e:	d10f      	bne.n	8002840 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f004 fbbe 	bl	8006fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800283e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fd06 	bl	8005256 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002854:	d10f      	bne.n	8002876 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f004 fb91 	bl	8006f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fceb 	bl	8005256 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d10a      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f004 fb9f 	bl	8006fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fcd5 	bl	8005256 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d115      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f004 fb8f 	bl	8006fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e000      	b.n	80028e2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80028e0:	bf00      	nop
    }
  }
}
 80028e2:	3734      	adds	r7, #52	; 0x34
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_SetAddress+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e013      	b.n	800292a <HAL_PCD_SetAddress+0x42>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fc33 	bl	8005186 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	4608      	mov	r0, r1
 800293c:	4611      	mov	r1, r2
 800293e:	461a      	mov	r2, r3
 8002940:	4603      	mov	r3, r0
 8002942:	70fb      	strb	r3, [r7, #3]
 8002944:	460b      	mov	r3, r1
 8002946:	803b      	strh	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da0f      	bge.n	8002978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00f      	b.n	8002998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a4:	883a      	ldrh	r2, [r7, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	78ba      	ldrb	r2, [r7, #2]
 80029ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c2:	78bb      	ldrb	r3, [r7, #2]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_EP_Open+0xaa>
 80029d8:	2302      	movs	r3, #2
 80029da:	e00e      	b.n	80029fa <HAL_PCD_EP_Open+0xc8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fd66 	bl	80044bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029f8:	7afb      	ldrb	r3, [r7, #11]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da0f      	bge.n	8002a36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3338      	adds	r3, #56	; 0x38
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	705a      	strb	r2, [r3, #1]
 8002a34:	e00f      	b.n	8002a56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_PCD_EP_Close+0x6e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e00e      	b.n	8002a8e <HAL_PCD_EP_Close+0x8c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fda4 	bl	80045cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	6979      	ldr	r1, [r7, #20]
 8002b0a:	f002 f87f 	bl	8004c0c <USB_EP0StartXfer>
 8002b0e:	e008      	b.n	8002b22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	f001 fe31 	bl	8004784 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6979      	ldr	r1, [r7, #20]
 8002b9e:	f002 f835 	bl	8004c0c <USB_EP0StartXfer>
 8002ba2:	e008      	b.n	8002bb6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	f001 fde7 	bl	8004784 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d901      	bls.n	8002bde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e050      	b.n	8002c80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3338      	adds	r3, #56	; 0x38
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00d      	b.n	8002c22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_PCD_EP_SetStall+0x82>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e01e      	b.n	8002c80 <HAL_PCD_EP_SetStall+0xc0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 f9c4 	bl	8004fde <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	b2d9      	uxtb	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c70:	461a      	mov	r2, r3
 8002c72:	f002 fbb5 	bl	80053e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d901      	bls.n	8002ca6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e042      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0f      	bge.n	8002cce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00f      	b.n	8002cee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_EP_ClrStall+0x86>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e00e      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 f9cc 	bl	80050ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3338      	adds	r3, #56	; 0x38
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e06c      	b.n	8002e46 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3303      	adds	r3, #3
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d90:	e02b      	b.n	8002dea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3303      	adds	r3, #3
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f002 f870 	bl	8004eb2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	441a      	add	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d809      	bhi.n	8002e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d203      	bcs.n	8002e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1be      	bne.n	8002d92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d811      	bhi.n	8002e44 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	2201      	movs	r2, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	6939      	ldr	r1, [r7, #16]
 8002e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e40:	4013      	ands	r3, r2
 8002e42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	333c      	adds	r3, #60	; 0x3c
 8002e68:	3304      	adds	r3, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	f040 80a0 	bne.w	8002fc8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a72      	ldr	r2, [pc, #456]	; (8003060 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f240 80dd 	bls.w	8003056 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80d7 	beq.w	8003056 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eba:	6093      	str	r3, [r2, #8]
 8002ebc:	e0cb      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	6093      	str	r3, [r2, #8]
 8002eda:	e0bc      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80b7 	bne.w	8003056 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <PCD_EP_OutXfrComplete_int+0x210>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d90f      	bls.n	8002f10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	e0a2      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4403      	add	r3, r0
 8002f46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4403      	add	r3, r0
 8002f6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4419      	add	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4403      	add	r3, r0
 8002f84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d114      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x16a>
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	f002 fa13 	bl	80053e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f003 ff41 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
 8002fc6:	e046      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a26      	ldr	r2, [pc, #152]	; (8003064 <PCD_EP_OutXfrComplete_int+0x214>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d124      	bne.n	800301a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fec:	6093      	str	r3, [r2, #8]
 8002fee:	e032      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	2320      	movs	r3, #32
 800300a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f003 ff18 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
 8003018:	e01d      	b.n	8003056 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d114      	bne.n	800304a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003042:	461a      	mov	r2, r3
 8003044:	2100      	movs	r1, #0
 8003046:	f002 f9cb 	bl	80053e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f003 fef9 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	4f54300a 	.word	0x4f54300a
 8003064:	4f54310a 	.word	0x4f54310a

08003068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	333c      	adds	r3, #60	; 0x3c
 8003080:	3304      	adds	r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d90e      	bls.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f003 feb1 	bl	8006e24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d90c      	bls.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d108      	bne.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030dc:	461a      	mov	r2, r3
 80030de:	2101      	movs	r1, #1
 80030e0:	f002 f97e 	bl	80053e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	4f54300a 	.word	0x4f54300a

080030f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
 8003100:	4613      	mov	r3, r2
 8003102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	0419      	lsls	r1, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e028      	b.n	8003174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4413      	add	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e00d      	b.n	8003152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3340      	adds	r3, #64	; 0x40
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	3301      	adds	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	3b01      	subs	r3, #1
 8003158:	429a      	cmp	r2, r3
 800315a:	d3ec      	bcc.n	8003136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800315c:	883b      	ldrh	r3, [r7, #0]
 800315e:	0418      	lsls	r0, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4302      	orrs	r2, r0
 800316c:	3340      	adds	r3, #64	; 0x40
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e264      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	4ba3      	ldr	r3, [pc, #652]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4ba0      	ldr	r3, [pc, #640]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b9d      	ldr	r3, [pc, #628]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b99      	ldr	r3, [pc, #612]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e23f      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b91      	ldr	r3, [pc, #580]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a8a      	ldr	r2, [pc, #552]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a87      	ldr	r2, [pc, #540]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b84      	ldr	r3, [pc, #528]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a83      	ldr	r2, [pc, #524]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd fd5a 	bl	8000d2c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd fd56 	bl	8000d2c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e204      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fd fd46 	bl	8000d2c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fd42 	bl	8000d2c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1f0      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b6c      	ldr	r3, [pc, #432]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b62      	ldr	r3, [pc, #392]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c4      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4952      	ldr	r1, [pc, #328]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd fcfb 	bl	8000d2c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fd fcf7 	bl	8000d2c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a5      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4940      	ldr	r1, [pc, #256]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fcda 	bl	8000d2c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fd fcd6 	bl	8000d2c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e184      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fcba 	bl	8000d2c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd fcb6 	bl	8000d2c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e164      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fd fca3 	bl	8000d2c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fd fc9f 	bl	8000d2c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e14d      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a0 	beq.w	8003556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d121      	bne.n	8003496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fd fc65 	bl	8000d2c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e011      	b.n	800348a <HAL_RCC_OscConfig+0x2ce>
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	42470000 	.word	0x42470000
 8003470:	42470e80 	.word	0x42470e80
 8003474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fd fc58 	bl	8000d2c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e106      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <HAL_RCC_OscConfig+0x4e4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x2f0>
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a80      	ldr	r2, [pc, #512]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	e01c      	b.n	80034e6 <HAL_RCC_OscConfig+0x32a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d10c      	bne.n	80034ce <HAL_RCC_OscConfig+0x312>
 80034b4:	4b7b      	ldr	r3, [pc, #492]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a7a      	ldr	r2, [pc, #488]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	4b78      	ldr	r3, [pc, #480]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a77      	ldr	r2, [pc, #476]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0x32a>
 80034ce:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a74      	ldr	r2, [pc, #464]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a71      	ldr	r2, [pc, #452]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d015      	beq.n	800351a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fd fc1d 	bl	8000d2c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fd fc19 	bl	8000d2c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0c5      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCC_OscConfig+0x33a>
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fd fc07 	bl	8000d2c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fd fc03 	bl	8000d2c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0af      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	4b5a      	ldr	r3, [pc, #360]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 809b 	beq.w	8003696 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d05c      	beq.n	8003626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d141      	bne.n	80035f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd fbd7 	bl	8000d2c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd fbd3 	bl	8000d2c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e081      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	019b      	lsls	r3, r3, #6
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	3b01      	subs	r3, #1
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	4937      	ldr	r1, [pc, #220]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fbac 	bl	8000d2c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fba8 	bl	8000d2c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e056      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x41c>
 80035f6:	e04e      	b.n	8003696 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fd fb95 	bl	8000d2c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003606:	f7fd fb91 	bl	8000d2c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e03f      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x44a>
 8003624:	e037      	b.n	8003696 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e032      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_RCC_OscConfig+0x4e8>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d028      	beq.n	8003692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d121      	bne.n	8003692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d11a      	bne.n	8003692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003662:	4013      	ands	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003668:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366a:	4293      	cmp	r3, r2
 800366c:	d111      	bne.n	8003692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d107      	bne.n	8003692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40007000 	.word	0x40007000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	42470060 	.word	0x42470060

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cc      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d90c      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a58      	ldr	r2, [pc, #352]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d044      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e067      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4934      	ldr	r1, [pc, #208]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd fac6 	bl	8000d2c <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd fac2 	bl	8000d2c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d20c      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fa26 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00
 8003868:	40023800 	.word	0x40023800
 800386c:	08007438 	.word	0x08007438
 8003870:	20000004 	.word	0x20000004
 8003874:	20000008 	.word	0x20000008

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	2300      	movs	r3, #0
 800388a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003890:	4b67      	ldr	r3, [pc, #412]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00d      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 800389c:	2b08      	cmp	r3, #8
 800389e:	f200 80bd 	bhi.w	8003a1c <HAL_RCC_GetSysClockFreq+0x1a4>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x34>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038aa:	e0b7      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ae:	60bb      	str	r3, [r7, #8]
       break;
 80038b0:	e0b7      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b2:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038b4:	60bb      	str	r3, [r7, #8]
      break;
 80038b6:	e0b4      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b8:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04d      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b58      	ldr	r3, [pc, #352]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	ea02 0800 	and.w	r8, r2, r0
 80038e6:	ea03 0901 	and.w	r9, r3, r1
 80038ea:	4640      	mov	r0, r8
 80038ec:	4649      	mov	r1, r9
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038fc:	0142      	lsls	r2, r0, #5
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	ebb0 0008 	subs.w	r0, r0, r8
 8003906:	eb61 0109 	sbc.w	r1, r1, r9
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	018b      	lsls	r3, r1, #6
 8003914:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003918:	0182      	lsls	r2, r0, #6
 800391a:	1a12      	subs	r2, r2, r0
 800391c:	eb63 0301 	sbc.w	r3, r3, r1
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	00d9      	lsls	r1, r3, #3
 800392a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800392e:	00d0      	lsls	r0, r2, #3
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	eb12 0208 	adds.w	r2, r2, r8
 8003938:	eb43 0309 	adc.w	r3, r3, r9
 800393c:	f04f 0000 	mov.w	r0, #0
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	0259      	lsls	r1, r3, #9
 8003946:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800394a:	0250      	lsls	r0, r2, #9
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f7fc fc34 	bl	80001c8 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e04a      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	ea02 0400 	and.w	r4, r2, r0
 8003982:	ea03 0501 	and.w	r5, r3, r1
 8003986:	4620      	mov	r0, r4
 8003988:	4629      	mov	r1, r5
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	014b      	lsls	r3, r1, #5
 8003994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003998:	0142      	lsls	r2, r0, #5
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	1b00      	subs	r0, r0, r4
 80039a0:	eb61 0105 	sbc.w	r1, r1, r5
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	018b      	lsls	r3, r1, #6
 80039ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039b2:	0182      	lsls	r2, r0, #6
 80039b4:	1a12      	subs	r2, r2, r0
 80039b6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ba:	f04f 0000 	mov.w	r0, #0
 80039be:	f04f 0100 	mov.w	r1, #0
 80039c2:	00d9      	lsls	r1, r3, #3
 80039c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c8:	00d0      	lsls	r0, r2, #3
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	1912      	adds	r2, r2, r4
 80039d0:	eb45 0303 	adc.w	r3, r5, r3
 80039d4:	f04f 0000 	mov.w	r0, #0
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	0299      	lsls	r1, r3, #10
 80039de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039e2:	0290      	lsls	r0, r2, #10
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f7fc fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	60bb      	str	r3, [r7, #8]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a1e:	60bb      	str	r3, [r7, #8]
      break;
 8003a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a22:	68bb      	ldr	r3, [r7, #8]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a58:	f7ff fff0 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0a9b      	lsrs	r3, r3, #10
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	08007448 	.word	0x08007448

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d035      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aa4:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd f93f 	bl	8000d2c <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ab2:	f7fd f93b 	bl	8000d2c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0b0      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	019a      	lsls	r2, r3, #6
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	071b      	lsls	r3, r3, #28
 8003adc:	4955      	ldr	r1, [pc, #340]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae4:	4b52      	ldr	r3, [pc, #328]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aea:	f7fd f91f 	bl	8000d2c <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003af2:	f7fd f91b 	bl	8000d2c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e090      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8083 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b46:	f7fd f8f1 	bl	8000d2c <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fd f8ed 	bl	8000d2c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e062      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02f      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d028      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d114      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fd f8bb 	bl	8000d2c <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd f8b7 	bl	8000d2c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e02a      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ee      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	490d      	ldr	r1, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
 8003c04:	e005      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c10:	6093      	str	r3, [r2, #8]
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	4905      	ldr	r1, [pc, #20]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	42470068 	.word	0x42470068
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42470e40 	.word	0x42470e40

08003c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d13e      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d12f      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c76:	617b      	str	r3, [r7, #20]
          break;
 8003c78:	e02f      	b.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c86:	d108      	bne.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c88:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	e007      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc4:	0f1b      	lsrs	r3, r3, #28
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
          break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
          break;
 8003cd8:	bf00      	nop
        }
      }
      break;
 8003cda:	bf00      	nop
    }
  }
  return frequency;
 8003cdc:	697b      	ldr	r3, [r7, #20]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00bb8000 	.word	0x00bb8000
 8003cf4:	007a1200 	.word	0x007a1200
 8003cf8:	00f42400 	.word	0x00f42400

08003cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07b      	b.n	8003e06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d009      	beq.n	8003d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
 8003d26:	e005      	b.n	8003d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc fece 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	ea42 0103 	orr.w	r1, r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0104 	and.w	r1, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0210 	and.w	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e0e:	b084      	sub	sp, #16
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	f107 001c 	add.w	r0, r7, #28
 8003e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d122      	bne.n	8003e6c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 fb1b 	bl	800549c <USB_CoreReset>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e01a      	b.n	8003ea2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f001 fb0f 	bl	800549c <USB_CoreReset>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
 8003e94:	e005      	b.n	8003ea2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10b      	bne.n	8003ec0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f043 0206 	orr.w	r2, r3, #6
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ecc:	b004      	add	sp, #16
 8003ece:	4770      	bx	lr

08003ed0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d165      	bne.n	8003fb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	; (8003fec <USB_SetTurnaroundTime+0x11c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d906      	bls.n	8003efa <USB_SetTurnaroundTime+0x2a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <USB_SetTurnaroundTime+0x120>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d202      	bcs.n	8003efa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e062      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4a3c      	ldr	r2, [pc, #240]	; (8003ff0 <USB_SetTurnaroundTime+0x120>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d306      	bcc.n	8003f10 <USB_SetTurnaroundTime+0x40>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <USB_SetTurnaroundTime+0x124>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d202      	bcs.n	8003f10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f0a:	230e      	movs	r3, #14
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e057      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4a38      	ldr	r2, [pc, #224]	; (8003ff4 <USB_SetTurnaroundTime+0x124>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d306      	bcc.n	8003f26 <USB_SetTurnaroundTime+0x56>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <USB_SetTurnaroundTime+0x128>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d202      	bcs.n	8003f26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f20:	230d      	movs	r3, #13
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e04c      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <USB_SetTurnaroundTime+0x128>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d306      	bcc.n	8003f3c <USB_SetTurnaroundTime+0x6c>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a32      	ldr	r2, [pc, #200]	; (8003ffc <USB_SetTurnaroundTime+0x12c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d802      	bhi.n	8003f3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f36:	230c      	movs	r3, #12
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e041      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <USB_SetTurnaroundTime+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d906      	bls.n	8003f52 <USB_SetTurnaroundTime+0x82>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <USB_SetTurnaroundTime+0x130>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d802      	bhi.n	8003f52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f4c:	230b      	movs	r3, #11
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e036      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <USB_SetTurnaroundTime+0x130>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d906      	bls.n	8003f68 <USB_SetTurnaroundTime+0x98>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a29      	ldr	r2, [pc, #164]	; (8004004 <USB_SetTurnaroundTime+0x134>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d802      	bhi.n	8003f68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f62:	230a      	movs	r3, #10
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e02b      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a26      	ldr	r2, [pc, #152]	; (8004004 <USB_SetTurnaroundTime+0x134>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d906      	bls.n	8003f7e <USB_SetTurnaroundTime+0xae>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <USB_SetTurnaroundTime+0x138>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d202      	bcs.n	8003f7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f78:	2309      	movs	r3, #9
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e020      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a21      	ldr	r2, [pc, #132]	; (8004008 <USB_SetTurnaroundTime+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d306      	bcc.n	8003f94 <USB_SetTurnaroundTime+0xc4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a20      	ldr	r2, [pc, #128]	; (800400c <USB_SetTurnaroundTime+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d802      	bhi.n	8003f94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f8e:	2308      	movs	r3, #8
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e015      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4a1d      	ldr	r2, [pc, #116]	; (800400c <USB_SetTurnaroundTime+0x13c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d906      	bls.n	8003faa <USB_SetTurnaroundTime+0xda>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <USB_SetTurnaroundTime+0x140>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d202      	bcs.n	8003faa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e00a      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003faa:	2306      	movs	r3, #6
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e007      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fb6:	2309      	movs	r3, #9
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e001      	b.n	8003fc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fbc:	2309      	movs	r3, #9
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	00d8acbf 	.word	0x00d8acbf
 8003ff0:	00e4e1c0 	.word	0x00e4e1c0
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	01067380 	.word	0x01067380
 8003ffc:	011a499f 	.word	0x011a499f
 8004000:	01312cff 	.word	0x01312cff
 8004004:	014ca43f 	.word	0x014ca43f
 8004008:	016e3600 	.word	0x016e3600
 800400c:	01a6ab1f 	.word	0x01a6ab1f
 8004010:	01e84800 	.word	0x01e84800

08004014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f043 0201 	orr.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d115      	bne.n	80040a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004086:	2001      	movs	r0, #1
 8004088:	f7fc fe5c 	bl	8000d44 <HAL_Delay>
      ms++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 f972 	bl	800537c <USB_GetMode>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d01e      	beq.n	80040dc <USB_SetCurrentMode+0x84>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b31      	cmp	r3, #49	; 0x31
 80040a2:	d9f0      	bls.n	8004086 <USB_SetCurrentMode+0x2e>
 80040a4:	e01a      	b.n	80040dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d115      	bne.n	80040d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fc fe43 	bl	8000d44 <HAL_Delay>
      ms++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 f959 	bl	800537c <USB_GetMode>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <USB_SetCurrentMode+0x84>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b31      	cmp	r3, #49	; 0x31
 80040d4:	d9f0      	bls.n	80040b8 <USB_SetCurrentMode+0x60>
 80040d6:	e001      	b.n	80040dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e005      	b.n	80040e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b32      	cmp	r3, #50	; 0x32
 80040e0:	d101      	bne.n	80040e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f0:	b084      	sub	sp, #16
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e009      	b.n	8004124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3340      	adds	r3, #64	; 0x40
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3301      	adds	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0e      	cmp	r3, #14
 8004128:	d9f2      	bls.n	8004110 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11c      	bne.n	800416a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
 8004168:	e00b      	b.n	8004182 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004188:	461a      	mov	r2, r3
 800418a:	2300      	movs	r3, #0
 800418c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	4619      	mov	r1, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	461a      	mov	r2, r3
 800419e:	680b      	ldr	r3, [r1, #0]
 80041a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10c      	bne.n	80041c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041ae:	2100      	movs	r1, #0
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f945 	bl	8004440 <USB_SetDevSpeed>
 80041b6:	e008      	b.n	80041ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041b8:	2101      	movs	r1, #1
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f940 	bl	8004440 <USB_SetDevSpeed>
 80041c0:	e003      	b.n	80041ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041c2:	2103      	movs	r1, #3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f93b 	bl	8004440 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041ca:	2110      	movs	r1, #16
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f8f3 	bl	80043b8 <USB_FlushTxFifo>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f90f 	bl	8004400 <USB_FlushRxFifo>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	461a      	mov	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e043      	b.n	800429e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800422c:	d118      	bne.n	8004260 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	461a      	mov	r2, r3
 8004242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e013      	b.n	8004272 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e008      	b.n	8004272 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004290:	461a      	mov	r2, r3
 8004292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3301      	adds	r3, #1
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3b7      	bcc.n	8004216 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	e043      	b.n	8004334 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c2:	d118      	bne.n	80042f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e013      	b.n	8004308 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e008      	b.n	8004308 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	461a      	mov	r2, r3
 8004316:	2300      	movs	r3, #0
 8004318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800432c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3301      	adds	r3, #1
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d3b7      	bcc.n	80042ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800435c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f043 0210 	orr.w	r2, r3, #16
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <USB_DevInit+0x2c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f043 0208 	orr.w	r2, r3, #8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800438e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043b0:	b004      	add	sp, #16
 80043b2:	4770      	bx	lr
 80043b4:	803c3800 	.word	0x803c3800

080043b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	4a08      	ldr	r2, [pc, #32]	; (80043fc <USB_FlushTxFifo+0x44>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e006      	b.n	80043f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d0f1      	beq.n	80043d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	00030d40 	.word	0x00030d40

08004400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2210      	movs	r2, #16
 8004410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4a08      	ldr	r2, [pc, #32]	; (800443c <USB_FlushRxFifo+0x3c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e006      	b.n	8004430 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d0f1      	beq.n	8004412 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	00030d40 	.word	0x00030d40

08004440 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004472:	b480      	push	{r7}
 8004474:	b087      	sub	sp, #28
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0306 	and.w	r3, r3, #6
 800448a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]
 8004496:	e00a      	b.n	80044ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d002      	beq.n	80044a4 <USB_GetDevSpeed+0x32>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d102      	bne.n	80044aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044a4:	2302      	movs	r3, #2
 80044a6:	75fb      	strb	r3, [r7, #23]
 80044a8:	e001      	b.n	80044ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044aa:	230f      	movs	r3, #15
 80044ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d13a      	bne.n	800454e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d155      	bne.n	80045bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	78db      	ldrb	r3, [r3, #3]
 800452a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800452c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	059b      	lsls	r3, r3, #22
 8004532:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004534:	4313      	orrs	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e036      	b.n	80045bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800456c:	4313      	orrs	r3, r2
 800456e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11a      	bne.n	80045bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	78db      	ldrb	r3, [r3, #3]
 80045a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045a2:	430b      	orrs	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d161      	bne.n	80046ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fe:	d11f      	bne.n	8004640 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800461e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800463e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	b29b      	uxth	r3, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4013      	ands	r3, r2
 8004662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004684:	4013      	ands	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	0159      	lsls	r1, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	440b      	add	r3, r1
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	4619      	mov	r1, r3
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <USB_DeactivateEndpoint+0x1b0>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
 80046aa:	e060      	b.n	800476e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c2:	d11f      	bne.n	8004704 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004702:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f303 	lsl.w	r3, r1, r3
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	43db      	mvns	r3, r3
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004724:	4013      	ands	r3, r2
 8004726:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	43db      	mvns	r3, r3
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004748:	4013      	ands	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0159      	lsls	r1, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	440b      	add	r3, r1
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	4619      	mov	r1, r3
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <USB_DeactivateEndpoint+0x1b4>)
 800476a:	4013      	ands	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	ec337800 	.word	0xec337800
 8004780:	eff37800 	.word	0xeff37800

08004784 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 815c 	bne.w	8004a5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d132      	bne.n	8004814 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480c:	0cdb      	lsrs	r3, r3, #19
 800480e:	04db      	lsls	r3, r3, #19
 8004810:	6113      	str	r3, [r2, #16]
 8004812:	e074      	b.n	80048fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482e:	0cdb      	lsrs	r3, r3, #19
 8004830:	04db      	lsls	r3, r3, #19
 8004832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004852:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6959      	ldr	r1, [r3, #20]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	440b      	add	r3, r1
 8004870:	1e59      	subs	r1, r3, #1
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	fbb1 f3f3 	udiv	r3, r1, r3
 800487a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800487c:	4b9d      	ldr	r3, [pc, #628]	; (8004af4 <USB_EPStartXfer+0x370>)
 800487e:	400b      	ands	r3, r1
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	0148      	lsls	r0, r1, #5
 8004884:	69f9      	ldr	r1, [r7, #28]
 8004886:	4401      	add	r1, r0
 8004888:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	0148      	lsls	r0, r1, #5
 80048aa:	69f9      	ldr	r1, [r7, #28]
 80048ac:	4401      	add	r1, r0
 80048ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048b2:	4313      	orrs	r3, r2
 80048b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	78db      	ldrb	r3, [r3, #3]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d11f      	bne.n	80048fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d14b      	bne.n	800499c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d128      	bne.n	800497a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d110      	bne.n	800495a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004952:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e00f      	b.n	800497a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e12f      	b.n	8004bfc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	78db      	ldrb	r3, [r3, #3]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d015      	beq.n	80049f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8117 	beq.w	8004bfc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	2101      	movs	r1, #1
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ea:	4313      	orrs	r3, r2
 80049ec:	634b      	str	r3, [r1, #52]	; 0x34
 80049ee:	e105      	b.n	8004bfc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	e00f      	b.n	8004a42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	68d9      	ldr	r1, [r3, #12]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	b298      	uxth	r0, r3
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4603      	mov	r3, r0
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa2b 	bl	8004eb2 <USB_WritePacket>
 8004a5c:	e0ce      	b.n	8004bfc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	0cdb      	lsrs	r3, r3, #19
 8004a7a:	04db      	lsls	r3, r3, #19
 8004a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aa0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d126      	bne.n	8004af8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	0148      	lsls	r0, r1, #5
 8004ac4:	69f9      	ldr	r1, [r7, #28]
 8004ac6:	4401      	add	r1, r0
 8004ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004acc:	4313      	orrs	r3, r2
 8004ace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aee:	6113      	str	r3, [r2, #16]
 8004af0:	e036      	b.n	8004b60 <USB_EPStartXfer+0x3dc>
 8004af2:	bf00      	nop
 8004af4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	8afb      	ldrh	r3, [r7, #22]
 8004b1e:	04d9      	lsls	r1, r3, #19
 8004b20:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <USB_EPStartXfer+0x484>)
 8004b22:	400b      	ands	r3, r1
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	0148      	lsls	r0, r1, #5
 8004b28:	69f9      	ldr	r1, [r7, #28]
 8004b2a:	4401      	add	r1, r0
 8004b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b30:	4313      	orrs	r3, r2
 8004b32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	8af9      	ldrh	r1, [r7, #22]
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	0148      	lsls	r0, r1, #5
 8004b54:	69f9      	ldr	r1, [r7, #28]
 8004b56:	4401      	add	r1, r0
 8004b58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10d      	bne.n	8004b82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68d9      	ldr	r1, [r3, #12]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	460a      	mov	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	78db      	ldrb	r3, [r3, #3]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d128      	bne.n	8004bdc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d110      	bne.n	8004bbc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00f      	b.n	8004bdc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	1ff80000 	.word	0x1ff80000

08004c0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	f040 80cd 	bne.w	8004dc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d132      	bne.n	8004c9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	0cdb      	lsrs	r3, r3, #19
 8004c96:	04db      	lsls	r3, r3, #19
 8004c98:	6113      	str	r3, [r2, #16]
 8004c9a:	e04e      	b.n	8004d3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	0cdb      	lsrs	r3, r3, #19
 8004cb8:	04db      	lsls	r3, r3, #19
 8004cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2a:	6939      	ldr	r1, [r7, #16]
 8004d2c:	0148      	lsls	r0, r1, #5
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	4401      	add	r1, r0
 8004d32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d36:	4313      	orrs	r3, r2
 8004d38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d11e      	bne.n	8004d7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e092      	b.n	8004ea4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d07e      	beq.n	8004ea4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	634b      	str	r3, [r1, #52]	; 0x34
 8004dc6:	e06d      	b.n	8004ea4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de2:	0cdb      	lsrs	r3, r3, #19
 8004de4:	04db      	lsls	r3, r3, #19
 8004de6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e52:	6939      	ldr	r1, [r7, #16]
 8004e54:	0148      	lsls	r0, r1, #5
 8004e56:	6979      	ldr	r1, [r7, #20]
 8004e58:	4401      	add	r1, r0
 8004e5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10d      	bne.n	8004e84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	460a      	mov	r2, r1
 8004e82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b089      	sub	sp, #36	; 0x24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	71fb      	strb	r3, [r7, #7]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d123      	bne.n	8004f20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ed8:	88bb      	ldrh	r3, [r7, #4]
 8004eda:	3303      	adds	r3, #3
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e018      	b.n	8004f18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	031a      	lsls	r2, r3, #12
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3e2      	bcc.n	8004ee6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b08b      	sub	sp, #44	; 0x2c
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	e014      	b.n	8004f84 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	3301      	adds	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	3301      	adds	r3, #1
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d3e6      	bcc.n	8004f5a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f8c:	8bfb      	ldrh	r3, [r7, #30]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01e      	beq.n	8004fd0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f107 0310 	add.w	r3, r7, #16
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	701a      	strb	r2, [r3, #0]
      i++;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fc4:	8bfb      	ldrh	r3, [r7, #30]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fca:	8bfb      	ldrh	r3, [r7, #30]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ea      	bne.n	8004fa6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	372c      	adds	r7, #44	; 0x2c
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d12c      	bne.n	8005054 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	db12      	blt.n	8005032 <USB_EPSetStall+0x54>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005030:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e02b      	b.n	80050ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db12      	blt.n	800508c <USB_EPSetStall+0xae>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00f      	beq.n	800508c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005086:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800508a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d128      	bne.n	8005128 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d003      	beq.n	8005106 <USB_EPClearStall+0x4c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	78db      	ldrb	r3, [r3, #3]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d138      	bne.n	8005178 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e027      	b.n	8005178 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005146:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	78db      	ldrb	r3, [r3, #3]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d003      	beq.n	8005158 <USB_EPClearStall+0x9e>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	78db      	ldrb	r3, [r3, #3]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d10f      	bne.n	8005178 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005176:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005200:	f023 0302 	bic.w	r3, r3, #2
 8005204:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4013      	ands	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	0c1b      	lsrs	r3, r3, #16
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	b29b      	uxth	r3, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005312:	68bb      	ldr	r3, [r7, #8]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	b2db      	uxtb	r3, r3
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800536e:	68bb      	ldr	r3, [r7, #8]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	460b      	mov	r3, r1
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	333c      	adds	r3, #60	; 0x3c
 80053f6:	3304      	adds	r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4a26      	ldr	r2, [pc, #152]	; (8005498 <USB_EP0_OutStart+0xb8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d90a      	bls.n	800541a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d101      	bne.n	800541a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e037      	b.n	800548a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	f043 0318 	orr.w	r3, r3, #24
 800544c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005460:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10f      	bne.n	8005488 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005482:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	4f54300a 	.word	0x4f54300a

0800549c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <USB_CoreReset+0x60>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e01a      	b.n	80054ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	daf3      	bge.n	80054a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <USB_CoreReset+0x60>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e006      	b.n	80054ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d0f1      	beq.n	80054d0 <USB_CoreReset+0x34>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	00030d40 	.word	0x00030d40

08005500 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800550c:	2010      	movs	r0, #16
 800550e:	f001 fef3 	bl	80072f8 <USBD_static_malloc>
 8005512:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005522:	2302      	movs	r3, #2
 8005524:	e01b      	b.n	800555e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7c1b      	ldrb	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2207      	movs	r2, #7
 800553a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800553c:	e002      	b.n	8005544 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	220a      	movs	r2, #10
 8005542:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005544:	2304      	movs	r3, #4
 8005546:	2203      	movs	r2, #3
 8005548:	2181      	movs	r1, #129	; 0x81
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fdc3 	bl	80070d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005572:	2181      	movs	r1, #129	; 0x81
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fdd4 	bl	8007122 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005596:	4618      	mov	r0, r3
 8005598:	f001 febc 	bl	8007314 <USBD_static_free>
    pdev->pClassData = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055c0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0e8      	b.n	80057a6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d046      	beq.n	800566e <USBD_HID_Setup+0xbe>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	f040 80d8 	bne.w	8005796 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	3b02      	subs	r3, #2
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d836      	bhi.n	800565e <USBD_HID_Setup+0xae>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <USBD_HID_Setup+0x48>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800564f 	.word	0x0800564f
 80055fc:	0800562f 	.word	0x0800562f
 8005600:	0800565f 	.word	0x0800565f
 8005604:	0800565f 	.word	0x0800565f
 8005608:	0800565f 	.word	0x0800565f
 800560c:	0800565f 	.word	0x0800565f
 8005610:	0800565f 	.word	0x0800565f
 8005614:	0800565f 	.word	0x0800565f
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005621 	.word	0x08005621
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	885b      	ldrh	r3, [r3, #2]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]
          break;
 800562c:	e01e      	b.n	800566c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 f9fa 	bl	8006a2e <USBD_CtlSendData>
          break;
 800563a:	e017      	b.n	800566c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	885b      	ldrh	r3, [r3, #2]
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	b29b      	uxth	r3, r3
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
          break;
 800564c:	e00e      	b.n	800566c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	2201      	movs	r2, #1
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 f9e9 	bl	8006a2e <USBD_CtlSendData>
          break;
 800565c:	e006      	b.n	800566c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f973 	bl	800694c <USBD_CtlError>
          ret = USBD_FAIL;
 8005666:	2303      	movs	r3, #3
 8005668:	75fb      	strb	r3, [r7, #23]
          break;
 800566a:	bf00      	nop
      }
      break;
 800566c:	e09a      	b.n	80057a4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b0b      	cmp	r3, #11
 8005674:	f200 8086 	bhi.w	8005784 <USBD_HID_Setup+0x1d4>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <USBD_HID_Setup+0xd0>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056b1 	.word	0x080056b1
 8005684:	08005793 	.word	0x08005793
 8005688:	08005785 	.word	0x08005785
 800568c:	08005785 	.word	0x08005785
 8005690:	08005785 	.word	0x08005785
 8005694:	08005785 	.word	0x08005785
 8005698:	080056db 	.word	0x080056db
 800569c:	08005785 	.word	0x08005785
 80056a0:	08005785 	.word	0x08005785
 80056a4:	08005785 	.word	0x08005785
 80056a8:	08005733 	.word	0x08005733
 80056ac:	0800575d 	.word	0x0800575d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d107      	bne.n	80056cc <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056bc:	f107 030a 	add.w	r3, r7, #10
 80056c0:	2202      	movs	r2, #2
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 f9b2 	bl	8006a2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ca:	e063      	b.n	8005794 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f93c 	bl	800694c <USBD_CtlError>
            ret = USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	75fb      	strb	r3, [r7, #23]
          break;
 80056d8:	e05c      	b.n	8005794 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b22      	cmp	r3, #34	; 0x22
 80056e4:	d108      	bne.n	80056f8 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	88db      	ldrh	r3, [r3, #6]
 80056ea:	2b4a      	cmp	r3, #74	; 0x4a
 80056ec:	bf28      	it	cs
 80056ee:	234a      	movcs	r3, #74	; 0x4a
 80056f0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80056f2:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <USBD_HID_Setup+0x200>)
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	e015      	b.n	8005724 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	885b      	ldrh	r3, [r3, #2]
 80056fc:	0a1b      	lsrs	r3, r3, #8
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b21      	cmp	r3, #33	; 0x21
 8005702:	d108      	bne.n	8005716 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005704:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <USBD_HID_Setup+0x204>)
 8005706:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	88db      	ldrh	r3, [r3, #6]
 800570c:	2b09      	cmp	r3, #9
 800570e:	bf28      	it	cs
 8005710:	2309      	movcs	r3, #9
 8005712:	82bb      	strh	r3, [r7, #20]
 8005714:	e006      	b.n	8005724 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f917 	bl	800694c <USBD_CtlError>
            ret = USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	75fb      	strb	r3, [r7, #23]
            break;
 8005722:	e037      	b.n	8005794 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005724:	8abb      	ldrh	r3, [r7, #20]
 8005726:	461a      	mov	r2, r3
 8005728:	6939      	ldr	r1, [r7, #16]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f97f 	bl	8006a2e <USBD_CtlSendData>
          break;
 8005730:	e030      	b.n	8005794 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b03      	cmp	r3, #3
 800573c:	d107      	bne.n	800574e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3308      	adds	r3, #8
 8005742:	2201      	movs	r2, #1
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 f971 	bl	8006a2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800574c:	e022      	b.n	8005794 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f8fb 	bl	800694c <USBD_CtlError>
            ret = USBD_FAIL;
 8005756:	2303      	movs	r3, #3
 8005758:	75fb      	strb	r3, [r7, #23]
          break;
 800575a:	e01b      	b.n	8005794 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b03      	cmp	r3, #3
 8005766:	d106      	bne.n	8005776 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	885b      	ldrh	r3, [r3, #2]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005774:	e00e      	b.n	8005794 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 f8e7 	bl	800694c <USBD_CtlError>
            ret = USBD_FAIL;
 800577e:	2303      	movs	r3, #3
 8005780:	75fb      	strb	r3, [r7, #23]
          break;
 8005782:	e007      	b.n	8005794 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f8e0 	bl	800694c <USBD_CtlError>
          ret = USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	75fb      	strb	r3, [r7, #23]
          break;
 8005790:	e000      	b.n	8005794 <USBD_HID_Setup+0x1e4>
          break;
 8005792:	bf00      	nop
      }
      break;
 8005794:	e006      	b.n	80057a4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f8d7 	bl	800694c <USBD_CtlError>
      ret = USBD_FAIL;
 800579e:	2303      	movs	r3, #3
 80057a0:	75fb      	strb	r3, [r7, #23]
      break;
 80057a2:	bf00      	nop
  }

  return (uint8_t)ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200000cc 	.word	0x200000cc
 80057b4:	200000b4 	.word	0x200000b4

080057b8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2222      	movs	r2, #34	; 0x22
 80057c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80057c6:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20000048 	.word	0x20000048

080057d8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2222      	movs	r2, #34	; 0x22
 80057e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	2000006c 	.word	0x2000006c

080057f8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005806:	4b03      	ldr	r3, [pc, #12]	; (8005814 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20000090 	.word	0x20000090

08005818 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582a:	2200      	movs	r2, #0
 800582c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	220a      	movs	r2, #10
 8005848:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800584a:	4b03      	ldr	r3, [pc, #12]	; (8005858 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	200000c0 	.word	0x200000c0

0800585c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	e01f      	b.n	80058b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	79fa      	ldrb	r2, [r7, #7]
 80058a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f001 fbad 	bl	8007008 <USBD_LL_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e016      	b.n	8005902 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f107 020e 	add.w	r2, r7, #14
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
 80058f8:	4602      	mov	r2, r0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fbc4 	bl	80070a0 <USBD_LL_Start>
 8005918:	4603      	mov	r3, r0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	4611      	mov	r1, r2
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	78fa      	ldrb	r2, [r7, #3]
 8005990:	4611      	mov	r1, r2
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
  }

  return USBD_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 ff90 	bl	80068d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d01a      	beq.n	8005a12 <USBD_LL_SetupStage+0x72>
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d822      	bhi.n	8005a26 <USBD_LL_SetupStage+0x86>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <USBD_LL_SetupStage+0x4a>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d00a      	beq.n	80059fe <USBD_LL_SetupStage+0x5e>
 80059e8:	e01d      	b.n	8005a26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa62 	bl	8005ebc <USBD_StdDevReq>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e020      	b.n	8005a40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fac6 	bl	8005f98 <USBD_StdItfReq>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e016      	b.n	8005a40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb05 	bl	800602a <USBD_StdEPReq>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e00c      	b.n	8005a40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fb93 	bl	8007160 <USBD_LL_StallEP>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3e:	bf00      	nop
  }

  return ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	460b      	mov	r3, r1
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d138      	bne.n	8005ad0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d14a      	bne.n	8005b06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d913      	bls.n	8005aa4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	1ad2      	subs	r2, r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bf28      	it	cs
 8005a96:	4613      	movcs	r3, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fff2 	bl	8006a86 <USBD_CtlContinueRx>
 8005aa2:	e030      	b.n	8005b06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d10b      	bne.n	8005ac8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 ffed 	bl	8006aa8 <USBD_CtlSendStatus>
 8005ace:	e01a      	b.n	8005b06 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d114      	bne.n	8005b06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	7afa      	ldrb	r2, [r7, #11]
 8005af2:	4611      	mov	r1, r2
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	4798      	blx	r3
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	e000      	b.n	8005b08 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d16b      	bne.n	8005bfc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3314      	adds	r3, #20
 8005b28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d156      	bne.n	8005be2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d914      	bls.n	8005b6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 ff84 	bl	8006a64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f001 fba6 	bl	80072b4 <USBD_LL_PrepareReceive>
 8005b68:	e03b      	b.n	8005be2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d11c      	bne.n	8005bb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d316      	bcc.n	8005bb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d20f      	bcs.n	8005bb0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b90:	2200      	movs	r2, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 ff65 	bl	8006a64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f001 fb83 	bl	80072b4 <USBD_LL_PrepareReceive>
 8005bae:	e018      	b.n	8005be2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d10b      	bne.n	8005bd4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 fac2 	bl	8007160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 ff76 	bl	8006ace <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d122      	bne.n	8005c32 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff fe98 	bl	8005922 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bfa:	e01a      	b.n	8005c32 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d114      	bne.n	8005c32 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	7afa      	ldrb	r2, [r7, #11]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	4798      	blx	r3
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	e000      	b.n	8005c34 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e02f      	b.n	8005cd0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00f      	beq.n	8005c9a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6852      	ldr	r2, [r2, #4]
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	4611      	mov	r1, r2
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fa18 	bl	80070d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2240      	movs	r2, #64	; 0x40
 8005cb2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fa0a 	bl	80070d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2240      	movs	r2, #64	; 0x40
 8005ccc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d106      	bne.n	8005d46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e012      	b.n	8005d90 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d10b      	bne.n	8005d8e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e014      	b.n	8005ddc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d10d      	bne.n	8005dda <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e014      	b.n	8005e28 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d10d      	bne.n	8005e26 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	4611      	mov	r1, r2
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6852      	ldr	r2, [r2, #4]
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	4611      	mov	r1, r2
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
  }

  return USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3301      	adds	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e9c:	8a3b      	ldrh	r3, [r7, #16]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b21a      	sxth	r2, r3
 8005ea2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b21b      	sxth	r3, r3
 8005eaa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005eac:	89fb      	ldrh	r3, [r7, #14]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d005      	beq.n	8005ee2 <USBD_StdDevReq+0x26>
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d853      	bhi.n	8005f82 <USBD_StdDevReq+0xc6>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <USBD_StdDevReq+0x3a>
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d14f      	bne.n	8005f82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e04a      	b.n	8005f8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	d83b      	bhi.n	8005f76 <USBD_StdDevReq+0xba>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <USBD_StdDevReq+0x48>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f77 	.word	0x08005f77
 8005f10:	08005f63 	.word	0x08005f63
 8005f14:	08005f77 	.word	0x08005f77
 8005f18:	08005f37 	.word	0x08005f37
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f77 	.word	0x08005f77
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f41 	.word	0x08005f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9de 	bl	80062f0 <USBD_GetDescriptor>
          break;
 8005f34:	e024      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb43 	bl	80065c4 <USBD_SetAddress>
          break;
 8005f3e:	e01f      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fb82 	bl	800664c <USBD_SetConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005f4c:	e018      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fc21 	bl	8006798 <USBD_GetConfig>
          break;
 8005f56:	e013      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fc52 	bl	8006804 <USBD_GetStatus>
          break;
 8005f60:	e00e      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fc81 	bl	800686c <USBD_SetFeature>
          break;
 8005f6a:	e009      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc90 	bl	8006894 <USBD_ClrFeature>
          break;
 8005f74:	e004      	b.n	8005f80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fce7 	bl	800694c <USBD_CtlError>
          break;
 8005f7e:	bf00      	nop
      }
      break;
 8005f80:	e004      	b.n	8005f8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fce1 	bl	800694c <USBD_CtlError>
      break;
 8005f8a:	bf00      	nop
  }

  return ret;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop

08005f98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d005      	beq.n	8005fbe <USBD_StdItfReq+0x26>
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d82f      	bhi.n	8006016 <USBD_StdItfReq+0x7e>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USBD_StdItfReq+0x26>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d12b      	bne.n	8006016 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d81d      	bhi.n	8006008 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	889b      	ldrh	r3, [r3, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d813      	bhi.n	8005ffe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	88db      	ldrh	r3, [r3, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d110      	bne.n	8006012 <USBD_StdItfReq+0x7a>
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fd56 	bl	8006aa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ffc:	e009      	b.n	8006012 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fca3 	bl	800694c <USBD_CtlError>
          break;
 8006006:	e004      	b.n	8006012 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fc9e 	bl	800694c <USBD_CtlError>
          break;
 8006010:	e000      	b.n	8006014 <USBD_StdItfReq+0x7c>
          break;
 8006012:	bf00      	nop
      }
      break;
 8006014:	e004      	b.n	8006020 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fc97 	bl	800694c <USBD_CtlError>
      break;
 800601e:	bf00      	nop
  }

  return ret;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	889b      	ldrh	r3, [r3, #4]
 800603c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d007      	beq.n	800605a <USBD_StdEPReq+0x30>
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	f200 8145 	bhi.w	80062da <USBD_StdEPReq+0x2b0>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00c      	beq.n	800606e <USBD_StdEPReq+0x44>
 8006054:	2b20      	cmp	r3, #32
 8006056:	f040 8140 	bne.w	80062da <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
      break;
 800606c:	e13a      	b.n	80062e4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b03      	cmp	r3, #3
 8006074:	d007      	beq.n	8006086 <USBD_StdEPReq+0x5c>
 8006076:	2b03      	cmp	r3, #3
 8006078:	f300 8129 	bgt.w	80062ce <USBD_StdEPReq+0x2a4>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d07f      	beq.n	8006180 <USBD_StdEPReq+0x156>
 8006080:	2b01      	cmp	r3, #1
 8006082:	d03c      	beq.n	80060fe <USBD_StdEPReq+0xd4>
 8006084:	e123      	b.n	80062ce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d002      	beq.n	8006098 <USBD_StdEPReq+0x6e>
 8006092:	2b03      	cmp	r3, #3
 8006094:	d016      	beq.n	80060c4 <USBD_StdEPReq+0x9a>
 8006096:	e02c      	b.n	80060f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <USBD_StdEPReq+0x90>
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d00a      	beq.n	80060ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f859 	bl	8007160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f855 	bl	8007160 <USBD_LL_StallEP>
 80060b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060b8:	e020      	b.n	80060fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc45 	bl	800694c <USBD_CtlError>
              break;
 80060c2:	e01b      	b.n	80060fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10e      	bne.n	80060ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USBD_StdEPReq+0xc0>
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d008      	beq.n	80060ea <USBD_StdEPReq+0xc0>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	88db      	ldrh	r3, [r3, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 f83b 	bl	8007160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fcdc 	bl	8006aa8 <USBD_CtlSendStatus>

              break;
 80060f0:	e004      	b.n	80060fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc29 	bl	800694c <USBD_CtlError>
              break;
 80060fa:	bf00      	nop
          }
          break;
 80060fc:	e0ec      	b.n	80062d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d002      	beq.n	8006110 <USBD_StdEPReq+0xe6>
 800610a:	2b03      	cmp	r3, #3
 800610c:	d016      	beq.n	800613c <USBD_StdEPReq+0x112>
 800610e:	e030      	b.n	8006172 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <USBD_StdEPReq+0x108>
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d00a      	beq.n	8006132 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 f81d 	bl	8007160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f819 	bl	8007160 <USBD_LL_StallEP>
 800612e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006130:	e025      	b.n	800617e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fc09 	bl	800694c <USBD_CtlError>
              break;
 800613a:	e020      	b.n	800617e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	885b      	ldrh	r3, [r3, #2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11b      	bne.n	800617c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f823 	bl	800719e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fca5 	bl	8006aa8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006170:	e004      	b.n	800617c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fbe9 	bl	800694c <USBD_CtlError>
              break;
 800617a:	e000      	b.n	800617e <USBD_StdEPReq+0x154>
              break;
 800617c:	bf00      	nop
          }
          break;
 800617e:	e0ab      	b.n	80062d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d002      	beq.n	8006192 <USBD_StdEPReq+0x168>
 800618c:	2b03      	cmp	r3, #3
 800618e:	d032      	beq.n	80061f6 <USBD_StdEPReq+0x1cc>
 8006190:	e097      	b.n	80062c2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <USBD_StdEPReq+0x17e>
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	2b80      	cmp	r3, #128	; 0x80
 800619c:	d004      	beq.n	80061a8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fbd3 	bl	800694c <USBD_CtlError>
                break;
 80061a6:	e091      	b.n	80062cc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da0b      	bge.n	80061c8 <USBD_StdEPReq+0x19e>
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	3310      	adds	r3, #16
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4413      	add	r3, r2
 80061c4:	3304      	adds	r3, #4
 80061c6:	e00b      	b.n	80061e0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	3304      	adds	r3, #4
 80061e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2202      	movs	r2, #2
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc1d 	bl	8006a2e <USBD_CtlSendData>
              break;
 80061f4:	e06a      	b.n	80062cc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da11      	bge.n	8006222 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	3324      	adds	r3, #36	; 0x24
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d117      	bne.n	8006248 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb96 	bl	800694c <USBD_CtlError>
                  break;
 8006220:	e054      	b.n	80062cc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fb83 	bl	800694c <USBD_CtlError>
                  break;
 8006246:	e041      	b.n	80062cc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800624c:	2b00      	cmp	r3, #0
 800624e:	da0b      	bge.n	8006268 <USBD_StdEPReq+0x23e>
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	3310      	adds	r3, #16
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	3304      	adds	r3, #4
 8006266:	e00b      	b.n	8006280 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <USBD_StdEPReq+0x264>
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d103      	bne.n	8006296 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e00e      	b.n	80062b4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 ff9e 	bl	80071dc <USBD_LL_IsStallEP>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e002      	b.n	80062b4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2202      	movs	r2, #2
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fbb7 	bl	8006a2e <USBD_CtlSendData>
              break;
 80062c0:	e004      	b.n	80062cc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb41 	bl	800694c <USBD_CtlError>
              break;
 80062ca:	bf00      	nop
          }
          break;
 80062cc:	e004      	b.n	80062d8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb3b 	bl	800694c <USBD_CtlError>
          break;
 80062d6:	bf00      	nop
      }
      break;
 80062d8:	e004      	b.n	80062e4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fb35 	bl	800694c <USBD_CtlError>
      break;
 80062e2:	bf00      	nop
  }

  return ret;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	885b      	ldrh	r3, [r3, #2]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	2b06      	cmp	r3, #6
 8006312:	f200 8128 	bhi.w	8006566 <USBD_GetDescriptor+0x276>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <USBD_GetDescriptor+0x2c>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006339 	.word	0x08006339
 8006320:	08006351 	.word	0x08006351
 8006324:	08006391 	.word	0x08006391
 8006328:	08006567 	.word	0x08006567
 800632c:	08006567 	.word	0x08006567
 8006330:	08006507 	.word	0x08006507
 8006334:	08006533 	.word	0x08006533
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	7c12      	ldrb	r2, [r2, #16]
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
      break;
 800634e:	e112      	b.n	8006576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7c1b      	ldrb	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10d      	bne.n	8006374 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f107 0208 	add.w	r2, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	2202      	movs	r2, #2
 8006370:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006372:	e100      	b.n	8006576 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f107 0208 	add.w	r2, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	2202      	movs	r2, #2
 800638c:	701a      	strb	r2, [r3, #0]
      break;
 800638e:	e0f2      	b.n	8006576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b05      	cmp	r3, #5
 8006398:	f200 80ac 	bhi.w	80064f4 <USBD_GetDescriptor+0x204>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <USBD_GetDescriptor+0xb4>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063bd 	.word	0x080063bd
 80063a8:	080063f1 	.word	0x080063f1
 80063ac:	08006425 	.word	0x08006425
 80063b0:	08006459 	.word	0x08006459
 80063b4:	0800648d 	.word	0x0800648d
 80063b8:	080064c1 	.word	0x080064c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063de:	e091      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fab2 	bl	800694c <USBD_CtlError>
            err++;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	3301      	adds	r3, #1
 80063ec:	72fb      	strb	r3, [r7, #11]
          break;
 80063ee:	e089      	b.n	8006504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	7c12      	ldrb	r2, [r2, #16]
 8006408:	f107 0108 	add.w	r1, r7, #8
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
 8006410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006412:	e077      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa98 	bl	800694c <USBD_CtlError>
            err++;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	3301      	adds	r3, #1
 8006420:	72fb      	strb	r3, [r7, #11]
          break;
 8006422:	e06f      	b.n	8006504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7c12      	ldrb	r2, [r2, #16]
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006446:	e05d      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa7e 	bl	800694c <USBD_CtlError>
            err++;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	3301      	adds	r3, #1
 8006454:	72fb      	strb	r3, [r7, #11]
          break;
 8006456:	e055      	b.n	8006504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7c12      	ldrb	r2, [r2, #16]
 8006470:	f107 0108 	add.w	r1, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647a:	e043      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa64 	bl	800694c <USBD_CtlError>
            err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
          break;
 800648a:	e03b      	b.n	8006504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	7c12      	ldrb	r2, [r2, #16]
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
 80064ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ae:	e029      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa4a 	bl	800694c <USBD_CtlError>
            err++;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	3301      	adds	r3, #1
 80064bc:	72fb      	strb	r3, [r7, #11]
          break;
 80064be:	e021      	b.n	8006504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	7c12      	ldrb	r2, [r2, #16]
 80064d8:	f107 0108 	add.w	r1, r7, #8
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
 80064e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064e2:	e00f      	b.n	8006504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa30 	bl	800694c <USBD_CtlError>
            err++;
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	3301      	adds	r3, #1
 80064f0:	72fb      	strb	r3, [r7, #11]
          break;
 80064f2:	e007      	b.n	8006504 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa28 	bl	800694c <USBD_CtlError>
          err++;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	3301      	adds	r3, #1
 8006500:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006502:	bf00      	nop
      }
      break;
 8006504:	e037      	b.n	8006576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7c1b      	ldrb	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	f107 0208 	add.w	r2, r7, #8
 800651a:	4610      	mov	r0, r2
 800651c:	4798      	blx	r3
 800651e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006520:	e029      	b.n	8006576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fa11 	bl	800694c <USBD_CtlError>
        err++;
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	3301      	adds	r3, #1
 800652e:	72fb      	strb	r3, [r7, #11]
      break;
 8006530:	e021      	b.n	8006576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7c1b      	ldrb	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	f107 0208 	add.w	r2, r7, #8
 8006546:	4610      	mov	r0, r2
 8006548:	4798      	blx	r3
 800654a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	2207      	movs	r2, #7
 8006552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006554:	e00f      	b.n	8006576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9f7 	bl	800694c <USBD_CtlError>
        err++;
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	3301      	adds	r3, #1
 8006562:	72fb      	strb	r3, [r7, #11]
      break;
 8006564:	e007      	b.n	8006576 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f9ef 	bl	800694c <USBD_CtlError>
      err++;
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	3301      	adds	r3, #1
 8006572:	72fb      	strb	r3, [r7, #11]
      break;
 8006574:	bf00      	nop
  }

  if (err != 0U)
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11e      	bne.n	80065ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	88db      	ldrh	r3, [r3, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d016      	beq.n	80065b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006584:	893b      	ldrh	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	88da      	ldrh	r2, [r3, #6]
 800658e:	893b      	ldrh	r3, [r7, #8]
 8006590:	4293      	cmp	r3, r2
 8006592:	bf28      	it	cs
 8006594:	4613      	movcs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	461a      	mov	r2, r3
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa44 	bl	8006a2e <USBD_CtlSendData>
 80065a6:	e009      	b.n	80065bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9ce 	bl	800694c <USBD_CtlError>
 80065b0:	e004      	b.n	80065bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa78 	bl	8006aa8 <USBD_CtlSendStatus>
 80065b8:	e000      	b.n	80065bc <USBD_GetDescriptor+0x2cc>
    return;
 80065ba:	bf00      	nop
  }
}
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop

080065c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	889b      	ldrh	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d131      	bne.n	800663a <USBD_SetAddress+0x76>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	88db      	ldrh	r3, [r3, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d12d      	bne.n	800663a <USBD_SetAddress+0x76>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	2b7f      	cmp	r3, #127	; 0x7f
 80065e4:	d829      	bhi.n	800663a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	885b      	ldrh	r3, [r3, #2]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d104      	bne.n	8006608 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f9a3 	bl	800694c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	e01d      	b.n	8006644 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fe0d 	bl	8007234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa44 	bl	8006aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662e:	e009      	b.n	8006644 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006638:	e004      	b.n	8006644 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f985 	bl	800694c <USBD_CtlError>
  }
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	885b      	ldrh	r3, [r3, #2]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	4b4c      	ldr	r3, [pc, #304]	; (8006794 <USBD_SetConfig+0x148>)
 8006662:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006664:	4b4b      	ldr	r3, [pc, #300]	; (8006794 <USBD_SetConfig+0x148>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d905      	bls.n	8006678 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f96c 	bl	800694c <USBD_CtlError>
    return USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	e088      	b.n	800678a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d002      	beq.n	800668a <USBD_SetConfig+0x3e>
 8006684:	2b03      	cmp	r3, #3
 8006686:	d025      	beq.n	80066d4 <USBD_SetConfig+0x88>
 8006688:	e071      	b.n	800676e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800668a:	4b42      	ldr	r3, [pc, #264]	; (8006794 <USBD_SetConfig+0x148>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01c      	beq.n	80066cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <USBD_SetConfig+0x148>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800669c:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <USBD_SetConfig+0x148>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f948 	bl	8005938 <USBD_SetClassConfig>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f949 	bl	800694c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066ba:	e065      	b.n	8006788 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9f3 	bl	8006aa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2203      	movs	r2, #3
 80066c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066ca:	e05d      	b.n	8006788 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9eb 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 80066d2:	e059      	b.n	8006788 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066d4:	4b2f      	ldr	r3, [pc, #188]	; (8006794 <USBD_SetConfig+0x148>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d112      	bne.n	8006702 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <USBD_SetConfig+0x148>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066ee:	4b29      	ldr	r3, [pc, #164]	; (8006794 <USBD_SetConfig+0x148>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff f93b 	bl	8005970 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9d4 	bl	8006aa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006700:	e042      	b.n	8006788 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006702:	4b24      	ldr	r3, [pc, #144]	; (8006794 <USBD_SetConfig+0x148>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d02a      	beq.n	8006766 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff f929 	bl	8005970 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <USBD_SetConfig+0x148>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <USBD_SetConfig+0x148>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff f902 	bl	8005938 <USBD_SetClassConfig>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00f      	beq.n	800675e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f903 	bl	800694c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff f90e 	bl	8005970 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800675c:	e014      	b.n	8006788 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9a2 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 8006764:	e010      	b.n	8006788 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f99e 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 800676c:	e00c      	b.n	8006788 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f8eb 	bl	800694c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <USBD_SetConfig+0x148>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f8f7 	bl	8005970 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006782:	2303      	movs	r3, #3
 8006784:	73fb      	strb	r3, [r7, #15]
      break;
 8006786:	bf00      	nop
  }

  return ret;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000184 	.word	0x20000184

08006798 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	88db      	ldrh	r3, [r3, #6]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d004      	beq.n	80067b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8cd 	bl	800694c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067b2:	e023      	b.n	80067fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	dc02      	bgt.n	80067c6 <USBD_GetConfig+0x2e>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc03      	bgt.n	80067cc <USBD_GetConfig+0x34>
 80067c4:	e015      	b.n	80067f2 <USBD_GetConfig+0x5a>
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d00b      	beq.n	80067e2 <USBD_GetConfig+0x4a>
 80067ca:	e012      	b.n	80067f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3308      	adds	r3, #8
 80067d6:	2201      	movs	r2, #1
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f927 	bl	8006a2e <USBD_CtlSendData>
        break;
 80067e0:	e00c      	b.n	80067fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2201      	movs	r2, #1
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f91f 	bl	8006a2e <USBD_CtlSendData>
        break;
 80067f0:	e004      	b.n	80067fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8a9 	bl	800694c <USBD_CtlError>
        break;
 80067fa:	bf00      	nop
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	2b02      	cmp	r3, #2
 800681a:	d81e      	bhi.n	800685a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	88db      	ldrh	r3, [r3, #6]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d004      	beq.n	800682e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f890 	bl	800694c <USBD_CtlError>
        break;
 800682c:	e01a      	b.n	8006864 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f043 0202 	orr.w	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	330c      	adds	r3, #12
 800684e:	2202      	movs	r2, #2
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8eb 	bl	8006a2e <USBD_CtlSendData>
      break;
 8006858:	e004      	b.n	8006864 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f875 	bl	800694c <USBD_CtlError>
      break;
 8006862:	bf00      	nop
  }
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	885b      	ldrh	r3, [r3, #2]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d106      	bne.n	800688c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f90e 	bl	8006aa8 <USBD_CtlSendStatus>
  }
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d80b      	bhi.n	80068c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	885b      	ldrh	r3, [r3, #2]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10c      	bne.n	80068ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f8f3 	bl	8006aa8 <USBD_CtlSendStatus>
      }
      break;
 80068c2:	e004      	b.n	80068ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f840 	bl	800694c <USBD_CtlError>
      break;
 80068cc:	e000      	b.n	80068d0 <USBD_ClrFeature+0x3c>
      break;
 80068ce:	bf00      	nop
  }
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fabb 	bl	8005e7e <SWAPBYTE>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff faae 	bl	8005e7e <SWAPBYTE>
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff faa1 	bl	8005e7e <SWAPBYTE>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	80da      	strh	r2, [r3, #6]
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fc01 	bl	8007160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fbfd 	bl	8007160 <USBD_LL_StallEP>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d036      	beq.n	80069f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006988:	6938      	ldr	r0, [r7, #16]
 800698a:	f000 f836 	bl	80069fa <USBD_GetLen>
 800698e:	4603      	mov	r3, r0
 8006990:	3301      	adds	r3, #1
 8006992:	b29b      	uxth	r3, r3
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	7812      	ldrb	r2, [r2, #0]
 80069a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	3301      	adds	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	4413      	add	r3, r2
 80069b4:	2203      	movs	r2, #3
 80069b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	3301      	adds	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069be:	e013      	b.n	80069e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	3301      	adds	r3, #1
 80069d0:	613b      	str	r3, [r7, #16]
    idx++;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	3301      	adds	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4413      	add	r3, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
    idx++;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	3301      	adds	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e7      	bne.n	80069c0 <USBD_GetString+0x52>
 80069f0:	e000      	b.n	80069f4 <USBD_GetString+0x86>
    return;
 80069f2:	bf00      	nop
  }
}
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a0a:	e005      	b.n	8006a18 <USBD_GetLen+0x1e>
  {
    len++;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f5      	bne.n	8006a0c <USBD_GetLen+0x12>
  }

  return len;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	2100      	movs	r1, #0
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fc0c 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	2100      	movs	r1, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fbfb 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fc0b 	bl	80072b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fbd7 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2205      	movs	r2, #5
 8006ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fbe5 	bl	80072b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006af8:	2200      	movs	r2, #0
 8006afa:	490e      	ldr	r1, [pc, #56]	; (8006b34 <MX_USB_DEVICE_Init+0x40>)
 8006afc:	480e      	ldr	r0, [pc, #56]	; (8006b38 <MX_USB_DEVICE_Init+0x44>)
 8006afe:	f7fe fead 	bl	800585c <USBD_Init>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b08:	f7f9 fefc 	bl	8000904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006b0c:	490b      	ldr	r1, [pc, #44]	; (8006b3c <MX_USB_DEVICE_Init+0x48>)
 8006b0e:	480a      	ldr	r0, [pc, #40]	; (8006b38 <MX_USB_DEVICE_Init+0x44>)
 8006b10:	f7fe fed4 	bl	80058bc <USBD_RegisterClass>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b1a:	f7f9 fef3 	bl	8000904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b1e:	4806      	ldr	r0, [pc, #24]	; (8006b38 <MX_USB_DEVICE_Init+0x44>)
 8006b20:	f7fe fef3 	bl	800590a <USBD_Start>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006b2a:	f7f9 feeb 	bl	8000904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000118 	.word	0x20000118
 8006b38:	20000294 	.word	0x20000294
 8006b3c:	20000010 	.word	0x20000010

08006b40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	6039      	str	r1, [r7, #0]
 8006b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2212      	movs	r2, #18
 8006b50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b52:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000134 	.word	0x20000134

08006b64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2204      	movs	r2, #4
 8006b74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	20000148 	.word	0x20000148

08006b88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <USBD_FS_ProductStrDescriptor+0x34>)
 8006b9e:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ba0:	f7ff fee5 	bl	800696e <USBD_GetString>
 8006ba4:	e004      	b.n	8006bb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4904      	ldr	r1, [pc, #16]	; (8006bbc <USBD_FS_ProductStrDescriptor+0x34>)
 8006baa:	4805      	ldr	r0, [pc, #20]	; (8006bc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bac:	f7ff fedf 	bl	800696e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000564 	.word	0x20000564
 8006bc0:	080073f0 	.word	0x080073f0

08006bc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	4904      	ldr	r1, [pc, #16]	; (8006be4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bd4:	4804      	ldr	r0, [pc, #16]	; (8006be8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bd6:	f7ff feca 	bl	800696e <USBD_GetString>
  return USBD_StrDesc;
 8006bda:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000564 	.word	0x20000564
 8006be8:	08007408 	.word	0x08007408

08006bec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	221a      	movs	r2, #26
 8006bfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006bfe:	f000 f843 	bl	8006c88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c02:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2000014c 	.word	0x2000014c

08006c10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4907      	ldr	r1, [pc, #28]	; (8006c44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c26:	4808      	ldr	r0, [pc, #32]	; (8006c48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c28:	f7ff fea1 	bl	800696e <USBD_GetString>
 8006c2c:	e004      	b.n	8006c38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	4904      	ldr	r1, [pc, #16]	; (8006c44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c32:	4805      	ldr	r0, [pc, #20]	; (8006c48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c34:	f7ff fe9b 	bl	800696e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000564 	.word	0x20000564
 8006c48:	0800741c 	.word	0x0800741c

08006c4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4907      	ldr	r1, [pc, #28]	; (8006c80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c62:	4808      	ldr	r0, [pc, #32]	; (8006c84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c64:	f7ff fe83 	bl	800696e <USBD_GetString>
 8006c68:	e004      	b.n	8006c74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4904      	ldr	r1, [pc, #16]	; (8006c80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c6e:	4805      	ldr	r0, [pc, #20]	; (8006c84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c70:	f7ff fe7d 	bl	800696e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c74:	4b02      	ldr	r3, [pc, #8]	; (8006c80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000564 	.word	0x20000564
 8006c84:	08007428 	.word	0x08007428

08006c88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <Get_SerialNum+0x44>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <Get_SerialNum+0x48>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <Get_SerialNum+0x4c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cae:	2208      	movs	r2, #8
 8006cb0:	4909      	ldr	r1, [pc, #36]	; (8006cd8 <Get_SerialNum+0x50>)
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f814 	bl	8006ce0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cb8:	2204      	movs	r2, #4
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <Get_SerialNum+0x54>)
 8006cbc:	68b8      	ldr	r0, [r7, #8]
 8006cbe:	f000 f80f 	bl	8006ce0 <IntToUnicode>
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	1fff7a10 	.word	0x1fff7a10
 8006cd0:	1fff7a14 	.word	0x1fff7a14
 8006cd4:	1fff7a18 	.word	0x1fff7a18
 8006cd8:	2000014e 	.word	0x2000014e
 8006cdc:	2000015e 	.word	0x2000015e

08006ce0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]
 8006cf6:	e027      	b.n	8006d48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	0f1b      	lsrs	r3, r3, #28
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	d80b      	bhi.n	8006d18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	0f1b      	lsrs	r3, r3, #28
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	440b      	add	r3, r1
 8006d10:	3230      	adds	r2, #48	; 0x30
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e00a      	b.n	8006d2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	0f1b      	lsrs	r3, r3, #28
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4619      	mov	r1, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	440b      	add	r3, r1
 8006d28:	3237      	adds	r2, #55	; 0x37
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	3301      	adds	r3, #1
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	3301      	adds	r3, #1
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	7dfa      	ldrb	r2, [r7, #23]
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3d3      	bcc.n	8006cf8 <IntToUnicode+0x18>
  }
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d68:	f107 0314 	add.w	r3, r7, #20
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d80:	d147      	bne.n	8006e12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	4a24      	ldr	r2, [pc, #144]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	6313      	str	r3, [r2, #48]	; 0x30
 8006d92:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	4619      	mov	r1, r3
 8006db2:	481b      	ldr	r0, [pc, #108]	; (8006e20 <HAL_PCD_MspInit+0xc0>)
 8006db4:	f7fa f8fc 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006db8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006dca:	230a      	movs	r3, #10
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4812      	ldr	r0, [pc, #72]	; (8006e20 <HAL_PCD_MspInit+0xc0>)
 8006dd6:	f7fa f8eb 	bl	8000fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	4a0f      	ldr	r2, [pc, #60]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	6353      	str	r3, [r2, #52]	; 0x34
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dee:	4a0b      	ldr	r2, [pc, #44]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006df4:	6453      	str	r3, [r2, #68]	; 0x44
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_PCD_MspInit+0xbc>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	2043      	movs	r0, #67	; 0x43
 8006e08:	f7fa f89b 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e0c:	2043      	movs	r0, #67	; 0x43
 8006e0e:	f7fa f8b4 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e12:	bf00      	nop
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40020000 	.word	0x40020000

08006e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fdb0 	bl	80059a0 <USBD_LL_SetupStage>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fe fdea 	bl	8005a4a <USBD_LL_DataOutStage>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e90:	78fa      	ldrb	r2, [r7, #3]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3348      	adds	r3, #72	; 0x48
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7fe fe33 	bl	8005b10 <USBD_LL_DataInStage>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ff47 	bl	8005d54 <USBD_LL_SOF>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	e008      	b.n	8006efa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d102      	bne.n	8006ef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e001      	b.n	8006efa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006ef6:	f7f9 fd05 	bl	8000904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f00:	7bfa      	ldrb	r2, [r7, #15]
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fee7 	bl	8005cd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fe93 	bl	8005c3c <USBD_LL_Reset>
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fee2 	bl	8005cf8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <HAL_PCD_SuspendCallback+0x48>)
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4a03      	ldr	r2, [pc, #12]	; (8006f68 <HAL_PCD_SuspendCallback+0x48>)
 8006f5a:	f043 0306 	orr.w	r3, r3, #6
 8006f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fed2 	bl	8005d24 <USBD_LL_Resume>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe ff20 	bl	8005de4 <USBD_LL_IsoOUTIncomplete>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fee8 	bl	8005d98 <USBD_LL_IsoINIncomplete>
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe ff26 	bl	8005e30 <USBD_LL_DevConnected>
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe ff23 	bl	8005e46 <USBD_LL_DevDisconnected>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d13c      	bne.n	8007092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007018:	4a20      	ldr	r2, [pc, #128]	; (800709c <USBD_LL_Init+0x94>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1e      	ldr	r2, [pc, #120]	; (800709c <USBD_LL_Init+0x94>)
 8007024:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007028:	4b1c      	ldr	r3, [pc, #112]	; (800709c <USBD_LL_Init+0x94>)
 800702a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800702e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007030:	4b1a      	ldr	r3, [pc, #104]	; (800709c <USBD_LL_Init+0x94>)
 8007032:	2204      	movs	r2, #4
 8007034:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007036:	4b19      	ldr	r3, [pc, #100]	; (800709c <USBD_LL_Init+0x94>)
 8007038:	2202      	movs	r2, #2
 800703a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800703c:	4b17      	ldr	r3, [pc, #92]	; (800709c <USBD_LL_Init+0x94>)
 800703e:	2200      	movs	r2, #0
 8007040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007042:	4b16      	ldr	r3, [pc, #88]	; (800709c <USBD_LL_Init+0x94>)
 8007044:	2202      	movs	r2, #2
 8007046:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007048:	4b14      	ldr	r3, [pc, #80]	; (800709c <USBD_LL_Init+0x94>)
 800704a:	2200      	movs	r2, #0
 800704c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <USBD_LL_Init+0x94>)
 8007050:	2200      	movs	r2, #0
 8007052:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <USBD_LL_Init+0x94>)
 8007056:	2200      	movs	r2, #0
 8007058:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <USBD_LL_Init+0x94>)
 800705c:	2200      	movs	r2, #0
 800705e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <USBD_LL_Init+0x94>)
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007066:	480d      	ldr	r0, [pc, #52]	; (800709c <USBD_LL_Init+0x94>)
 8007068:	f7fa ff3c 	bl	8001ee4 <HAL_PCD_Init>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007072:	f7f9 fc47 	bl	8000904 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <USBD_LL_Init+0x94>)
 800707a:	f7fc f882 	bl	8003182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	2100      	movs	r1, #0
 8007082:	4806      	ldr	r0, [pc, #24]	; (800709c <USBD_LL_Init+0x94>)
 8007084:	f7fc f836 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007088:	2280      	movs	r2, #128	; 0x80
 800708a:	2101      	movs	r1, #1
 800708c:	4803      	ldr	r0, [pc, #12]	; (800709c <USBD_LL_Init+0x94>)
 800708e:	f7fc f831 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20000764 	.word	0x20000764

080070a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fb f831 	bl	800211e <HAL_PCD_Start>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f930 	bl	8007328 <USBD_Get_USB_Status>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	4603      	mov	r3, r0
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70bb      	strb	r3, [r7, #2]
 80070ec:	4613      	mov	r3, r2
 80070ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070fe:	78bb      	ldrb	r3, [r7, #2]
 8007100:	883a      	ldrh	r2, [r7, #0]
 8007102:	78f9      	ldrb	r1, [r7, #3]
 8007104:	f7fb fc15 	bl	8002932 <HAL_PCD_EP_Open>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f90a 	bl	8007328 <USBD_Get_USB_Status>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007118:	7bbb      	ldrb	r3, [r7, #14]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f7fb fc5e 	bl	8002a02 <HAL_PCD_EP_Close>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f8eb 	bl	8007328 <USBD_Get_USB_Status>
 8007152:	4603      	mov	r3, r0
 8007154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007156:	7bbb      	ldrb	r3, [r7, #14]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7fb fd1e 	bl	8002bc0 <HAL_PCD_EP_SetStall>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f8cc 	bl	8007328 <USBD_Get_USB_Status>
 8007190:	4603      	mov	r3, r0
 8007192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007194:	7bbb      	ldrb	r3, [r7, #14]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fb fd63 	bl	8002c88 <HAL_PCD_EP_ClrStall>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f8ad 	bl	8007328 <USBD_Get_USB_Status>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0b      	bge.n	8007210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	333e      	adds	r3, #62	; 0x3e
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	e00b      	b.n	8007228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007226:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f7fb fb48 	bl	80028e8 <HAL_PCD_SetAddress>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f862 	bl	8007328 <USBD_Get_USB_Status>
 8007264:	4603      	mov	r3, r0
 8007266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007268:	7bbb      	ldrb	r3, [r7, #14]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	460b      	mov	r3, r1
 8007280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007290:	7af9      	ldrb	r1, [r7, #11]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	f7fb fc49 	bl	8002b2c <HAL_PCD_EP_Transmit>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f841 	bl	8007328 <USBD_Get_USB_Status>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	460b      	mov	r3, r1
 80072c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80072d2:	7af9      	ldrb	r1, [r7, #11]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	f7fb fbdd 	bl	8002a96 <HAL_PCD_EP_Receive>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f820 	bl	8007328 <USBD_Get_USB_Status>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007300:	4b03      	ldr	r3, [pc, #12]	; (8007310 <USBD_static_malloc+0x18>)
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000188 	.word	0x20000188

08007314 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d817      	bhi.n	800736c <USBD_Get_USB_Status+0x44>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <USBD_Get_USB_Status+0x1c>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007355 	.word	0x08007355
 8007348:	0800735b 	.word	0x0800735b
 800734c:	08007361 	.word	0x08007361
 8007350:	08007367 	.word	0x08007367
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
    break;
 8007358:	e00b      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	73fb      	strb	r3, [r7, #15]
    break;
 800735e:	e008      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e005      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
    break;
 800736a:	e002      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	bf00      	nop
  }
  return usb_status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4d0d      	ldr	r5, [pc, #52]	; (80073b8 <__libc_init_array+0x38>)
 8007384:	4c0d      	ldr	r4, [pc, #52]	; (80073bc <__libc_init_array+0x3c>)
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	2600      	movs	r6, #0
 800738c:	42a6      	cmp	r6, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	4d0b      	ldr	r5, [pc, #44]	; (80073c0 <__libc_init_array+0x40>)
 8007392:	4c0c      	ldr	r4, [pc, #48]	; (80073c4 <__libc_init_array+0x44>)
 8007394:	f000 f820 	bl	80073d8 <_init>
 8007398:	1b64      	subs	r4, r4, r5
 800739a:	10a4      	asrs	r4, r4, #2
 800739c:	2600      	movs	r6, #0
 800739e:	42a6      	cmp	r6, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a8:	4798      	blx	r3
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b2:	4798      	blx	r3
 80073b4:	3601      	adds	r6, #1
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	08007458 	.word	0x08007458
 80073bc:	08007458 	.word	0x08007458
 80073c0:	08007458 	.word	0x08007458
 80073c4:	0800745c 	.word	0x0800745c

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
