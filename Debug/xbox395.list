
xbox395.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076fc  080076fc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007704  08007704  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000a18  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b98  20000b98  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001858b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003643  00000000  00000000  0003873b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241b9  00000000  00000000  0003de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fef  00000000  00000000  00062039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5b3  00000000  00000000  00079028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001435db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004728  00000000  00000000  00143630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007684 	.word	0x08007684

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007684 	.word	0x08007684

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fcd1 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82f 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f92b 	bl	8000728 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f895 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8c1 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8ef 	bl	80006bc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fc4f 	bl	8006d80 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t buttons_state;
  uint16_t joystick = 2048;
 80004e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004e6:	807b      	strh	r3, [r7, #2]
  int i;
  while (1)
  {
	 //read_joystick()
	 poll_buttons(&buttons_state);
 80004e8:	463b      	mov	r3, r7
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fa40 	bl	8000970 <poll_buttons>
	 for(i = 0; i < 8; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e007      	b.n	8000506 <main+0x46>
		 report_data[i] = joystick;
 80004f6:	490b      	ldr	r1, [pc, #44]	; (8000524 <main+0x64>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	 for(i = 0; i < 8; i++){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b07      	cmp	r3, #7
 800050a:	ddf4      	ble.n	80004f6 <main+0x36>
	 }
	 report_data[8] = buttons_state;
 800050c:	883a      	ldrh	r2, [r7, #0]
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <main+0x64>)
 8000510:	821a      	strh	r2, [r3, #16]
	 USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &report_data, (9)*sizeof(uint16_t));
 8000512:	2212      	movs	r2, #18
 8000514:	4903      	ldr	r1, [pc, #12]	; (8000524 <main+0x64>)
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x68>)
 8000518:	f005 fa6c 	bl	80059f4 <USBD_HID_SendReport>
	 HAL_Delay(10);
 800051c:	200a      	movs	r0, #10
 800051e:	f000 fd17 	bl	8000f50 <HAL_Delay>
	 poll_buttons(&buttons_state);
 8000522:	e7e1      	b.n	80004e8 <main+0x28>
 8000524:	20000208 	.word	0x20000208
 8000528:	200002c0 	.word	0x200002c0

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 f89a 	bl	8007674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ff20 	bl	80033f8 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 faa7 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f981 	bl	80038e8 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa90 	bl	8000b10 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f000 ff8b 	bl	8001558 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 fa62 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001b4 	.word	0x200001b4
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f001 f8a0 	bl	80017e0 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 fa33 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000274 	.word	0x20000274
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f003 fc13 	bl	8003f38 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f9fa 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000021c 	.word	0x2000021c
 8000724:	40013000 	.word	0x40013000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b85      	ldr	r3, [pc, #532]	; (8000958 <MX_GPIO_Init+0x230>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a84      	ldr	r2, [pc, #528]	; (8000958 <MX_GPIO_Init+0x230>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b82      	ldr	r3, [pc, #520]	; (8000958 <MX_GPIO_Init+0x230>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b7e      	ldr	r3, [pc, #504]	; (8000958 <MX_GPIO_Init+0x230>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a7d      	ldr	r2, [pc, #500]	; (8000958 <MX_GPIO_Init+0x230>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <MX_GPIO_Init+0x230>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b77      	ldr	r3, [pc, #476]	; (8000958 <MX_GPIO_Init+0x230>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a76      	ldr	r2, [pc, #472]	; (8000958 <MX_GPIO_Init+0x230>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b74      	ldr	r3, [pc, #464]	; (8000958 <MX_GPIO_Init+0x230>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b70      	ldr	r3, [pc, #448]	; (8000958 <MX_GPIO_Init+0x230>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a6f      	ldr	r2, [pc, #444]	; (8000958 <MX_GPIO_Init+0x230>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b6d      	ldr	r3, [pc, #436]	; (8000958 <MX_GPIO_Init+0x230>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b69      	ldr	r3, [pc, #420]	; (8000958 <MX_GPIO_Init+0x230>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a68      	ldr	r2, [pc, #416]	; (8000958 <MX_GPIO_Init+0x230>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b66      	ldr	r3, [pc, #408]	; (8000958 <MX_GPIO_Init+0x230>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b62      	ldr	r3, [pc, #392]	; (8000958 <MX_GPIO_Init+0x230>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a61      	ldr	r2, [pc, #388]	; (8000958 <MX_GPIO_Init+0x230>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <MX_GPIO_Init+0x230>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	485c      	ldr	r0, [pc, #368]	; (800095c <MX_GPIO_Init+0x234>)
 80007ec:	f000 fe9a 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	485a      	ldr	r0, [pc, #360]	; (8000960 <MX_GPIO_Init+0x238>)
 80007f6:	f000 fe95 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	2200      	movs	r2, #0
 80007fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000800:	4858      	ldr	r0, [pc, #352]	; (8000964 <MX_GPIO_Init+0x23c>)
 8000802:	f000 fe8f 	bl	8001524 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	484f      	ldr	r0, [pc, #316]	; (800095c <MX_GPIO_Init+0x234>)
 800081e:	f000 fccd 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4849      	ldr	r0, [pc, #292]	; (8000960 <MX_GPIO_Init+0x238>)
 800083a:	f000 fcbf 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON4_Pin BUTTON5_Pin
                           BUTTON6_Pin BUTTON7_Pin BUTTON8_Pin BUTTON9_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON4_Pin|BUTTON5_Pin
 800083e:	f640 3376 	movw	r3, #2934	; 0xb76
 8000842:	61fb      	str	r3, [r7, #28]
                          |BUTTON6_Pin|BUTTON7_Pin|BUTTON8_Pin|BUTTON9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4843      	ldr	r0, [pc, #268]	; (8000960 <MX_GPIO_Init+0x238>)
 8000854:	f000 fcb2 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000858:	2308      	movs	r3, #8
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	483b      	ldr	r0, [pc, #236]	; (8000960 <MX_GPIO_Init+0x238>)
 8000874:	f000 fca2 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800087c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4836      	ldr	r0, [pc, #216]	; (8000968 <MX_GPIO_Init+0x240>)
 800088e:	f000 fc95 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000892:	2304      	movs	r3, #4
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4831      	ldr	r0, [pc, #196]	; (800096c <MX_GPIO_Init+0x244>)
 80008a6:	f000 fc89 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON12_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON12_Pin;
 80008aa:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4827      	ldr	r0, [pc, #156]	; (800095c <MX_GPIO_Init+0x234>)
 80008c0:	f000 fc7c 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_GPIO_Init+0x244>)
 80008e2:	f000 fc6b 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <MX_GPIO_Init+0x23c>)
 8000900:	f000 fc5c 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON10_Pin BUTTON11_Pin */
  GPIO_InitStruct.Pin = BUTTON10_Pin|BUTTON11_Pin;
 8000904:	2306      	movs	r3, #6
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090c:	2301      	movs	r3, #1
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_GPIO_Init+0x23c>)
 8000918:	f000 fc50 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091c:	2320      	movs	r3, #32
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_GPIO_Init+0x23c>)
 8000930:	f000 fc44 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x234>)
 800094a:	f000 fc37 	bl	80011bc <HAL_GPIO_Init>

}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	; 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40021000 	.word	0x40021000
 8000960:	40020800 	.word	0x40020800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <poll_buttons>:

/* USER CODE BEGIN 4 */
void poll_buttons (uint16_t * p_button_state)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	*p_button_state = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800097e:	2102      	movs	r1, #2
 8000980:	4860      	ldr	r0, [pc, #384]	; (8000b04 <poll_buttons+0x194>)
 8000982:	f000 fdb7 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	4619      	mov	r1, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	b28b      	uxth	r3, r1
 8000990:	4313      	orrs	r3, r2
 8000992:	b29a      	uxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) << 1;
 8000998:	2104      	movs	r1, #4
 800099a:	485a      	ldr	r0, [pc, #360]	; (8000b04 <poll_buttons+0x194>)
 800099c:	f000 fdaa 	bl	80014f4 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	0059      	lsls	r1, r3, #1
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	b20b      	sxth	r3, r1
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) << 2;
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	4853      	ldr	r0, [pc, #332]	; (8000b08 <poll_buttons+0x198>)
 80009ba:	f000 fd9b 	bl	80014f4 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	0099      	lsls	r1, r3, #2
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	b20b      	sxth	r3, r1
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) << 3;
 80009d4:	2110      	movs	r1, #16
 80009d6:	484b      	ldr	r0, [pc, #300]	; (8000b04 <poll_buttons+0x194>)
 80009d8:	f000 fd8c 	bl	80014f4 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	00d9      	lsls	r1, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	b20b      	sxth	r3, r1
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin) << 4;
 80009f2:	2120      	movs	r1, #32
 80009f4:	4843      	ldr	r0, [pc, #268]	; (8000b04 <poll_buttons+0x194>)
 80009f6:	f000 fd7d 	bl	80014f4 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	0119      	lsls	r1, r3, #4
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	b20b      	sxth	r3, r1
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin) << 5;
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	483c      	ldr	r0, [pc, #240]	; (8000b04 <poll_buttons+0x194>)
 8000a14:	f000 fd6e 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	0159      	lsls	r1, r3, #5
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	b20b      	sxth	r3, r1
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin) << 6;
 8000a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a32:	4834      	ldr	r0, [pc, #208]	; (8000b04 <poll_buttons+0x194>)
 8000a34:	f000 fd5e 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	0199      	lsls	r1, r3, #6
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	b20b      	sxth	r3, r1
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin) << 7;
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	482c      	ldr	r0, [pc, #176]	; (8000b04 <poll_buttons+0x194>)
 8000a54:	f000 fd4e 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	01d9      	lsls	r1, r3, #7
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	b20b      	sxth	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin) << 8;
 8000a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <poll_buttons+0x194>)
 8000a74:	f000 fd3e 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	0219      	lsls	r1, r3, #8
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	b20b      	sxth	r3, r1
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin) << 9;
 8000a8e:	2102      	movs	r1, #2
 8000a90:	481e      	ldr	r0, [pc, #120]	; (8000b0c <poll_buttons+0x19c>)
 8000a92:	f000 fd2f 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	0259      	lsls	r1, r3, #9
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	b20b      	sxth	r3, r1
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON11_GPIO_Port, BUTTON11_Pin) << 10;
 8000aac:	2104      	movs	r1, #4
 8000aae:	4817      	ldr	r0, [pc, #92]	; (8000b0c <poll_buttons+0x19c>)
 8000ab0:	f000 fd20 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	0299      	lsls	r1, r3, #10
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	b20b      	sxth	r3, r1
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON12_GPIO_Port, BUTTON12_Pin) << 11;
 8000aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <poll_buttons+0x198>)
 8000ad0:	f000 fd10 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	02d9      	lsls	r1, r3, #11
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	b20b      	sxth	r3, r1
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	801a      	strh	r2, [r3, #0]
	*p_button_state ^= 0x0FFF;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	f483 637f 	eor.w	r3, r3, #4080	; 0xff0
 8000af2:	f083 030f 	eor.w	r3, r3, #15
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	801a      	strh	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 faec 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_I2C_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000baa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <HAL_I2C_MspInit+0x8c>)
 8000bc8:	f000 faf8 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400

08000bfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <HAL_I2S_MspInit+0xf0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d15a      	bne.n	8000ce2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f83b 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c48:	f7ff ff62 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_I2S_MspInit+0xf8>)
 8000cbc:	f000 fa7e 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_I2S_MspInit+0xfc>)
 8000cde:	f000 fa6d 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40003c00 	.word	0x40003c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020800 	.word	0x40020800

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_SPI_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12b      	bne.n	8000d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d56:	23e0      	movs	r3, #224	; 0xe0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x8c>)
 8000d72:	f000 fa23 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f89a 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <OTG_FS_IRQHandler+0x10>)
 8000de6:	f001 faeb 	bl	80023c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000790 	.word	0x20000790

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f006 fbf1 	bl	800762c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb39 	bl	80004c0 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000e5c:	0800770c 	.word	0x0800770c
  ldr r2, =_sbss
 8000e60:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000e64:	20000b98 	.word	0x20000b98

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f94f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe3c 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f967 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f92f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200002bc 	.word	0x200002bc

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200002bc 	.word	0x200002bc

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e16b      	b.n	80014b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 815a 	bne.w	80014aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80b4 	beq.w	80014aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <HAL_GPIO_Init+0x310>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	; (80014dc <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_GPIO_Init+0x324>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20a>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00e      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013c6:	2308      	movs	r3, #8
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x310>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae90 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40021c00 	.word	0x40021c00
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e12b      	b.n	80017c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff faf4 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015bc:	f002 fb68 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a81      	ldr	r2, [pc, #516]	; (80017cc <HAL_I2C_Init+0x274>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d807      	bhi.n	80015dc <HAL_I2C_Init+0x84>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a80      	ldr	r2, [pc, #512]	; (80017d0 <HAL_I2C_Init+0x278>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf94      	ite	ls
 80015d4:	2301      	movls	r3, #1
 80015d6:	2300      	movhi	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e006      	b.n	80015ea <HAL_I2C_Init+0x92>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4a7d      	ldr	r2, [pc, #500]	; (80017d4 <HAL_I2C_Init+0x27c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bf94      	ite	ls
 80015e4:	2301      	movls	r3, #1
 80015e6:	2300      	movhi	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0e7      	b.n	80017c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a78      	ldr	r2, [pc, #480]	; (80017d8 <HAL_I2C_Init+0x280>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9b      	lsrs	r3, r3, #18
 80015fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_I2C_Init+0x274>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d802      	bhi.n	800162c <HAL_I2C_Init+0xd4>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3301      	adds	r3, #1
 800162a:	e009      	b.n	8001640 <HAL_I2C_Init+0xe8>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a69      	ldr	r2, [pc, #420]	; (80017dc <HAL_I2C_Init+0x284>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	3301      	adds	r3, #1
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	430b      	orrs	r3, r1
 8001646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	495c      	ldr	r1, [pc, #368]	; (80017cc <HAL_I2C_Init+0x274>)
 800165c:	428b      	cmp	r3, r1
 800165e:	d819      	bhi.n	8001694 <HAL_I2C_Init+0x13c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e59      	subs	r1, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fbb1 f3f3 	udiv	r3, r1, r3
 800166e:	1c59      	adds	r1, r3, #1
 8001670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001674:	400b      	ands	r3, r1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <HAL_I2C_Init+0x138>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e59      	subs	r1, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fbb1 f3f3 	udiv	r3, r1, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	e051      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001690:	2304      	movs	r3, #4
 8001692:	e04f      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_I2C_Init+0x168>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	e012      	b.n	80016e6 <HAL_I2C_Init+0x18e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e58      	subs	r0, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	0099      	lsls	r1, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Init+0x196>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e022      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10e      	bne.n	8001714 <HAL_I2C_Init+0x1bc>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e58      	subs	r0, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	440b      	add	r3, r1
 8001704:	fbb0 f3f3 	udiv	r3, r0, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001712:	e00f      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1e58      	subs	r0, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	0099      	lsls	r1, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	fbb0 f3f3 	udiv	r3, r0, r3
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	6809      	ldr	r1, [r1, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6911      	ldr	r1, [r2, #16]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68d2      	ldr	r2, [r2, #12]
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	000186a0 	.word	0x000186a0
 80017d0:	001e847f 	.word	0x001e847f
 80017d4:	003d08ff 	.word	0x003d08ff
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	10624dd3 	.word	0x10624dd3

080017e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e128      	b.n	8001a44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <HAL_I2S_Init+0x26c>)
 800180a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff f9f5 	bl	8000bfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001828:	f023 030f 	bic.w	r3, r3, #15
 800182c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d060      	beq.n	8001900 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001846:	2310      	movs	r3, #16
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e001      	b.n	8001850 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800184c:	2320      	movs	r3, #32
 800184e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b20      	cmp	r3, #32
 8001856:	d802      	bhi.n	800185e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800185e:	2001      	movs	r0, #1
 8001860:	f002 fb0c 	bl	8003e7c <HAL_RCCEx_GetPeriphCLKFreq>
 8001864:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186e:	d125      	bne.n	80018bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d010      	beq.n	800189a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	3305      	adds	r3, #5
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e01f      	b.n	80018da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	3305      	adds	r3, #5
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e00e      	b.n	80018da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	3305      	adds	r3, #5
 80018d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	; (8001a50 <HAL_I2S_Init+0x270>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e003      	b.n	8001908 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001900:	2302      	movs	r3, #2
 8001902:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d902      	bls.n	8001914 <HAL_I2S_Init+0x134>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d907      	bls.n	8001924 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0210 	orr.w	r2, r3, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e08f      	b.n	8001a44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	ea42 0103 	orr.w	r1, r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	430a      	orrs	r2, r1
 8001936:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001942:	f023 030f 	bic.w	r3, r3, #15
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6851      	ldr	r1, [r2, #4]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6892      	ldr	r2, [r2, #8]
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68d2      	ldr	r2, [r2, #12]
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6992      	ldr	r2, [r2, #24]
 800195a:	430a      	orrs	r2, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001966:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d161      	bne.n	8001a34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_I2S_Init+0x274>)
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a37      	ldr	r2, [pc, #220]	; (8001a58 <HAL_I2S_Init+0x278>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_I2S_Init+0x1a4>
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_I2S_Init+0x27c>)
 8001982:	e001      	b.n	8001988 <HAL_I2S_Init+0x1a8>
 8001984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4932      	ldr	r1, [pc, #200]	; (8001a58 <HAL_I2S_Init+0x278>)
 8001990:	428a      	cmp	r2, r1
 8001992:	d101      	bne.n	8001998 <HAL_I2S_Init+0x1b8>
 8001994:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_I2S_Init+0x27c>)
 8001996:	e001      	b.n	800199c <HAL_I2S_Init+0x1bc>
 8001998:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800199c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_I2S_Init+0x278>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_I2S_Init+0x1d4>
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_I2S_Init+0x27c>)
 80019b2:	e001      	b.n	80019b8 <HAL_I2S_Init+0x1d8>
 80019b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019b8:	2202      	movs	r2, #2
 80019ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_I2S_Init+0x278>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_I2S_Init+0x1ea>
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_I2S_Init+0x27c>)
 80019c8:	e001      	b.n	80019ce <HAL_I2S_Init+0x1ee>
 80019ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019da:	d003      	beq.n	80019e4 <HAL_I2S_Init+0x204>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d103      	bne.n	80019ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e001      	b.n	80019f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_I2S_Init+0x278>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_I2S_Init+0x24c>
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_I2S_Init+0x27c>)
 8001a2a:	e001      	b.n	8001a30 <HAL_I2S_Init+0x250>
 8001a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a30:	897a      	ldrh	r2, [r7, #10]
 8001a32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	08001b57 	.word	0x08001b57
 8001a50:	cccccccd 	.word	0xcccccccd
 8001a54:	08001c6d 	.word	0x08001c6d
 8001a58:	40003800 	.word	0x40003800
 8001a5c:	40003400 	.word	0x40003400

08001a60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	1c9a      	adds	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ae0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb8 	bl	8001a60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	1c9a      	adds	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10e      	bne.n	8001b4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff93 	bl	8001a74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d13a      	bne.n	8001be8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d109      	bne.n	8001b90 <I2S_IRQHandler+0x3a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d102      	bne.n	8001b90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffb4 	bl	8001af8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	d126      	bne.n	8001be8 <I2S_IRQHandler+0x92>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d11f      	bne.n	8001be8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff50 	bl	8001a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d136      	bne.n	8001c62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d109      	bne.n	8001c12 <I2S_IRQHandler+0xbc>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b80      	cmp	r3, #128	; 0x80
 8001c0a:	d102      	bne.n	8001c12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff45 	bl	8001a9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d122      	bne.n	8001c62 <I2S_IRQHandler+0x10c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d11b      	bne.n	8001c62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff13 	bl	8001a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4aa2      	ldr	r2, [pc, #648]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c86:	4ba2      	ldr	r3, [pc, #648]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c88:	e001      	b.n	8001c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ca6:	e001      	b.n	8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb8:	d004      	beq.n	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f040 8099 	bne.w	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f925 	bl	8001f28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f9c8 	bl	8002088 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d13a      	bne.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d035      	beq.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001d16:	4b7e      	ldr	r3, [pc, #504]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d18:	e001      	b.n	8001d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4979      	ldr	r1, [pc, #484]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d101      	bne.n	8001d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d2a:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d2c:	e001      	b.n	8001d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f043 0202 	orr.w	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe88 	bl	8001a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	f040 80be 	bne.w	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80b8 	beq.w	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a59      	ldr	r2, [pc, #356]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dac:	e001      	b.n	8001db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4954      	ldr	r1, [pc, #336]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dba:	428b      	cmp	r3, r1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dc0:	e001      	b.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f043 0204 	orr.w	r2, r3, #4
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fe4a 	bl	8001a88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001df4:	e084      	b.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d107      	bne.n	8001e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8be 	bl	8001f8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8fd 	bl	8002024 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d12f      	bne.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02a      	beq.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e5a:	e001      	b.n	8001e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4929      	ldr	r1, [pc, #164]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e6e:	e001      	b.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fdfa 	bl	8001a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d131      	bne.n	8001f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02c      	beq.n	8001f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eb4:	e001      	b.n	8001eba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4912      	ldr	r1, [pc, #72]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ec2:	428b      	cmp	r3, r1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ec8:	e001      	b.n	8001ece <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ee2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fdc5 	bl	8001a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001efe:	e000      	b.n	8001f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f00:	bf00      	nop
}
 8001f02:	bf00      	nop
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40003800 	.word	0x40003800
 8001f10:	40003400 	.word	0x40003400

08001f14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c99      	adds	r1, r3, #2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6251      	str	r1, [r2, #36]	; 0x24
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d113      	bne.n	8001f82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffc9 	bl	8001f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c99      	adds	r1, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f9e:	8819      	ldrh	r1, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <I2SEx_TxISR_I2SExt+0x90>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <I2SEx_TxISR_I2SExt+0x22>
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <I2SEx_TxISR_I2SExt+0x94>)
 8001fac:	e001      	b.n	8001fb2 <I2SEx_TxISR_I2SExt+0x26>
 8001fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d121      	bne.n	8002012 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <I2SEx_TxISR_I2SExt+0x90>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <I2SEx_TxISR_I2SExt+0x50>
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <I2SEx_TxISR_I2SExt+0x94>)
 8001fda:	e001      	b.n	8001fe0 <I2SEx_TxISR_I2SExt+0x54>
 8001fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <I2SEx_TxISR_I2SExt+0x90>)
 8001fe8:	428b      	cmp	r3, r1
 8001fea:	d101      	bne.n	8001ff0 <I2SEx_TxISR_I2SExt+0x64>
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <I2SEx_TxISR_I2SExt+0x94>)
 8001fee:	e001      	b.n	8001ff4 <I2SEx_TxISR_I2SExt+0x68>
 8001ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff81 	bl	8001f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40003800 	.word	0x40003800
 8002020:	40003400 	.word	0x40003400

08002024 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68d8      	ldr	r0, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	1c99      	adds	r1, r3, #2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800203c:	b282      	uxth	r2, r0
 800203e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d113      	bne.n	8002080 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002066:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ff4a 	bl	8001f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <I2SEx_RxISR_I2SExt+0x90>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <I2SEx_RxISR_I2SExt+0x16>
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <I2SEx_RxISR_I2SExt+0x94>)
 800209c:	e001      	b.n	80020a2 <I2SEx_RxISR_I2SExt+0x1a>
 800209e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a2:	68d8      	ldr	r0, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	1c99      	adds	r1, r3, #2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020ae:	b282      	uxth	r2, r0
 80020b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d121      	bne.n	800210e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <I2SEx_RxISR_I2SExt+0x90>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <I2SEx_RxISR_I2SExt+0x50>
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <I2SEx_RxISR_I2SExt+0x94>)
 80020d6:	e001      	b.n	80020dc <I2SEx_RxISR_I2SExt+0x54>
 80020d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	490d      	ldr	r1, [pc, #52]	; (8002118 <I2SEx_RxISR_I2SExt+0x90>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d101      	bne.n	80020ec <I2SEx_RxISR_I2SExt+0x64>
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <I2SEx_RxISR_I2SExt+0x94>)
 80020ea:	e001      	b.n	80020f0 <I2SEx_RxISR_I2SExt+0x68>
 80020ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff03 	bl	8001f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40003800 	.word	0x40003800
 800211c:	40003400 	.word	0x40003400

08002120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	b08f      	sub	sp, #60	; 0x3c
 8002124:	af0a      	add	r7, sp, #40	; 0x28
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e10f      	b.n	8002352 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f004 ff4d 	bl	8006fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f002 f87e 	bl	8004272 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	687e      	ldr	r6, [r7, #4]
 800217e:	466d      	mov	r5, sp
 8002180:	f106 0410 	add.w	r4, r6, #16
 8002184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002190:	e885 0003 	stmia.w	r5, {r0, r1}
 8002194:	1d33      	adds	r3, r6, #4
 8002196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f001 ff56 	bl	800404a <USB_CoreInit>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d0      	b.n	8002352 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 f86c 	bl	8004294 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e04a      	b.n	8002258 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	333d      	adds	r3, #61	; 0x3d
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	333c      	adds	r3, #60	; 0x3c
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	b298      	uxth	r0, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3342      	adds	r3, #66	; 0x42
 80021fe:	4602      	mov	r2, r0
 8002200:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3344      	adds	r3, #68	; 0x44
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3348      	adds	r3, #72	; 0x48
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3350      	adds	r3, #80	; 0x50
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	3301      	adds	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3af      	bcc.n	80021c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e044      	b.n	80022f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	3301      	adds	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3b5      	bcc.n	8002268 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	687e      	ldr	r6, [r7, #4]
 8002304:	466d      	mov	r5, sp
 8002306:	f106 0410 	add.w	r4, r6, #16
 800230a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002312:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002316:	e885 0003 	stmia.w	r5, {r0, r1}
 800231a:	1d33      	adds	r3, r6, #4
 800231c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f002 f804 	bl	800432c <USB_DevInit>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00d      	b.n	8002352 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f880 	bl	8005450 <USB_DevDisconnect>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800235a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_Start+0x1c>
 8002372:	2302      	movs	r3, #2
 8002374:	e020      	b.n	80023b8 <HAL_PCD_Start+0x5e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	2b01      	cmp	r3, #1
 8002384:	d109      	bne.n	800239a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 ff56 	bl	8004250 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 f830 	bl	800540e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b08d      	sub	sp, #52	; 0x34
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 f8ee 	bl	80055b8 <USB_GetMode>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 839d 	bne.w	8002b1e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f852 	bl	8005492 <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8393 	beq.w	8002b1c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f849 	bl	8005492 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 0202 	and.w	r2, r2, #2
 8002418:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 f837 	bl	8005492 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b10      	cmp	r3, #16
 800242c:	d161      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0210 	bic.w	r2, r2, #16
 800243c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 020f 	and.w	r2, r3, #15
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	0c5b      	lsrs	r3, r3, #17
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	2b02      	cmp	r3, #2
 8002468:	d124      	bne.n	80024b4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d035      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6a38      	ldr	r0, [r7, #32]
 800248a:	f002 fe6e 	bl	800516a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800249a:	441a      	add	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ac:	441a      	add	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	e016      	b.n	80024e2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d110      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c6:	2208      	movs	r2, #8
 80024c8:	4619      	mov	r1, r3
 80024ca:	6a38      	ldr	r0, [r7, #32]
 80024cc:	f002 fe4d 	bl	800516a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024dc:	441a      	add	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0210 	orr.w	r2, r2, #16
 80024f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 ffcb 	bl	8005492 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002502:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002506:	d16e      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f002 ffd1 	bl	80054b8 <USB_ReadDevAllOutEpInterrupt>
 8002516:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002518:	e062      	b.n	80025e0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d057      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fff6 	bl	8005520 <USB_ReadDevOutEPInterrupt>
 8002534:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254c:	461a      	mov	r2, r3
 800254e:	2301      	movs	r3, #1
 8002550:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fd99 	bl	800308c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00c      	beq.n	800257e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002570:	461a      	mov	r2, r3
 8002572:	2308      	movs	r3, #8
 8002574:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fe93 	bl	80032a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	2310      	movs	r3, #16
 8002598:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b0:	461a      	mov	r2, r3
 80025b2:	2320      	movs	r3, #32
 80025b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	3301      	adds	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d199      	bne.n	800251a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 ff51 	bl	8005492 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025fa:	f040 80c0 	bne.w	800277e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff72 	bl	80054ec <USB_ReadDevAllInEpInterrupt>
 8002608:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800260e:	e0b2      	b.n	8002776 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a7 	beq.w	800276a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f002 ff98 	bl	800555c <USB_ReadDevInEPInterrupt>
 800262c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d057      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	69f9      	ldr	r1, [r7, #28]
 8002654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002658:	4013      	ands	r3, r2
 800265a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d132      	bne.n	80026dc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3348      	adds	r3, #72	; 0x48
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4403      	add	r3, r0
 8002696:	3344      	adds	r3, #68	; 0x44
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4419      	add	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4403      	add	r3, r0
 80026aa:	3348      	adds	r3, #72	; 0x48
 80026ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d113      	bne.n	80026dc <HAL_PCD_IRQHandler+0x31c>
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3350      	adds	r3, #80	; 0x50
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026d4:	461a      	mov	r2, r3
 80026d6:	2101      	movs	r1, #1
 80026d8:	f002 ffa0 	bl	800561c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f004 fd21 	bl	800712a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fe:	461a      	mov	r2, r3
 8002700:	2308      	movs	r3, #8
 8002702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271a:	461a      	mov	r2, r3
 800271c:	2310      	movs	r3, #16
 800271e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002736:	461a      	mov	r2, r3
 8002738:	2340      	movs	r3, #64	; 0x40
 800273a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002752:	461a      	mov	r2, r3
 8002754:	2302      	movs	r3, #2
 8002756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fc03 	bl	8002f70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f af49 	bne.w	8002610 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 fe85 	bl	8005492 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800278e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002792:	d122      	bne.n	80027da <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027ba:	2100      	movs	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fe0f 	bl	80033e0 <HAL_PCDEx_LPM_Callback>
 80027c2:	e002      	b.n	80027ca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f004 fd27 	bl	8007218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fe57 	bl	8005492 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ee:	d112      	bne.n	8002816 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f004 fce3 	bl	80071cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002814:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fe39 	bl	8005492 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	f040 80c7 	bne.w	80029bc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2110      	movs	r1, #16
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fed3 	bl	80045f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	e056      	b.n	8002902 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002860:	461a      	mov	r2, r3
 8002862:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002866:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	440a      	add	r2, r1
 800287e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002886:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	440a      	add	r2, r1
 800289e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b4:	461a      	mov	r2, r3
 80028b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ec:	0151      	lsls	r1, r2, #5
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	440a      	add	r2, r1
 80028f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	3301      	adds	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002908:	429a      	cmp	r2, r3
 800290a:	d3a3      	bcc.n	8002854 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800291e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b00      	cmp	r3, #0
 8002926:	d016      	beq.n	8002956 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002938:	f043 030b 	orr.w	r3, r3, #11
 800293c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f043 030b 	orr.w	r3, r3, #11
 8002952:	6453      	str	r3, [r2, #68]	; 0x44
 8002954:	e015      	b.n	8002982 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002964:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002968:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800296c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297c:	f043 030b 	orr.w	r3, r3, #11
 8002980:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002990:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002994:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a6:	461a      	mov	r2, r3
 80029a8:	f002 fe38 	bl	800561c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fd66 	bl	8005492 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d0:	d124      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fdfc 	bl	80055d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fe64 	bl	80046ae <USB_GetDevSpeed>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681c      	ldr	r4, [r3, #0]
 80029f2:	f001 f941 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 80029f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	4620      	mov	r0, r4
 8002a02:	f001 fb83 	bl	800410c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f004 fbb7 	bl	800717a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fd36 	bl	8005492 <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d10a      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f004 fb94 	bl	800715e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 0208 	and.w	r2, r2, #8
 8002a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fd21 	bl	8005492 <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5a:	d10f      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f004 fbf6 	bl	8007258 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fd06 	bl	8005492 <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a90:	d10f      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fbc9 	bl	8007234 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fceb 	bl	8005492 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d10a      	bne.n	8002ade <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 fbd7 	bl	800727c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fcd5 	bl	8005492 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d115      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f004 fbc7 	bl	8007298 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e000      	b.n	8002b1e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3734      	adds	r7, #52	; 0x34
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_SetAddress+0x1a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e013      	b.n	8002b66 <HAL_PCD_SetAddress+0x42>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fc33 	bl	80053c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	70fb      	strb	r3, [r7, #3]
 8002b80:	460b      	mov	r3, r1
 8002b82:	803b      	strh	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da0f      	bge.n	8002bb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	705a      	strb	r2, [r3, #1]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be0:	883a      	ldrh	r2, [r7, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	78ba      	ldrb	r2, [r7, #2]
 8002bea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bfe:	78bb      	ldrb	r3, [r7, #2]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_EP_Open+0xaa>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e00e      	b.n	8002c36 <HAL_PCD_EP_Open+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fd66 	bl	80046f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0f      	bge.n	8002c72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	e00f      	b.n	8002c92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_Close+0x6e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e00e      	b.n	8002cca <HAL_PCD_EP_Close+0x8c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fda4 	bl	8004808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	f002 f87f 	bl	8004e48 <USB_EP0StartXfer>
 8002d4a:	e008      	b.n	8002d5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	f001 fe31 	bl	80049c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2201      	movs	r2, #1
 8002da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da8:	7afb      	ldrb	r3, [r7, #11]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	f002 f835 	bl	8004e48 <USB_EP0StartXfer>
 8002dde:	e008      	b.n	8002df2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	f001 fde7 	bl	80049c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d901      	bls.n	8002e1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e050      	b.n	8002ebc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da0f      	bge.n	8002e42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3338      	adds	r3, #56	; 0x38
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
 8002e40:	e00d      	b.n	8002e5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_PCD_EP_SetStall+0x82>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e01e      	b.n	8002ebc <HAL_PCD_EP_SetStall+0xc0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 f9c4 	bl	800521a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	b2d9      	uxtb	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	f002 fbb5 	bl	800561c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d901      	bls.n	8002ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e042      	b.n	8002f68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	da0f      	bge.n	8002f0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	3338      	adds	r3, #56	; 0x38
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	705a      	strb	r2, [r3, #1]
 8002f08:	e00f      	b.n	8002f2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_EP_ClrStall+0x86>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e00e      	b.n	8002f68 <HAL_PCD_EP_ClrStall+0xa4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 f9cc 	bl	80052f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	3338      	adds	r3, #56	; 0x38
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	3304      	adds	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d901      	bls.n	8002fa8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e06c      	b.n	8003082 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d902      	bls.n	8002fc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3303      	adds	r3, #3
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fcc:	e02b      	b.n	8003026 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3303      	adds	r3, #3
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003002:	b2db      	uxtb	r3, r3
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4603      	mov	r3, r0
 8003008:	6978      	ldr	r0, [r7, #20]
 800300a:	f002 f870 	bl	80050ee <USB_WritePacket>

    ep->xfer_buff  += len;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	441a      	add	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	b29b      	uxth	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	429a      	cmp	r2, r3
 800303a:	d809      	bhi.n	8003050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003044:	429a      	cmp	r2, r3
 8003046:	d203      	bcs.n	8003050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1be      	bne.n	8002fce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d811      	bhi.n	8003080 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	2201      	movs	r2, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	43db      	mvns	r3, r3
 8003076:	6939      	ldr	r1, [r7, #16]
 8003078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800307c:	4013      	ands	r3, r2
 800307e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	333c      	adds	r3, #60	; 0x3c
 80030a4:	3304      	adds	r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	f040 80a0 	bne.w	8003204 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a72      	ldr	r2, [pc, #456]	; (800329c <PCD_EP_OutXfrComplete_int+0x210>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f240 80dd 	bls.w	8003292 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80d7 	beq.w	8003292 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	461a      	mov	r2, r3
 80030f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f6:	6093      	str	r3, [r2, #8]
 80030f8:	e0cb      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	2320      	movs	r3, #32
 8003114:	6093      	str	r3, [r2, #8]
 8003116:	e0bc      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80b7 	bne.w	8003292 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a5d      	ldr	r2, [pc, #372]	; (800329c <PCD_EP_OutXfrComplete_int+0x210>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d90f      	bls.n	800314c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003148:	6093      	str	r3, [r2, #8]
 800314a:	e0a2      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800315e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	440b      	add	r3, r1
 8003168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003172:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003186:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4419      	add	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4403      	add	r3, r0
 80031c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d114      	bne.n	80031f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ee:	461a      	mov	r2, r3
 80031f0:	2101      	movs	r1, #1
 80031f2:	f002 fa13 	bl	800561c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f003 ff79 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
 8003202:	e046      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d124      	bne.n	8003256 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	e032      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	2320      	movs	r3, #32
 8003246:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f003 ff50 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
 8003254:	e01d      	b.n	8003292 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x1fa>
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800327e:	461a      	mov	r2, r3
 8003280:	2100      	movs	r1, #0
 8003282:	f002 f9cb 	bl	800561c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f003 ff31 	bl	80070f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	4f54300a 	.word	0x4f54300a
 80032a0:	4f54310a 	.word	0x4f54310a

080032a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	333c      	adds	r3, #60	; 0x3c
 80032bc:	3304      	adds	r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <PCD_EP_OutSetupPacket_int+0x88>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d90e      	bls.n	80032f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f003 fee9 	bl	80070d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <PCD_EP_OutSetupPacket_int+0x88>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d90c      	bls.n	8003320 <PCD_EP_OutSetupPacket_int+0x7c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003318:	461a      	mov	r2, r3
 800331a:	2101      	movs	r1, #1
 800331c:	f002 f97e 	bl	800561c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	4f54300a 	.word	0x4f54300a

08003330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
 800333c:	4613      	mov	r3, r2
 800333e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800334e:	883b      	ldrh	r3, [r7, #0]
 8003350:	0419      	lsls	r1, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	430a      	orrs	r2, r1
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
 800335c:	e028      	b.n	80033b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4413      	add	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e00d      	b.n	800338e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	3340      	adds	r3, #64	; 0x40
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4413      	add	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3301      	adds	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	3b01      	subs	r3, #1
 8003394:	429a      	cmp	r2, r3
 8003396:	d3ec      	bcc.n	8003372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003398:	883b      	ldrh	r3, [r7, #0]
 800339a:	0418      	lsls	r0, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4302      	orrs	r2, r0
 80033a8:	3340      	adds	r3, #64	; 0x40
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e264      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d075      	beq.n	8003502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	4ba3      	ldr	r3, [pc, #652]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b9d      	ldr	r3, [pc, #628]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b99      	ldr	r3, [pc, #612]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e23f      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x74>
 800345e:	4b91      	ldr	r3, [pc, #580]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a90      	ldr	r2, [pc, #576]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a8a      	ldr	r2, [pc, #552]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a87      	ldr	r2, [pc, #540]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 8003490:	4b84      	ldr	r3, [pc, #528]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a83      	ldr	r2, [pc, #524]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a80      	ldr	r2, [pc, #512]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fd42 	bl	8000f38 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd fd3e 	bl	8000f38 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e204      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fd2e 	bl	8000f38 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd fd2a 	bl	8000f38 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1f0      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b62      	ldr	r3, [pc, #392]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c4      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4952      	ldr	r1, [pc, #328]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCC_OscConfig+0x2b0>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd fce3 	bl	8000f38 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7fd fcdf 	bl	8000f38 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a5      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4940      	ldr	r1, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x2b0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd fcc2 	bl	8000f38 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fd fcbe 	bl	8000f38 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e184      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d030      	beq.n	8003644 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x2b4>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd fca2 	bl	8000f38 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fd fc9e 	bl	8000f38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e164      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x200>
 8003616:	e015      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_OscConfig+0x2b4>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fd fc8b 	bl	8000f38 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003626:	f7fd fc87 	bl	8000f38 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e14d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a0 	beq.w	8003792 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d121      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fd fc4d 	bl	8000f38 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	e011      	b.n	80036c6 <HAL_RCC_OscConfig+0x2ce>
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	42470000 	.word	0x42470000
 80036ac:	42470e80 	.word	0x42470e80
 80036b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b4:	f7fd fc40 	bl	8000f38 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e106      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_RCC_OscConfig+0x4e4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a80      	ldr	r2, [pc, #512]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x32a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x312>
 80036f0:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x32a>
 800370a:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a74      	ldr	r2, [pc, #464]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fc05 	bl	8000f38 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fd fc01 	bl	8000f38 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0c5      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x33a>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fd fbef 	bl	8000f38 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fd fbeb 	bl	8000f38 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0af      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a55      	ldr	r2, [pc, #340]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 809b 	beq.w	80038d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d05c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d141      	bne.n	8003834 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd fbbf 	bl	8000f38 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fbbb 	bl	8000f38 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e081      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	019b      	lsls	r3, r3, #6
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	4937      	ldr	r1, [pc, #220]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fb94 	bl	8000f38 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fb90 	bl	8000f38 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e056      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x41c>
 8003832:	e04e      	b.n	80038d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fb7d 	bl	8000f38 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fb79 	bl	8000f38 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e03f      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x44a>
 8003860:	e037      	b.n	80038d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e032      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d028      	beq.n	80038ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d121      	bne.n	80038ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d11a      	bne.n	80038ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40007000 	.word	0x40007000
 80038e0:	40023800 	.word	0x40023800
 80038e4:	42470060 	.word	0x42470060

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0cc      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d90c      	bls.n	8003924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d044      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b3f      	ldr	r3, [pc, #252]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e067      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4934      	ldr	r1, [pc, #208]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fd faae 	bl	8000f38 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fd faaa 	bl	8000f38 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d20c      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd fa0e 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	080076e4 	.word	0x080076e4
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	20000004 	.word	0x20000004

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f200 80bd 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae6:	e0b7      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aea:	60bb      	str	r3, [r7, #8]
       break;
 8003aec:	e0b7      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003af0:	60bb      	str	r3, [r7, #8]
      break;
 8003af2:	e0b4      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af4:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04d      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	461a      	mov	r2, r3
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	ea02 0800 	and.w	r8, r2, r0
 8003b22:	ea03 0901 	and.w	r9, r3, r1
 8003b26:	4640      	mov	r0, r8
 8003b28:	4649      	mov	r1, r9
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	014b      	lsls	r3, r1, #5
 8003b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b38:	0142      	lsls	r2, r0, #5
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	ebb0 0008 	subs.w	r0, r0, r8
 8003b42:	eb61 0109 	sbc.w	r1, r1, r9
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	018b      	lsls	r3, r1, #6
 8003b50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b54:	0182      	lsls	r2, r0, #6
 8003b56:	1a12      	subs	r2, r2, r0
 8003b58:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	00d9      	lsls	r1, r3, #3
 8003b66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b6a:	00d0      	lsls	r0, r2, #3
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	eb12 0208 	adds.w	r2, r2, r8
 8003b74:	eb43 0309 	adc.w	r3, r3, r9
 8003b78:	f04f 0000 	mov.w	r0, #0
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	0259      	lsls	r1, r3, #9
 8003b82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b86:	0250      	lsls	r0, r2, #9
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	f7fc fb16 	bl	80001c8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e04a      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	461a      	mov	r2, r3
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	ea02 0400 	and.w	r4, r2, r0
 8003bbe:	ea03 0501 	and.w	r5, r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	014b      	lsls	r3, r1, #5
 8003bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bd4:	0142      	lsls	r2, r0, #5
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	1b00      	subs	r0, r0, r4
 8003bdc:	eb61 0105 	sbc.w	r1, r1, r5
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	018b      	lsls	r3, r1, #6
 8003bea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bee:	0182      	lsls	r2, r0, #6
 8003bf0:	1a12      	subs	r2, r2, r0
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	f04f 0000 	mov.w	r0, #0
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	00d9      	lsls	r1, r3, #3
 8003c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c04:	00d0      	lsls	r0, r2, #3
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	1912      	adds	r2, r2, r4
 8003c0c:	eb45 0303 	adc.w	r3, r5, r3
 8003c10:	f04f 0000 	mov.w	r0, #0
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	0299      	lsls	r1, r3, #10
 8003c1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c1e:	0290      	lsls	r0, r2, #10
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f7fc faca 	bl	80001c8 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	60bb      	str	r3, [r7, #8]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c5a:	60bb      	str	r3, [r7, #8]
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	007a1200 	.word	0x007a1200

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	080076f4 	.word	0x080076f4

08003cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d035      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ce0:	4b62      	ldr	r3, [pc, #392]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce6:	f7fd f927 	bl	8000f38 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cee:	f7fd f923 	bl	8000f38 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0b0      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	019a      	lsls	r2, r3, #6
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	071b      	lsls	r3, r3, #28
 8003d18:	4955      	ldr	r1, [pc, #340]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d20:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fd f907 	bl	8000f38 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d2e:	f7fd f903 	bl	8000f38 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e090      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d40:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8083 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a43      	ldr	r2, [pc, #268]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d82:	f7fd f8d9 	bl	8000f38 <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd f8d5 	bl	8000f38 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e062      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd6:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d114      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fd f8a3 	bl	8000f38 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd f89f 	bl	8000f38 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e02a      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3a:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5a:	4905      	ldr	r1, [pc, #20]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	42470068 	.word	0x42470068
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40007000 	.word	0x40007000
 8003e78:	42470e40 	.word	0x42470e40

08003e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d13e      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12f      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eb2:	617b      	str	r3, [r7, #20]
          break;
 8003eb4:	e02f      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec2:	d108      	bne.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e007      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ede:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	0f1b      	lsrs	r3, r3, #28
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]
          break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
          break;
 8003f14:	bf00      	nop
        }
      }
      break;
 8003f16:	bf00      	nop
    }
  }
  return frequency;
 8003f18:	697b      	ldr	r3, [r7, #20]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	00bb8000 	.word	0x00bb8000
 8003f30:	007a1200 	.word	0x007a1200
 8003f34:	00f42400 	.word	0x00f42400

08003f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07b      	b.n	8004042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5a:	d009      	beq.n	8003f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc feb6 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0104 	and.w	r1, r3, #4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0210 	and.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800404a:	b084      	sub	sp, #16
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	f107 001c 	add.w	r0, r7, #28
 8004058:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2b01      	cmp	r3, #1
 8004060:	d122      	bne.n	80040a8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 fb1b 	bl	80056d8 <USB_CoreReset>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	e01a      	b.n	80040de <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f001 fb0f 	bl	80056d8 <USB_CoreReset>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
 80040d0:	e005      	b.n	80040de <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10b      	bne.n	80040fc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f043 0206 	orr.w	r2, r3, #6
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr

0800410c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d165      	bne.n	80041ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a41      	ldr	r2, [pc, #260]	; (8004228 <USB_SetTurnaroundTime+0x11c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d906      	bls.n	8004136 <USB_SetTurnaroundTime+0x2a>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a40      	ldr	r2, [pc, #256]	; (800422c <USB_SetTurnaroundTime+0x120>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d202      	bcs.n	8004136 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004130:	230f      	movs	r3, #15
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e062      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <USB_SetTurnaroundTime+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d306      	bcc.n	800414c <USB_SetTurnaroundTime+0x40>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <USB_SetTurnaroundTime+0x124>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d202      	bcs.n	800414c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004146:	230e      	movs	r3, #14
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e057      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a38      	ldr	r2, [pc, #224]	; (8004230 <USB_SetTurnaroundTime+0x124>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d306      	bcc.n	8004162 <USB_SetTurnaroundTime+0x56>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a37      	ldr	r2, [pc, #220]	; (8004234 <USB_SetTurnaroundTime+0x128>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d202      	bcs.n	8004162 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800415c:	230d      	movs	r3, #13
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e04c      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a33      	ldr	r2, [pc, #204]	; (8004234 <USB_SetTurnaroundTime+0x128>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d306      	bcc.n	8004178 <USB_SetTurnaroundTime+0x6c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a32      	ldr	r2, [pc, #200]	; (8004238 <USB_SetTurnaroundTime+0x12c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d802      	bhi.n	8004178 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004172:	230c      	movs	r3, #12
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e041      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <USB_SetTurnaroundTime+0x12c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d906      	bls.n	800418e <USB_SetTurnaroundTime+0x82>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a2e      	ldr	r2, [pc, #184]	; (800423c <USB_SetTurnaroundTime+0x130>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d802      	bhi.n	800418e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004188:	230b      	movs	r3, #11
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e036      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <USB_SetTurnaroundTime+0x130>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d906      	bls.n	80041a4 <USB_SetTurnaroundTime+0x98>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a29      	ldr	r2, [pc, #164]	; (8004240 <USB_SetTurnaroundTime+0x134>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d802      	bhi.n	80041a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800419e:	230a      	movs	r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e02b      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <USB_SetTurnaroundTime+0x134>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d906      	bls.n	80041ba <USB_SetTurnaroundTime+0xae>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <USB_SetTurnaroundTime+0x138>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d202      	bcs.n	80041ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041b4:	2309      	movs	r3, #9
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e020      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4a21      	ldr	r2, [pc, #132]	; (8004244 <USB_SetTurnaroundTime+0x138>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d306      	bcc.n	80041d0 <USB_SetTurnaroundTime+0xc4>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <USB_SetTurnaroundTime+0x13c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d802      	bhi.n	80041d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041ca:	2308      	movs	r3, #8
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e015      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <USB_SetTurnaroundTime+0x13c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d906      	bls.n	80041e6 <USB_SetTurnaroundTime+0xda>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <USB_SetTurnaroundTime+0x140>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d202      	bcs.n	80041e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041e0:	2307      	movs	r3, #7
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e00a      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041e6:	2306      	movs	r3, #6
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e007      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041f2:	2309      	movs	r3, #9
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e001      	b.n	80041fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041f8:	2309      	movs	r3, #9
 80041fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	00d8acbf 	.word	0x00d8acbf
 800422c:	00e4e1c0 	.word	0x00e4e1c0
 8004230:	00f42400 	.word	0x00f42400
 8004234:	01067380 	.word	0x01067380
 8004238:	011a499f 	.word	0x011a499f
 800423c:	01312cff 	.word	0x01312cff
 8004240:	014ca43f 	.word	0x014ca43f
 8004244:	016e3600 	.word	0x016e3600
 8004248:	01a6ab1f 	.word	0x01a6ab1f
 800424c:	01e84800 	.word	0x01e84800

08004250 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f043 0201 	orr.w	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d115      	bne.n	80042e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042c2:	2001      	movs	r0, #1
 80042c4:	f7fc fe44 	bl	8000f50 <HAL_Delay>
      ms++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 f972 	bl	80055b8 <USB_GetMode>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d01e      	beq.n	8004318 <USB_SetCurrentMode+0x84>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b31      	cmp	r3, #49	; 0x31
 80042de:	d9f0      	bls.n	80042c2 <USB_SetCurrentMode+0x2e>
 80042e0:	e01a      	b.n	8004318 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d115      	bne.n	8004314 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f4:	2001      	movs	r0, #1
 80042f6:	f7fc fe2b 	bl	8000f50 <HAL_Delay>
      ms++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 f959 	bl	80055b8 <USB_GetMode>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <USB_SetCurrentMode+0x84>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b31      	cmp	r3, #49	; 0x31
 8004310:	d9f0      	bls.n	80042f4 <USB_SetCurrentMode+0x60>
 8004312:	e001      	b.n	8004318 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e005      	b.n	8004324 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b32      	cmp	r3, #50	; 0x32
 800431c:	d101      	bne.n	8004322 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800432c:	b084      	sub	sp, #16
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800433a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e009      	b.n	8004360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3340      	adds	r3, #64	; 0x40
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0e      	cmp	r3, #14
 8004364:	d9f2      	bls.n	800434c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11c      	bne.n	80043a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
 80043a4:	e00b      	b.n	80043be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c4:	461a      	mov	r2, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	4619      	mov	r1, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	461a      	mov	r2, r3
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10c      	bne.n	80043fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043ea:	2100      	movs	r1, #0
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f945 	bl	800467c <USB_SetDevSpeed>
 80043f2:	e008      	b.n	8004406 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043f4:	2101      	movs	r1, #1
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f940 	bl	800467c <USB_SetDevSpeed>
 80043fc:	e003      	b.n	8004406 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043fe:	2103      	movs	r1, #3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f93b 	bl	800467c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004406:	2110      	movs	r1, #16
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8f3 	bl	80045f4 <USB_FlushTxFifo>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f90f 	bl	800463c <USB_FlushRxFifo>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	461a      	mov	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	461a      	mov	r2, r3
 800443c:	2300      	movs	r3, #0
 800443e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	461a      	mov	r2, r3
 8004448:	2300      	movs	r3, #0
 800444a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e043      	b.n	80044da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004468:	d118      	bne.n	800449c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	461a      	mov	r2, r3
 800447e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e013      	b.n	80044ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	461a      	mov	r2, r3
 8004494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e008      	b.n	80044ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	461a      	mov	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	461a      	mov	r2, r3
 80044ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	3301      	adds	r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d3b7      	bcc.n	8004452 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e043      	b.n	8004570 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044fe:	d118      	bne.n	8004532 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e013      	b.n	8004544 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e008      	b.n	8004544 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	2300      	movs	r3, #0
 8004542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	461a      	mov	r2, r3
 8004552:	2300      	movs	r3, #0
 8004554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	461a      	mov	r2, r3
 8004564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d3b7      	bcc.n	80044e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004598:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d105      	bne.n	80045ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f043 0210 	orr.w	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <USB_DevInit+0x2c4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f043 0208 	orr.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr
 80045f0:	803c3800 	.word	0x803c3800

080045f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <USB_FlushTxFifo+0x44>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e006      	b.n	800462c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d0f1      	beq.n	800460e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	00030d40 	.word	0x00030d40

0800463c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2210      	movs	r2, #16
 800464c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <USB_FlushRxFifo+0x3c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e006      	b.n	800466c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d0f1      	beq.n	800464e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	00030d40 	.word	0x00030d40

0800467c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0306 	and.w	r3, r3, #6
 80046c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
 80046d2:	e00a      	b.n	80046ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d002      	beq.n	80046e0 <USB_GetDevSpeed+0x32>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d102      	bne.n	80046e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046e0:	2302      	movs	r3, #2
 80046e2:	75fb      	strb	r3, [r7, #23]
 80046e4:	e001      	b.n	80046ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046e6:	230f      	movs	r3, #15
 80046e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d13a      	bne.n	800478a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	2101      	movs	r1, #1
 8004726:	fa01 f303 	lsl.w	r3, r1, r3
 800472a:	b29b      	uxth	r3, r3
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004732:	4313      	orrs	r3, r2
 8004734:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d155      	bne.n	80047f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	78db      	ldrb	r3, [r3, #3]
 8004766:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004768:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	059b      	lsls	r3, r3, #22
 800476e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004770:	4313      	orrs	r3, r2
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e036      	b.n	80047f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	2101      	movs	r1, #1
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11a      	bne.n	80047f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	78db      	ldrb	r3, [r3, #3]
 80047dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047de:	430b      	orrs	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d161      	bne.n	80048e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483a:	d11f      	bne.n	800487c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800485a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800487a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800489c:	4013      	ands	r3, r2
 800489e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c0:	4013      	ands	r3, r2
 80048c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	0159      	lsls	r1, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	440b      	add	r3, r1
 80048da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048de:	4619      	mov	r1, r3
 80048e0:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <USB_DeactivateEndpoint+0x1b0>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
 80048e6:	e060      	b.n	80049aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048fe:	d11f      	bne.n	8004940 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800491e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800493e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	43db      	mvns	r3, r3
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004960:	4013      	ands	r3, r2
 8004962:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	43db      	mvns	r3, r3
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4013      	ands	r3, r2
 8004986:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0159      	lsls	r1, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	440b      	add	r3, r1
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	4619      	mov	r1, r3
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <USB_DeactivateEndpoint+0x1b4>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	ec337800 	.word	0xec337800
 80049bc:	eff37800 	.word	0xeff37800

080049c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 815c 	bne.w	8004c9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d132      	bne.n	8004a50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a48:	0cdb      	lsrs	r3, r3, #19
 8004a4a:	04db      	lsls	r3, r3, #19
 8004a4c:	6113      	str	r3, [r2, #16]
 8004a4e:	e074      	b.n	8004b3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	0cdb      	lsrs	r3, r3, #19
 8004a6c:	04db      	lsls	r3, r3, #19
 8004a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6959      	ldr	r1, [r3, #20]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	440b      	add	r3, r1
 8004aac:	1e59      	subs	r1, r3, #1
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ab8:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <USB_EPStartXfer+0x370>)
 8004aba:	400b      	ands	r3, r1
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	0148      	lsls	r0, r1, #5
 8004ac0:	69f9      	ldr	r1, [r7, #28]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	0148      	lsls	r0, r1, #5
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	4401      	add	r1, r0
 8004aea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	78db      	ldrb	r3, [r3, #3]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d11f      	bne.n	8004b3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d14b      	bne.n	8004bd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	78db      	ldrb	r3, [r3, #3]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d128      	bne.n	8004bb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d110      	bne.n	8004b96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e00f      	b.n	8004bb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e12f      	b.n	8004e38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	78db      	ldrb	r3, [r3, #3]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d015      	beq.n	8004c2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8117 	beq.w	8004e38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c26:	4313      	orrs	r3, r2
 8004c28:	634b      	str	r3, [r1, #52]	; 0x34
 8004c2a:	e105      	b.n	8004e38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d110      	bne.n	8004c5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e00f      	b.n	8004c7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68d9      	ldr	r1, [r3, #12]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	b298      	uxth	r0, r3
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4603      	mov	r3, r0
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fa2b 	bl	80050ee <USB_WritePacket>
 8004c98:	e0ce      	b.n	8004e38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	0cdb      	lsrs	r3, r3, #19
 8004cb6:	04db      	lsls	r3, r3, #19
 8004cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d126      	bne.n	8004d34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	0148      	lsls	r0, r1, #5
 8004d00:	69f9      	ldr	r1, [r7, #28]
 8004d02:	4401      	add	r1, r0
 8004d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2a:	6113      	str	r3, [r2, #16]
 8004d2c:	e036      	b.n	8004d9c <USB_EPStartXfer+0x3dc>
 8004d2e:	bf00      	nop
 8004d30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	1e5a      	subs	r2, r3, #1
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	8afb      	ldrh	r3, [r7, #22]
 8004d5a:	04d9      	lsls	r1, r3, #19
 8004d5c:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <USB_EPStartXfer+0x484>)
 8004d5e:	400b      	ands	r3, r1
 8004d60:	69b9      	ldr	r1, [r7, #24]
 8004d62:	0148      	lsls	r0, r1, #5
 8004d64:	69f9      	ldr	r1, [r7, #28]
 8004d66:	4401      	add	r1, r0
 8004d68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	8af9      	ldrh	r1, [r7, #22]
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	0148      	lsls	r0, r1, #5
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	4401      	add	r1, r0
 8004d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10d      	bne.n	8004dbe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68d9      	ldr	r1, [r3, #12]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	460a      	mov	r2, r1
 8004dbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d128      	bne.n	8004e18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00f      	b.n	8004e18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	1ff80000 	.word	0x1ff80000

08004e48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 80cd 	bne.w	8005004 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d132      	bne.n	8004ed8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	0cdb      	lsrs	r3, r3, #19
 8004ed2:	04db      	lsls	r3, r3, #19
 8004ed4:	6113      	str	r3, [r2, #16]
 8004ed6:	e04e      	b.n	8004f76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	0cdb      	lsrs	r3, r3, #19
 8004ef4:	04db      	lsls	r3, r3, #19
 8004ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d903      	bls.n	8004f30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f66:	6939      	ldr	r1, [r7, #16]
 8004f68:	0148      	lsls	r0, r1, #5
 8004f6a:	6979      	ldr	r1, [r7, #20]
 8004f6c:	4401      	add	r1, r0
 8004f6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f72:	4313      	orrs	r3, r2
 8004f74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11e      	bne.n	8004fba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e092      	b.n	80050e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d07e      	beq.n	80050e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	6979      	ldr	r1, [r7, #20]
 8004ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffe:	4313      	orrs	r3, r2
 8005000:	634b      	str	r3, [r1, #52]	; 0x34
 8005002:	e06d      	b.n	80050e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501e:	0cdb      	lsrs	r3, r3, #19
 8005020:	04db      	lsls	r3, r3, #19
 8005022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005046:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005076:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508e:	6939      	ldr	r1, [r7, #16]
 8005090:	0148      	lsls	r0, r1, #5
 8005092:	6979      	ldr	r1, [r7, #20]
 8005094:	4401      	add	r1, r0
 8005096:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800509a:	4313      	orrs	r3, r2
 800509c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10d      	bne.n	80050c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68d9      	ldr	r1, [r3, #12]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	460a      	mov	r2, r1
 80050be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b089      	sub	sp, #36	; 0x24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	4611      	mov	r1, r2
 80050fa:	461a      	mov	r2, r3
 80050fc:	460b      	mov	r3, r1
 80050fe:	71fb      	strb	r3, [r7, #7]
 8005100:	4613      	mov	r3, r2
 8005102:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800510c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d123      	bne.n	800515c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005114:	88bb      	ldrh	r3, [r7, #4]
 8005116:	3303      	adds	r3, #3
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e018      	b.n	8005154 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	031a      	lsls	r2, r3, #12
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512e:	461a      	mov	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3301      	adds	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	3301      	adds	r3, #1
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3e2      	bcc.n	8005122 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3724      	adds	r7, #36	; 0x24
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800516a:	b480      	push	{r7}
 800516c:	b08b      	sub	sp, #44	; 0x2c
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	089b      	lsrs	r3, r3, #2
 8005184:	b29b      	uxth	r3, r3
 8005186:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005190:	2300      	movs	r3, #0
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	e014      	b.n	80051c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	3301      	adds	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	3301      	adds	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	3301      	adds	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	3301      	adds	r3, #1
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3e6      	bcc.n	8005196 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01e      	beq.n	800520c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d8:	461a      	mov	r2, r3
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	701a      	strb	r2, [r3, #0]
      i++;
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	3301      	adds	r3, #1
 80051f8:	623b      	str	r3, [r7, #32]
      pDest++;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	3301      	adds	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	3b01      	subs	r3, #1
 8005204:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005206:	8bfb      	ldrh	r3, [r7, #30]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ea      	bne.n	80051e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800520e:	4618      	mov	r0, r3
 8005210:	372c      	adds	r7, #44	; 0x2c
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12c      	bne.n	8005290 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	db12      	blt.n	800526e <USB_EPSetStall+0x54>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800526c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e02b      	b.n	80052e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	db12      	blt.n	80052c8 <USB_EPSetStall+0xae>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d128      	bne.n	8005364 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005330:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d003      	beq.n	8005342 <USB_EPClearStall+0x4c>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	78db      	ldrb	r3, [r3, #3]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d138      	bne.n	80053b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e027      	b.n	80053b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005382:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	78db      	ldrb	r3, [r3, #3]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d003      	beq.n	8005394 <USB_EPClearStall+0x9e>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	78db      	ldrb	r3, [r3, #3]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d10f      	bne.n	80053b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4013      	ands	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054aa:	68fb      	ldr	r3, [r7, #12]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	0c1b      	lsrs	r3, r3, #16
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	b29b      	uxth	r3, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800554e:	68bb      	ldr	r3, [r7, #8]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	01db      	lsls	r3, r3, #7
 800558e:	b2db      	uxtb	r3, r3
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055aa:	68bb      	ldr	r3, [r7, #8]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	460b      	mov	r3, r1
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	333c      	adds	r3, #60	; 0x3c
 8005632:	3304      	adds	r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4a26      	ldr	r2, [pc, #152]	; (80056d4 <USB_EP0_OutStart+0xb8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d90a      	bls.n	8005656 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005650:	d101      	bne.n	8005656 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e037      	b.n	80056c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	461a      	mov	r2, r3
 800565e:	2300      	movs	r3, #0
 8005660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	f043 0318 	orr.w	r3, r3, #24
 8005688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005698:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800569c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10f      	bne.n	80056c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	4f54300a 	.word	0x4f54300a

080056d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4a13      	ldr	r2, [pc, #76]	; (8005738 <USB_CoreReset+0x60>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e01a      	b.n	800572a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	daf3      	bge.n	80056e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <USB_CoreReset+0x60>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d0f1      	beq.n	800570c <USB_CoreReset+0x34>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	00030d40 	.word	0x00030d40

0800573c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005748:	2010      	movs	r0, #16
 800574a:	f001 ff2b 	bl	80075a4 <USBD_static_malloc>
 800574e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800575e:	2302      	movs	r3, #2
 8005760:	e01b      	b.n	800579a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7c1b      	ldrb	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2207      	movs	r2, #7
 8005776:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005778:	e002      	b.n	8005780 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	220a      	movs	r2, #10
 800577e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005780:	2304      	movs	r3, #4
 8005782:	2203      	movs	r2, #3
 8005784:	2181      	movs	r1, #129	; 0x81
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fdfb 	bl	8007382 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80057ae:	2181      	movs	r1, #129	; 0x81
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fe0c 	bl	80073ce <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fef4 	bl	80075c0 <USBD_static_free>
    pdev->pClassData = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800580c:	2303      	movs	r3, #3
 800580e:	e0e8      	b.n	80059e2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005818:	2b00      	cmp	r3, #0
 800581a:	d046      	beq.n	80058aa <USBD_HID_Setup+0xbe>
 800581c:	2b20      	cmp	r3, #32
 800581e:	f040 80d8 	bne.w	80059d2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	3b02      	subs	r3, #2
 8005828:	2b09      	cmp	r3, #9
 800582a:	d836      	bhi.n	800589a <USBD_HID_Setup+0xae>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USBD_HID_Setup+0x48>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	0800588b 	.word	0x0800588b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800589b 	.word	0x0800589b
 8005840:	0800589b 	.word	0x0800589b
 8005844:	0800589b 	.word	0x0800589b
 8005848:	0800589b 	.word	0x0800589b
 800584c:	0800589b 	.word	0x0800589b
 8005850:	0800589b 	.word	0x0800589b
 8005854:	08005879 	.word	0x08005879
 8005858:	0800585d 	.word	0x0800585d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]
          break;
 8005868:	e01e      	b.n	80058a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fa22 	bl	8006cba <USBD_CtlSendData>
          break;
 8005876:	e017      	b.n	80058a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
          break;
 8005888:	e00e      	b.n	80058a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3304      	adds	r3, #4
 800588e:	2201      	movs	r2, #1
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fa11 	bl	8006cba <USBD_CtlSendData>
          break;
 8005898:	e006      	b.n	80058a8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f99b 	bl	8006bd8 <USBD_CtlError>
          ret = USBD_FAIL;
 80058a2:	2303      	movs	r3, #3
 80058a4:	75fb      	strb	r3, [r7, #23]
          break;
 80058a6:	bf00      	nop
      }
      break;
 80058a8:	e09a      	b.n	80059e0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	f200 8086 	bhi.w	80059c0 <USBD_HID_Setup+0x1d4>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <USBD_HID_Setup+0xd0>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	080059cf 	.word	0x080059cf
 80058c4:	080059c1 	.word	0x080059c1
 80058c8:	080059c1 	.word	0x080059c1
 80058cc:	080059c1 	.word	0x080059c1
 80058d0:	080059c1 	.word	0x080059c1
 80058d4:	08005917 	.word	0x08005917
 80058d8:	080059c1 	.word	0x080059c1
 80058dc:	080059c1 	.word	0x080059c1
 80058e0:	080059c1 	.word	0x080059c1
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	08005999 	.word	0x08005999
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d107      	bne.n	8005908 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058f8:	f107 030a 	add.w	r3, r7, #10
 80058fc:	2202      	movs	r2, #2
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f9da 	bl	8006cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005906:	e063      	b.n	80059d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 f964 	bl	8006bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005910:	2303      	movs	r3, #3
 8005912:	75fb      	strb	r3, [r7, #23]
          break;
 8005914:	e05c      	b.n	80059d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b22      	cmp	r3, #34	; 0x22
 8005920:	d108      	bne.n	8005934 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	88db      	ldrh	r3, [r3, #6]
 8005926:	2b65      	cmp	r3, #101	; 0x65
 8005928:	bf28      	it	cs
 800592a:	2365      	movcs	r3, #101	; 0x65
 800592c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <USBD_HID_Setup+0x200>)
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e015      	b.n	8005960 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	885b      	ldrh	r3, [r3, #2]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b21      	cmp	r3, #33	; 0x21
 800593e:	d108      	bne.n	8005952 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005940:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <USBD_HID_Setup+0x204>)
 8005942:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b09      	cmp	r3, #9
 800594a:	bf28      	it	cs
 800594c:	2309      	movcs	r3, #9
 800594e:	82bb      	strh	r3, [r7, #20]
 8005950:	e006      	b.n	8005960 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f93f 	bl	8006bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800595a:	2303      	movs	r3, #3
 800595c:	75fb      	strb	r3, [r7, #23]
            break;
 800595e:	e037      	b.n	80059d0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005960:	8abb      	ldrh	r3, [r7, #20]
 8005962:	461a      	mov	r2, r3
 8005964:	6939      	ldr	r1, [r7, #16]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 f9a7 	bl	8006cba <USBD_CtlSendData>
          break;
 800596c:	e030      	b.n	80059d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3308      	adds	r3, #8
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f999 	bl	8006cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005988:	e022      	b.n	80059d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f923 	bl	8006bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	75fb      	strb	r3, [r7, #23]
          break;
 8005996:	e01b      	b.n	80059d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d106      	bne.n	80059b2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	885b      	ldrh	r3, [r3, #2]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059b0:	e00e      	b.n	80059d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f90f 	bl	8006bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	75fb      	strb	r3, [r7, #23]
          break;
 80059be:	e007      	b.n	80059d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f908 	bl	8006bd8 <USBD_CtlError>
          ret = USBD_FAIL;
 80059c8:	2303      	movs	r3, #3
 80059ca:	75fb      	strb	r3, [r7, #23]
          break;
 80059cc:	e000      	b.n	80059d0 <USBD_HID_Setup+0x1e4>
          break;
 80059ce:	bf00      	nop
      }
      break;
 80059d0:	e006      	b.n	80059e0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 f8ff 	bl	8006bd8 <USBD_CtlError>
      ret = USBD_FAIL;
 80059da:	2303      	movs	r3, #3
 80059dc:	75fb      	strb	r3, [r7, #23]
      break;
 80059de:	bf00      	nop
  }

  return (uint8_t)ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200000c8 	.word	0x200000c8
 80059f0:	200000b0 	.word	0x200000b0

080059f4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a08:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e013      	b.n	8005a3c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d10c      	bne.n	8005a3a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	7b1b      	ldrb	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	2181      	movs	r1, #129	; 0x81
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f001 fd72 	bl	800751e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2222      	movs	r2, #34	; 0x22
 8005a50:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000044 	.word	0x20000044

08005a64 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2222      	movs	r2, #34	; 0x22
 8005a70:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005a72:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000068 	.word	0x20000068

08005a84 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2222      	movs	r2, #34	; 0x22
 8005a90:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005a92:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	2000008c 	.word	0x2000008c

08005aa4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005ad6:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	200000bc 	.word	0x200000bc

08005ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e01f      	b.n	8005b40 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	79fa      	ldrb	r2, [r7, #7]
 8005b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f001 fbbd 	bl	80072b4 <USBD_LL_Init>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e016      	b.n	8005b8e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f107 020e 	add.w	r2, r7, #14
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	4602      	mov	r2, r0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fbd4 	bl	800734c <USBD_LL_Start>
 8005ba4:	4603      	mov	r3, r0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	4611      	mov	r1, r2
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
  }

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 ff90 	bl	8006b64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d01a      	beq.n	8005c9e <USBD_LL_SetupStage+0x72>
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d822      	bhi.n	8005cb2 <USBD_LL_SetupStage+0x86>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <USBD_LL_SetupStage+0x4a>
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d00a      	beq.n	8005c8a <USBD_LL_SetupStage+0x5e>
 8005c74:	e01d      	b.n	8005cb2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa62 	bl	8006148 <USBD_StdDevReq>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e020      	b.n	8005ccc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fac6 	bl	8006224 <USBD_StdItfReq>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9c:	e016      	b.n	8005ccc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fb05 	bl	80062b6 <USBD_StdEPReq>
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e00c      	b.n	8005ccc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fba3 	bl	800740c <USBD_LL_StallEP>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	bf00      	nop
  }

  return ret;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d138      	bne.n	8005d5c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005cf0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d14a      	bne.n	8005d92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d913      	bls.n	8005d30 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bf28      	it	cs
 8005d22:	4613      	movcs	r3, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fff2 	bl	8006d12 <USBD_CtlContinueRx>
 8005d2e:	e030      	b.n	8005d92 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d10b      	bne.n	8005d54 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 ffed 	bl	8006d34 <USBD_CtlSendStatus>
 8005d5a:	e01a      	b.n	8005d92 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d114      	bne.n	8005d92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00e      	beq.n	8005d92 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	7afa      	ldrb	r2, [r7, #11]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	e000      	b.n	8005d94 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	460b      	mov	r3, r1
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d16b      	bne.n	8005e88 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3314      	adds	r3, #20
 8005db4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d156      	bne.n	8005e6e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d914      	bls.n	8005df6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 ff84 	bl	8006cf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005de8:	2300      	movs	r3, #0
 8005dea:	2200      	movs	r2, #0
 8005dec:	2100      	movs	r1, #0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f001 fbb6 	bl	8007560 <USBD_LL_PrepareReceive>
 8005df4:	e03b      	b.n	8005e6e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d11c      	bne.n	8005e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d316      	bcc.n	8005e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d20f      	bcs.n	8005e3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2100      	movs	r1, #0
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 ff65 	bl	8006cf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fb93 	bl	8007560 <USBD_LL_PrepareReceive>
 8005e3a:	e018      	b.n	8005e6e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d10b      	bne.n	8005e60 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 fad2 	bl	800740c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 ff76 	bl	8006d5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d122      	bne.n	8005ebe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fe98 	bl	8005bae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e86:	e01a      	b.n	8005ebe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d114      	bne.n	8005ebe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e000      	b.n	8005ec0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e02f      	b.n	8005f5c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6852      	ldr	r2, [r2, #4]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	4611      	mov	r1, r2
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f26:	2340      	movs	r3, #64	; 0x40
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fa28 	bl	8007382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 fa1a 	bl	8007382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2240      	movs	r2, #64	; 0x40
 8005f58:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	78fa      	ldrb	r2, [r7, #3]
 8005f74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d106      	bne.n	8005fd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e012      	b.n	800601c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d10b      	bne.n	800601a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800603a:	2303      	movs	r3, #3
 800603c:	e014      	b.n	8006068 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b03      	cmp	r3, #3
 8006048:	d10d      	bne.n	8006066 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	4611      	mov	r1, r2
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006086:	2303      	movs	r3, #3
 8006088:	e014      	b.n	80060b4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d10d      	bne.n	80060b2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6852      	ldr	r2, [r2, #4]
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	4611      	mov	r1, r2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
  }

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800610a:	b480      	push	{r7}
 800610c:	b087      	sub	sp, #28
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	3301      	adds	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006128:	8a3b      	ldrh	r3, [r7, #16]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	b21a      	sxth	r2, r3
 800612e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006132:	4313      	orrs	r3, r2
 8006134:	b21b      	sxth	r3, r3
 8006136:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006138:	89fb      	ldrh	r3, [r7, #14]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d005      	beq.n	800616e <USBD_StdDevReq+0x26>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d853      	bhi.n	800620e <USBD_StdDevReq+0xc6>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <USBD_StdDevReq+0x3a>
 800616a:	2b20      	cmp	r3, #32
 800616c:	d14f      	bne.n	800620e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e04a      	b.n	8006218 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b09      	cmp	r3, #9
 8006188:	d83b      	bhi.n	8006202 <USBD_StdDevReq+0xba>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <USBD_StdDevReq+0x48>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061f9 	.word	0x080061f9
 8006198:	08006203 	.word	0x08006203
 800619c:	080061ef 	.word	0x080061ef
 80061a0:	08006203 	.word	0x08006203
 80061a4:	080061c3 	.word	0x080061c3
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	08006203 	.word	0x08006203
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061cd 	.word	0x080061cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9de 	bl	800657c <USBD_GetDescriptor>
          break;
 80061c0:	e024      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb43 	bl	8006850 <USBD_SetAddress>
          break;
 80061ca:	e01f      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fb82 	bl	80068d8 <USBD_SetConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
          break;
 80061d8:	e018      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fc21 	bl	8006a24 <USBD_GetConfig>
          break;
 80061e2:	e013      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fc52 	bl	8006a90 <USBD_GetStatus>
          break;
 80061ec:	e00e      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc81 	bl	8006af8 <USBD_SetFeature>
          break;
 80061f6:	e009      	b.n	800620c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fc90 	bl	8006b20 <USBD_ClrFeature>
          break;
 8006200:	e004      	b.n	800620c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fce7 	bl	8006bd8 <USBD_CtlError>
          break;
 800620a:	bf00      	nop
      }
      break;
 800620c:	e004      	b.n	8006218 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fce1 	bl	8006bd8 <USBD_CtlError>
      break;
 8006216:	bf00      	nop
  }

  return ret;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d005      	beq.n	800624a <USBD_StdItfReq+0x26>
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d82f      	bhi.n	80062a2 <USBD_StdItfReq+0x7e>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <USBD_StdItfReq+0x26>
 8006246:	2b20      	cmp	r3, #32
 8006248:	d12b      	bne.n	80062a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006250:	b2db      	uxtb	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	2b02      	cmp	r3, #2
 8006256:	d81d      	bhi.n	8006294 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	889b      	ldrh	r3, [r3, #4]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d813      	bhi.n	800628a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	88db      	ldrh	r3, [r3, #6]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d110      	bne.n	800629e <USBD_StdItfReq+0x7a>
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fd56 	bl	8006d34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006288:	e009      	b.n	800629e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fca3 	bl	8006bd8 <USBD_CtlError>
          break;
 8006292:	e004      	b.n	800629e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fc9e 	bl	8006bd8 <USBD_CtlError>
          break;
 800629c:	e000      	b.n	80062a0 <USBD_StdItfReq+0x7c>
          break;
 800629e:	bf00      	nop
      }
      break;
 80062a0:	e004      	b.n	80062ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fc97 	bl	8006bd8 <USBD_CtlError>
      break;
 80062aa:	bf00      	nop
  }

  return ret;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	889b      	ldrh	r3, [r3, #4]
 80062c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d007      	beq.n	80062e6 <USBD_StdEPReq+0x30>
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	f200 8145 	bhi.w	8006566 <USBD_StdEPReq+0x2b0>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <USBD_StdEPReq+0x44>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	f040 8140 	bne.w	8006566 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e13a      	b.n	8006570 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d007      	beq.n	8006312 <USBD_StdEPReq+0x5c>
 8006302:	2b03      	cmp	r3, #3
 8006304:	f300 8129 	bgt.w	800655a <USBD_StdEPReq+0x2a4>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07f      	beq.n	800640c <USBD_StdEPReq+0x156>
 800630c:	2b01      	cmp	r3, #1
 800630e:	d03c      	beq.n	800638a <USBD_StdEPReq+0xd4>
 8006310:	e123      	b.n	800655a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d002      	beq.n	8006324 <USBD_StdEPReq+0x6e>
 800631e:	2b03      	cmp	r3, #3
 8006320:	d016      	beq.n	8006350 <USBD_StdEPReq+0x9a>
 8006322:	e02c      	b.n	800637e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <USBD_StdEPReq+0x90>
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d00a      	beq.n	8006346 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f869 	bl	800740c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800633a:	2180      	movs	r1, #128	; 0x80
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f865 	bl	800740c <USBD_LL_StallEP>
 8006342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006344:	e020      	b.n	8006388 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fc45 	bl	8006bd8 <USBD_CtlError>
              break;
 800634e:	e01b      	b.n	8006388 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	885b      	ldrh	r3, [r3, #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10e      	bne.n	8006376 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <USBD_StdEPReq+0xc0>
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d008      	beq.n	8006376 <USBD_StdEPReq+0xc0>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	88db      	ldrh	r3, [r3, #6]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 f84b 	bl	800740c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fcdc 	bl	8006d34 <USBD_CtlSendStatus>

              break;
 800637c:	e004      	b.n	8006388 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fc29 	bl	8006bd8 <USBD_CtlError>
              break;
 8006386:	bf00      	nop
          }
          break;
 8006388:	e0ec      	b.n	8006564 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d002      	beq.n	800639c <USBD_StdEPReq+0xe6>
 8006396:	2b03      	cmp	r3, #3
 8006398:	d016      	beq.n	80063c8 <USBD_StdEPReq+0x112>
 800639a:	e030      	b.n	80063fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <USBD_StdEPReq+0x108>
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d00a      	beq.n	80063be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 f82d 	bl	800740c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063b2:	2180      	movs	r1, #128	; 0x80
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f829 	bl	800740c <USBD_LL_StallEP>
 80063ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063bc:	e025      	b.n	800640a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc09 	bl	8006bd8 <USBD_CtlError>
              break;
 80063c6:	e020      	b.n	800640a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	885b      	ldrh	r3, [r3, #2]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11b      	bne.n	8006408 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f833 	bl	800744a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fca5 	bl	8006d34 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80063fc:	e004      	b.n	8006408 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fbe9 	bl	8006bd8 <USBD_CtlError>
              break;
 8006406:	e000      	b.n	800640a <USBD_StdEPReq+0x154>
              break;
 8006408:	bf00      	nop
          }
          break;
 800640a:	e0ab      	b.n	8006564 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d002      	beq.n	800641e <USBD_StdEPReq+0x168>
 8006418:	2b03      	cmp	r3, #3
 800641a:	d032      	beq.n	8006482 <USBD_StdEPReq+0x1cc>
 800641c:	e097      	b.n	800654e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <USBD_StdEPReq+0x17e>
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d004      	beq.n	8006434 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbd3 	bl	8006bd8 <USBD_CtlError>
                break;
 8006432:	e091      	b.n	8006558 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	da0b      	bge.n	8006454 <USBD_StdEPReq+0x19e>
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	3310      	adds	r3, #16
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	e00b      	b.n	800646c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2202      	movs	r2, #2
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fc1d 	bl	8006cba <USBD_CtlSendData>
              break;
 8006480:	e06a      	b.n	8006558 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da11      	bge.n	80064ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d117      	bne.n	80064d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fb96 	bl	8006bd8 <USBD_CtlError>
                  break;
 80064ac:	e054      	b.n	8006558 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fb83 	bl	8006bd8 <USBD_CtlError>
                  break;
 80064d2:	e041      	b.n	8006558 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0b      	bge.n	80064f4 <USBD_StdEPReq+0x23e>
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	3310      	adds	r3, #16
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	e00b      	b.n	800650c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3304      	adds	r3, #4
 800650c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <USBD_StdEPReq+0x264>
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d103      	bne.n	8006522 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e00e      	b.n	8006540 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 ffae 	bl	8007488 <USBD_LL_IsStallEP>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e002      	b.n	8006540 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2202      	movs	r2, #2
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fbb7 	bl	8006cba <USBD_CtlSendData>
              break;
 800654c:	e004      	b.n	8006558 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fb41 	bl	8006bd8 <USBD_CtlError>
              break;
 8006556:	bf00      	nop
          }
          break;
 8006558:	e004      	b.n	8006564 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb3b 	bl	8006bd8 <USBD_CtlError>
          break;
 8006562:	bf00      	nop
      }
      break;
 8006564:	e004      	b.n	8006570 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb35 	bl	8006bd8 <USBD_CtlError>
      break;
 800656e:	bf00      	nop
  }

  return ret;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	885b      	ldrh	r3, [r3, #2]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	2b06      	cmp	r3, #6
 800659e:	f200 8128 	bhi.w	80067f2 <USBD_GetDescriptor+0x276>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <USBD_GetDescriptor+0x2c>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065c5 	.word	0x080065c5
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	0800661d 	.word	0x0800661d
 80065b4:	080067f3 	.word	0x080067f3
 80065b8:	080067f3 	.word	0x080067f3
 80065bc:	08006793 	.word	0x08006793
 80065c0:	080067bf 	.word	0x080067bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
      break;
 80065da:	e112      	b.n	8006802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7c1b      	ldrb	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f107 0208 	add.w	r2, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	2202      	movs	r2, #2
 80065fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065fe:	e100      	b.n	8006802 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	f107 0208 	add.w	r2, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
      break;
 800661a:	e0f2      	b.n	8006802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	885b      	ldrh	r3, [r3, #2]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b05      	cmp	r3, #5
 8006624:	f200 80ac 	bhi.w	8006780 <USBD_GetDescriptor+0x204>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <USBD_GetDescriptor+0xb4>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006649 	.word	0x08006649
 8006634:	0800667d 	.word	0x0800667d
 8006638:	080066b1 	.word	0x080066b1
 800663c:	080066e5 	.word	0x080066e5
 8006640:	08006719 	.word	0x08006719
 8006644:	0800674d 	.word	0x0800674d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7c12      	ldrb	r2, [r2, #16]
 8006660:	f107 0108 	add.w	r1, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666a:	e091      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fab2 	bl	8006bd8 <USBD_CtlError>
            err++;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	3301      	adds	r3, #1
 8006678:	72fb      	strb	r3, [r7, #11]
          break;
 800667a:	e089      	b.n	8006790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7c12      	ldrb	r2, [r2, #16]
 8006694:	f107 0108 	add.w	r1, r7, #8
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
 800669c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669e:	e077      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa98 	bl	8006bd8 <USBD_CtlError>
            err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
          break;
 80066ae:	e06f      	b.n	8006790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d2:	e05d      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa7e 	bl	8006bd8 <USBD_CtlError>
            err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
          break;
 80066e2:	e055      	b.n	8006790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006706:	e043      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa64 	bl	8006bd8 <USBD_CtlError>
            err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
          break;
 8006716:	e03b      	b.n	8006790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7c12      	ldrb	r2, [r2, #16]
 8006730:	f107 0108 	add.w	r1, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800673a:	e029      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa4a 	bl	8006bd8 <USBD_CtlError>
            err++;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3301      	adds	r3, #1
 8006748:	72fb      	strb	r3, [r7, #11]
          break;
 800674a:	e021      	b.n	8006790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676e:	e00f      	b.n	8006790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa30 	bl	8006bd8 <USBD_CtlError>
            err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
          break;
 800677e:	e007      	b.n	8006790 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa28 	bl	8006bd8 <USBD_CtlError>
          err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800678e:	bf00      	nop
      }
      break;
 8006790:	e037      	b.n	8006802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	7c1b      	ldrb	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	f107 0208 	add.w	r2, r7, #8
 80067a6:	4610      	mov	r0, r2
 80067a8:	4798      	blx	r3
 80067aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ac:	e029      	b.n	8006802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa11 	bl	8006bd8 <USBD_CtlError>
        err++;
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	3301      	adds	r3, #1
 80067ba:	72fb      	strb	r3, [r7, #11]
      break;
 80067bc:	e021      	b.n	8006802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	7c1b      	ldrb	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10d      	bne.n	80067e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	f107 0208 	add.w	r2, r7, #8
 80067d2:	4610      	mov	r0, r2
 80067d4:	4798      	blx	r3
 80067d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	2207      	movs	r2, #7
 80067de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e0:	e00f      	b.n	8006802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9f7 	bl	8006bd8 <USBD_CtlError>
        err++;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	3301      	adds	r3, #1
 80067ee:	72fb      	strb	r3, [r7, #11]
      break;
 80067f0:	e007      	b.n	8006802 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9ef 	bl	8006bd8 <USBD_CtlError>
      err++;
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	3301      	adds	r3, #1
 80067fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006800:	bf00      	nop
  }

  if (err != 0U)
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11e      	bne.n	8006846 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	88db      	ldrh	r3, [r3, #6]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d016      	beq.n	800683e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88da      	ldrh	r2, [r3, #6]
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	4293      	cmp	r3, r2
 800681e:	bf28      	it	cs
 8006820:	4613      	movcs	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006826:	893b      	ldrh	r3, [r7, #8]
 8006828:	461a      	mov	r2, r3
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fa44 	bl	8006cba <USBD_CtlSendData>
 8006832:	e009      	b.n	8006848 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f9ce 	bl	8006bd8 <USBD_CtlError>
 800683c:	e004      	b.n	8006848 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa78 	bl	8006d34 <USBD_CtlSendStatus>
 8006844:	e000      	b.n	8006848 <USBD_GetDescriptor+0x2cc>
    return;
 8006846:	bf00      	nop
  }
}
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	889b      	ldrh	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d131      	bne.n	80068c6 <USBD_SetAddress+0x76>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	88db      	ldrh	r3, [r3, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d12d      	bne.n	80068c6 <USBD_SetAddress+0x76>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	885b      	ldrh	r3, [r3, #2]
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d829      	bhi.n	80068c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	885b      	ldrh	r3, [r3, #2]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b03      	cmp	r3, #3
 8006888:	d104      	bne.n	8006894 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f9a3 	bl	8006bd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006892:	e01d      	b.n	80068d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fe1d 	bl	80074e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa44 	bl	8006d34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ba:	e009      	b.n	80068d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c4:	e004      	b.n	80068d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f985 	bl	8006bd8 <USBD_CtlError>
  }
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	885b      	ldrh	r3, [r3, #2]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	4b4c      	ldr	r3, [pc, #304]	; (8006a20 <USBD_SetConfig+0x148>)
 80068ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068f0:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <USBD_SetConfig+0x148>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d905      	bls.n	8006904 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f96c 	bl	8006bd8 <USBD_CtlError>
    return USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	e088      	b.n	8006a16 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d002      	beq.n	8006916 <USBD_SetConfig+0x3e>
 8006910:	2b03      	cmp	r3, #3
 8006912:	d025      	beq.n	8006960 <USBD_SetConfig+0x88>
 8006914:	e071      	b.n	80069fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006916:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <USBD_SetConfig+0x148>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01c      	beq.n	8006958 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800691e:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <USBD_SetConfig+0x148>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006928:	4b3d      	ldr	r3, [pc, #244]	; (8006a20 <USBD_SetConfig+0x148>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff f948 	bl	8005bc4 <USBD_SetClassConfig>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f949 	bl	8006bd8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006946:	e065      	b.n	8006a14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9f3 	bl	8006d34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2203      	movs	r2, #3
 8006952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006956:	e05d      	b.n	8006a14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f9eb 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 800695e:	e059      	b.n	8006a14 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006960:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <USBD_SetConfig+0x148>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d112      	bne.n	800698e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006970:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <USBD_SetConfig+0x148>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800697a:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <USBD_SetConfig+0x148>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff f93b 	bl	8005bfc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9d4 	bl	8006d34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800698c:	e042      	b.n	8006a14 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800698e:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <USBD_SetConfig+0x148>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d02a      	beq.n	80069f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f929 	bl	8005bfc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069aa:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <USBD_SetConfig+0x148>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <USBD_SetConfig+0x148>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f902 	bl	8005bc4 <USBD_SetClassConfig>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00f      	beq.n	80069ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f903 	bl	8006bd8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff f90e 	bl	8005bfc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069e8:	e014      	b.n	8006a14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9a2 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 80069f0:	e010      	b.n	8006a14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f99e 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 80069f8:	e00c      	b.n	8006a14 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f8eb 	bl	8006bd8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a02:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <USBD_SetConfig+0x148>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f8f7 	bl	8005bfc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	73fb      	strb	r3, [r7, #15]
      break;
 8006a12:	bf00      	nop
  }

  return ret;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	2000019c 	.word	0x2000019c

08006a24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	88db      	ldrh	r3, [r3, #6]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d004      	beq.n	8006a40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8cd 	bl	8006bd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a3e:	e023      	b.n	8006a88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	dc02      	bgt.n	8006a52 <USBD_GetConfig+0x2e>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc03      	bgt.n	8006a58 <USBD_GetConfig+0x34>
 8006a50:	e015      	b.n	8006a7e <USBD_GetConfig+0x5a>
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d00b      	beq.n	8006a6e <USBD_GetConfig+0x4a>
 8006a56:	e012      	b.n	8006a7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3308      	adds	r3, #8
 8006a62:	2201      	movs	r2, #1
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f927 	bl	8006cba <USBD_CtlSendData>
        break;
 8006a6c:	e00c      	b.n	8006a88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3304      	adds	r3, #4
 8006a72:	2201      	movs	r2, #1
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f91f 	bl	8006cba <USBD_CtlSendData>
        break;
 8006a7c:	e004      	b.n	8006a88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f8a9 	bl	8006bd8 <USBD_CtlError>
        break;
 8006a86:	bf00      	nop
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d81e      	bhi.n	8006ae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	88db      	ldrh	r3, [r3, #6]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d004      	beq.n	8006aba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f890 	bl	8006bd8 <USBD_CtlError>
        break;
 8006ab8:	e01a      	b.n	8006af0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	2202      	movs	r2, #2
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8eb 	bl	8006cba <USBD_CtlSendData>
      break;
 8006ae4:	e004      	b.n	8006af0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f875 	bl	8006bd8 <USBD_CtlError>
      break;
 8006aee:	bf00      	nop
  }
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d106      	bne.n	8006b18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f90e 	bl	8006d34 <USBD_CtlSendStatus>
  }
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d80b      	bhi.n	8006b50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10c      	bne.n	8006b5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f8f3 	bl	8006d34 <USBD_CtlSendStatus>
      }
      break;
 8006b4e:	e004      	b.n	8006b5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f840 	bl	8006bd8 <USBD_CtlError>
      break;
 8006b58:	e000      	b.n	8006b5c <USBD_ClrFeature+0x3c>
      break;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fabb 	bl	800610a <SWAPBYTE>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff faae 	bl	800610a <SWAPBYTE>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff faa1 	bl	800610a <SWAPBYTE>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	80da      	strh	r2, [r3, #6]
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be2:	2180      	movs	r1, #128	; 0x80
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc11 	bl	800740c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc0d 	bl	800740c <USBD_LL_StallEP>
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d036      	beq.n	8006c7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c14:	6938      	ldr	r0, [r7, #16]
 8006c16:	f000 f836 	bl	8006c86 <USBD_GetLen>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	3301      	adds	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	4413      	add	r3, r2
 8006c40:	2203      	movs	r2, #3
 8006c42:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	3301      	adds	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c4a:	e013      	b.n	8006c74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]
    idx++;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	3301      	adds	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	3301      	adds	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e7      	bne.n	8006c4c <USBD_GetString+0x52>
 8006c7c:	e000      	b.n	8006c80 <USBD_GetString+0x86>
    return;
 8006c7e:	bf00      	nop
  }
}
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b085      	sub	sp, #20
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c96:	e005      	b.n	8006ca4 <USBD_GetLen+0x1e>
  {
    len++;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f5      	bne.n	8006c98 <USBD_GetLen+0x12>
  }

  return len;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	2100      	movs	r1, #0
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fc1c 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	2100      	movs	r1, #0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fc0b 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	2100      	movs	r1, #0
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fc1b 	bl	8007560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d44:	2300      	movs	r3, #0
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fbe7 	bl	800751e <USBD_LL_Transmit>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2205      	movs	r2, #5
 8006d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbf5 	bl	8007560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d84:	2200      	movs	r2, #0
 8006d86:	490e      	ldr	r1, [pc, #56]	; (8006dc0 <MX_USB_DEVICE_Init+0x40>)
 8006d88:	480e      	ldr	r0, [pc, #56]	; (8006dc4 <MX_USB_DEVICE_Init+0x44>)
 8006d8a:	f7fe fead 	bl	8005ae8 <USBD_Init>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d94:	f7f9 febc 	bl	8000b10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006d98:	490b      	ldr	r1, [pc, #44]	; (8006dc8 <MX_USB_DEVICE_Init+0x48>)
 8006d9a:	480a      	ldr	r0, [pc, #40]	; (8006dc4 <MX_USB_DEVICE_Init+0x44>)
 8006d9c:	f7fe fed4 	bl	8005b48 <USBD_RegisterClass>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006da6:	f7f9 feb3 	bl	8000b10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006daa:	4806      	ldr	r0, [pc, #24]	; (8006dc4 <MX_USB_DEVICE_Init+0x44>)
 8006dac:	f7fe fef3 	bl	8005b96 <USBD_Start>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006db6:	f7f9 feab 	bl	8000b10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000130 	.word	0x20000130
 8006dc4:	200002c0 	.word	0x200002c0
 8006dc8:	2000000c 	.word	0x2000000c

08006dcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2212      	movs	r2, #18
 8006ddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <USBD_FS_DeviceDescriptor+0x20>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	2000014c 	.word	0x2000014c

08006df0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e02:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	20000160 	.word	0x20000160

08006e14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4907      	ldr	r1, [pc, #28]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e2a:	4808      	ldr	r0, [pc, #32]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e2c:	f7ff fee5 	bl	8006bfa <USBD_GetString>
 8006e30:	e004      	b.n	8006e3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4904      	ldr	r1, [pc, #16]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e36:	4805      	ldr	r0, [pc, #20]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e38:	f7ff fedf 	bl	8006bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000590 	.word	0x20000590
 8006e4c:	0800769c 	.word	0x0800769c

08006e50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4904      	ldr	r1, [pc, #16]	; (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e60:	4804      	ldr	r0, [pc, #16]	; (8006e74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e62:	f7ff feca 	bl	8006bfa <USBD_GetString>
  return USBD_StrDesc;
 8006e66:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000590 	.word	0x20000590
 8006e74:	080076b4 	.word	0x080076b4

08006e78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	221a      	movs	r2, #26
 8006e88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e8a:	f000 f843 	bl	8006f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e8e:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000164 	.word	0x20000164

08006e9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4907      	ldr	r1, [pc, #28]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eb2:	4808      	ldr	r0, [pc, #32]	; (8006ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb4:	f7ff fea1 	bl	8006bfa <USBD_GetString>
 8006eb8:	e004      	b.n	8006ec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ebe:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ec0:	f7ff fe9b 	bl	8006bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000590 	.word	0x20000590
 8006ed4:	080076c8 	.word	0x080076c8

08006ed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4907      	ldr	r1, [pc, #28]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eee:	4808      	ldr	r0, [pc, #32]	; (8006f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ef0:	f7ff fe83 	bl	8006bfa <USBD_GetString>
 8006ef4:	e004      	b.n	8006f00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4904      	ldr	r1, [pc, #16]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006efa:	4805      	ldr	r0, [pc, #20]	; (8006f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006efc:	f7ff fe7d 	bl	8006bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000590 	.word	0x20000590
 8006f10:	080076d4 	.word	0x080076d4

08006f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <Get_SerialNum+0x44>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <Get_SerialNum+0x48>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <Get_SerialNum+0x4c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	4909      	ldr	r1, [pc, #36]	; (8006f64 <Get_SerialNum+0x50>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f814 	bl	8006f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f44:	2204      	movs	r2, #4
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <Get_SerialNum+0x54>)
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f000 f80f 	bl	8006f6c <IntToUnicode>
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	1fff7a10 	.word	0x1fff7a10
 8006f5c:	1fff7a14 	.word	0x1fff7a14
 8006f60:	1fff7a18 	.word	0x1fff7a18
 8006f64:	20000166 	.word	0x20000166
 8006f68:	20000176 	.word	0x20000176

08006f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e027      	b.n	8006fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	0f1b      	lsrs	r3, r3, #28
 8006f88:	2b09      	cmp	r3, #9
 8006f8a:	d80b      	bhi.n	8006fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	0f1b      	lsrs	r3, r3, #28
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4619      	mov	r1, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3230      	adds	r2, #48	; 0x30
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e00a      	b.n	8006fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	0f1b      	lsrs	r3, r3, #28
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3237      	adds	r2, #55	; 0x37
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
 8006fd4:	7dfa      	ldrb	r2, [r7, #23]
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d3d3      	bcc.n	8006f84 <IntToUnicode+0x18>
  }
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700c:	d158      	bne.n	80070c0 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	6313      	str	r3, [r2, #48]	; 0x30
 800701e:	4b2a      	ldr	r3, [pc, #168]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800702a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800702e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007038:	f107 0314 	add.w	r3, r7, #20
 800703c:	4619      	mov	r1, r3
 800703e:	4823      	ldr	r0, [pc, #140]	; (80070cc <HAL_PCD_MspInit+0xe0>)
 8007040:	f7fa f8bc 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8007044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704a:	2302      	movs	r3, #2
 800704c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007056:	230a      	movs	r3, #10
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800705a:	f107 0314 	add.w	r3, r7, #20
 800705e:	4619      	mov	r1, r3
 8007060:	481a      	ldr	r0, [pc, #104]	; (80070cc <HAL_PCD_MspInit+0xe0>)
 8007062:	f7fa f8ab 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007066:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800706a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706c:	2302      	movs	r3, #2
 800706e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007074:	2303      	movs	r3, #3
 8007076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007078:	230a      	movs	r3, #10
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	4619      	mov	r1, r3
 8007082:	4812      	ldr	r0, [pc, #72]	; (80070cc <HAL_PCD_MspInit+0xe0>)
 8007084:	f7fa f89a 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 800708e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007092:	6353      	str	r3, [r2, #52]	; 0x34
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 800709e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070a2:	6453      	str	r3, [r2, #68]	; 0x44
 80070a4:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <HAL_PCD_MspInit+0xdc>)
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	2043      	movs	r0, #67	; 0x43
 80070b6:	f7fa f84a 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070ba:	2043      	movs	r0, #67	; 0x43
 80070bc:	f7fa f863 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070c0:	bf00      	nop
 80070c2:	3728      	adds	r7, #40	; 0x28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40020000 	.word	0x40020000

080070d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fda0 	bl	8005c2c <USBD_LL_SetupStage>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	4619      	mov	r1, r3
 800711e:	f7fe fdda 	bl	8005cd6 <USBD_LL_DataOutStage>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	3348      	adds	r3, #72	; 0x48
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	4619      	mov	r1, r3
 8007152:	f7fe fe23 	bl	8005d9c <USBD_LL_DataInStage>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe ff37 	bl	8005fe0 <USBD_LL_SOF>
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
 8007192:	e008      	b.n	80071a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d102      	bne.n	80071a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800719c:	2301      	movs	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
 80071a0:	e001      	b.n	80071a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071a2:	f7f9 fcb5 	bl	8000b10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ac:	7bfa      	ldrb	r2, [r7, #15]
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fed7 	bl	8005f64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fe83 	bl	8005ec8 <USBD_LL_Reset>
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fed2 	bl	8005f84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <HAL_PCD_SuspendCallback+0x48>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4a03      	ldr	r2, [pc, #12]	; (8007214 <HAL_PCD_SuspendCallback+0x48>)
 8007206:	f043 0306 	orr.w	r3, r3, #6
 800720a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fec2 	bl	8005fb0 <USBD_LL_Resume>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe ff10 	bl	8006070 <USBD_LL_IsoOUTIncomplete>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fed8 	bl	8006024 <USBD_LL_IsoINIncomplete>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe ff16 	bl	80060bc <USBD_LL_DevConnected>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe ff13 	bl	80060d2 <USBD_LL_DevDisconnected>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d13c      	bne.n	800733e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <USBD_LL_Init+0x94>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1e      	ldr	r2, [pc, #120]	; (8007348 <USBD_LL_Init+0x94>)
 80072d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072d4:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <USBD_LL_Init+0x94>)
 80072d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <USBD_LL_Init+0x94>)
 80072de:	2204      	movs	r2, #4
 80072e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <USBD_LL_Init+0x94>)
 80072e4:	2202      	movs	r2, #2
 80072e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072e8:	4b17      	ldr	r3, [pc, #92]	; (8007348 <USBD_LL_Init+0x94>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <USBD_LL_Init+0x94>)
 80072f0:	2202      	movs	r2, #2
 80072f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <USBD_LL_Init+0x94>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <USBD_LL_Init+0x94>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007300:	4b11      	ldr	r3, [pc, #68]	; (8007348 <USBD_LL_Init+0x94>)
 8007302:	2200      	movs	r2, #0
 8007304:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007306:	4b10      	ldr	r3, [pc, #64]	; (8007348 <USBD_LL_Init+0x94>)
 8007308:	2200      	movs	r2, #0
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <USBD_LL_Init+0x94>)
 800730e:	2200      	movs	r2, #0
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007312:	480d      	ldr	r0, [pc, #52]	; (8007348 <USBD_LL_Init+0x94>)
 8007314:	f7fa ff04 	bl	8002120 <HAL_PCD_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800731e:	f7f9 fbf7 	bl	8000b10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007322:	2180      	movs	r1, #128	; 0x80
 8007324:	4808      	ldr	r0, [pc, #32]	; (8007348 <USBD_LL_Init+0x94>)
 8007326:	f7fc f84a 	bl	80033be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800732a:	2240      	movs	r2, #64	; 0x40
 800732c:	2100      	movs	r1, #0
 800732e:	4806      	ldr	r0, [pc, #24]	; (8007348 <USBD_LL_Init+0x94>)
 8007330:	f7fb fffe 	bl	8003330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007334:	2280      	movs	r2, #128	; 0x80
 8007336:	2101      	movs	r1, #1
 8007338:	4803      	ldr	r0, [pc, #12]	; (8007348 <USBD_LL_Init+0x94>)
 800733a:	f7fb fff9 	bl	8003330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20000790 	.word	0x20000790

0800734c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007362:	4618      	mov	r0, r3
 8007364:	f7fa fff9 	bl	800235a <HAL_PCD_Start>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f930 	bl	80075d4 <USBD_Get_USB_Status>
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007378:	7bbb      	ldrb	r3, [r7, #14]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	4603      	mov	r3, r0
 8007392:	70fb      	strb	r3, [r7, #3]
 8007394:	460b      	mov	r3, r1
 8007396:	70bb      	strb	r3, [r7, #2]
 8007398:	4613      	mov	r3, r2
 800739a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073aa:	78bb      	ldrb	r3, [r7, #2]
 80073ac:	883a      	ldrh	r2, [r7, #0]
 80073ae:	78f9      	ldrb	r1, [r7, #3]
 80073b0:	f7fb fbdd 	bl	8002b6e <HAL_PCD_EP_Open>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f90a 	bl	80075d4 <USBD_Get_USB_Status>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fb fc26 	bl	8002c3e <HAL_PCD_EP_Close>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f8eb 	bl	80075d4 <USBD_Get_USB_Status>
 80073fe:	4603      	mov	r3, r0
 8007400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007402:	7bbb      	ldrb	r3, [r7, #14]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fb fce6 	bl	8002dfc <HAL_PCD_EP_SetStall>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f8cc 	bl	80075d4 <USBD_Get_USB_Status>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007440:	7bbb      	ldrb	r3, [r7, #14]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fb fd2b 	bl	8002ec4 <HAL_PCD_EP_ClrStall>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f8ad 	bl	80075d4 <USBD_Get_USB_Status>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800749a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800749c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da0b      	bge.n	80074bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	333e      	adds	r3, #62	; 0x3e
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	e00b      	b.n	80074d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	1a9b      	subs	r3, r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fb fb10 	bl	8002b24 <HAL_PCD_SetAddress>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f862 	bl	80075d4 <USBD_Get_USB_Status>
 8007510:	4603      	mov	r3, r0
 8007512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007514:	7bbb      	ldrb	r3, [r7, #14]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	460b      	mov	r3, r1
 800752c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800753c:	7af9      	ldrb	r1, [r7, #11]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	f7fb fc11 	bl	8002d68 <HAL_PCD_EP_Transmit>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f841 	bl	80075d4 <USBD_Get_USB_Status>
 8007552:	4603      	mov	r3, r0
 8007554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007556:	7dbb      	ldrb	r3, [r7, #22]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	460b      	mov	r3, r1
 800756e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800757e:	7af9      	ldrb	r1, [r7, #11]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f7fb fba5 	bl	8002cd2 <HAL_PCD_EP_Receive>
 8007588:	4603      	mov	r3, r0
 800758a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f820 	bl	80075d4 <USBD_Get_USB_Status>
 8007594:	4603      	mov	r3, r0
 8007596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007598:	7dbb      	ldrb	r3, [r7, #22]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075ac:	4b03      	ldr	r3, [pc, #12]	; (80075bc <USBD_static_malloc+0x18>)
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	200001a0 	.word	0x200001a0

080075c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d817      	bhi.n	8007618 <USBD_Get_USB_Status+0x44>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_Get_USB_Status+0x1c>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007607 	.word	0x08007607
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	08007613 	.word	0x08007613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
    break;
 8007604:	e00b      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
    break;
 800760a:	e008      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
    break;
 8007610:	e005      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	73fb      	strb	r3, [r7, #15]
    break;
 8007616:	e002      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007618:	2303      	movs	r3, #3
 800761a:	73fb      	strb	r3, [r7, #15]
    break;
 800761c:	bf00      	nop
  }
  return usb_status;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <__libc_init_array>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	4d0d      	ldr	r5, [pc, #52]	; (8007664 <__libc_init_array+0x38>)
 8007630:	4c0d      	ldr	r4, [pc, #52]	; (8007668 <__libc_init_array+0x3c>)
 8007632:	1b64      	subs	r4, r4, r5
 8007634:	10a4      	asrs	r4, r4, #2
 8007636:	2600      	movs	r6, #0
 8007638:	42a6      	cmp	r6, r4
 800763a:	d109      	bne.n	8007650 <__libc_init_array+0x24>
 800763c:	4d0b      	ldr	r5, [pc, #44]	; (800766c <__libc_init_array+0x40>)
 800763e:	4c0c      	ldr	r4, [pc, #48]	; (8007670 <__libc_init_array+0x44>)
 8007640:	f000 f820 	bl	8007684 <_init>
 8007644:	1b64      	subs	r4, r4, r5
 8007646:	10a4      	asrs	r4, r4, #2
 8007648:	2600      	movs	r6, #0
 800764a:	42a6      	cmp	r6, r4
 800764c:	d105      	bne.n	800765a <__libc_init_array+0x2e>
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	f855 3b04 	ldr.w	r3, [r5], #4
 8007654:	4798      	blx	r3
 8007656:	3601      	adds	r6, #1
 8007658:	e7ee      	b.n	8007638 <__libc_init_array+0xc>
 800765a:	f855 3b04 	ldr.w	r3, [r5], #4
 800765e:	4798      	blx	r3
 8007660:	3601      	adds	r6, #1
 8007662:	e7f2      	b.n	800764a <__libc_init_array+0x1e>
 8007664:	08007704 	.word	0x08007704
 8007668:	08007704 	.word	0x08007704
 800766c:	08007704 	.word	0x08007704
 8007670:	08007708 	.word	0x08007708

08007674 <memset>:
 8007674:	4402      	add	r2, r0
 8007676:	4603      	mov	r3, r0
 8007678:	4293      	cmp	r3, r2
 800767a:	d100      	bne.n	800767e <memset+0xa>
 800767c:	4770      	bx	lr
 800767e:	f803 1b01 	strb.w	r1, [r3], #1
 8007682:	e7f9      	b.n	8007678 <memset+0x4>

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
