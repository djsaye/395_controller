
xbox395.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080085c4  080085c4  000185c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008634  08008634  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800863c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000ac8  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c2c  20000c2c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a80c  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3c  00000000  00000000  0003a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  0003f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b95  00000000  00000000  00040900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a2a  00000000  00000000  00066495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72f0  00000000  00000000  0007febf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001571af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e1c  00000000  00000000  00157204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085ac 	.word	0x080085ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	080085ac 	.word	0x080085ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd24 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f850 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9cc 	bl	8000868 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f916 	bl	8000700 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f942 	bl	800075c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f970 	bl	80007bc <MX_SPI1_Init>
  MX_DMA_Init();
 80004dc:	f000 f9a4 	bl	8000828 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8ae 	bl	8000640 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 fbe0 	bl	8007ca8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 80004e8:	2202      	movs	r2, #2
 80004ea:	491d      	ldr	r1, [pc, #116]	; (8000560 <main+0xa0>)
 80004ec:	481d      	ldr	r0, [pc, #116]	; (8000564 <main+0xa4>)
 80004ee:	f000 fde9 	bl	80010c4 <HAL_ADC_Start_DMA>
  uint16_t buttons_state;
  //uint16_t joystick = 2048;
  int i;
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 80004f2:	2202      	movs	r2, #2
 80004f4:	491a      	ldr	r1, [pc, #104]	; (8000560 <main+0xa0>)
 80004f6:	481b      	ldr	r0, [pc, #108]	; (8000564 <main+0xa4>)
 80004f8:	f000 fde4 	bl	80010c4 <HAL_ADC_Start_DMA>
	  if(joystick_val[0] > 3000){
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <main+0xa0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000504:	4293      	cmp	r3, r2
 8000506:	d905      	bls.n	8000514 <main+0x54>
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050e:	4816      	ldr	r0, [pc, #88]	; (8000568 <main+0xa8>)
 8000510:	f001 ffc4 	bl	800249c <HAL_GPIO_WritePin>
	  }
	  if(joystick_val[0] < 1000){
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <main+0xa0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800051c:	d205      	bcs.n	800052a <main+0x6a>
	  		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0xa8>)
 8000526:	f001 ffb9 	bl	800249c <HAL_GPIO_WritePin>
	  	  }
	  if(joystick_val[1] > 3000){
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0xa0>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000532:	4293      	cmp	r3, r2
 8000534:	d905      	bls.n	8000542 <main+0x82>
	  		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0xa8>)
 800053e:	f001 ffad 	bl	800249c <HAL_GPIO_WritePin>
	  	  }
	  if(joystick_val[1] < 1000){
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <main+0xa0>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054a:	d205      	bcs.n	8000558 <main+0x98>
	  		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <main+0xa8>)
 8000554:	f001 ffa2 	bl	800249c <HAL_GPIO_WritePin>
	 //for(i = 0; i < 4; i++){
	//	 report_data[i] = (uint16_t) joystick_val[i];
	// }
	 //report_data[4] = buttons_state;
	 //USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &report_data, (5)*sizeof(uint16_t));
	 HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f000 fd4b 	bl	8000ff4 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 800055e:	e7c8      	b.n	80004f2 <main+0x32>
 8000560:	20000198 	.word	0x20000198
 8000564:	20000208 	.word	0x20000208
 8000568:	40020c00 	.word	0x40020c00

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 f80e 	bl	800859c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 febc 	bl	8004370 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 fa57 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f91d 	bl	8004860 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 fa40 	bl	8000ab0 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <MX_ADC1_Init+0xb8>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <MX_ADC1_Init+0xb4>)
 800065a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_ADC1_Init+0xb4>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_ADC1_Init+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000682:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <MX_ADC1_Init+0xbc>)
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0xb4>)
 800068e:	2202      	movs	r2, #2
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_ADC1_Init+0xb4>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_ADC1_Init+0xb4>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_ADC1_Init+0xb4>)
 80006a2:	f000 fccb 	bl	800103c <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ac:	f000 fa00 	bl	8000ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80006b8:	2306      	movs	r3, #6
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_ADC1_Init+0xb4>)
 80006c2:	f000 fe2d 	bl	8001320 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006cc:	f000 f9f0 	bl	8000ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_ADC1_Init+0xb4>)
 80006de:	f000 fe1f 	bl	8001320 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e8:	f000 f9e2 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000208 	.word	0x20000208
 80006f8:	40012000 	.word	0x40012000
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f001 fec7 	bl	80024d0 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f9b2 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200001a0 	.word	0x200001a0
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <MX_I2S3_Init+0x58>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <MX_I2S3_Init+0x5c>)
 8000786:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2S3_Init+0x54>)
 800079c:	f001 ffdc 	bl	8002758 <HAL_I2S_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a6:	f000 f983 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000308 	.word	0x20000308
 80007b4:	40003c00 	.word	0x40003c00
 80007b8:	00017700 	.word	0x00017700

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_SPI1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SPI1_Init+0x64>)
 800080e:	f004 fb4f 	bl	8004eb0 <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 f94a 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200002b0 	.word	0x200002b0
 8000824:	40013000 	.word	0x40013000

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <MX_DMA_Init+0x3c>)
 8000838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DMA_Init+0x3c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2038      	movs	r0, #56	; 0x38
 8000850:	f001 f8e1 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000854:	2038      	movs	r0, #56	; 0x38
 8000856:	f001 f8fa 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a84      	ldr	r2, [pc, #528]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a7d      	ldr	r2, [pc, #500]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b7b      	ldr	r3, [pc, #492]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b77      	ldr	r3, [pc, #476]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a76      	ldr	r2, [pc, #472]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b70      	ldr	r3, [pc, #448]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a6f      	ldr	r2, [pc, #444]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b69      	ldr	r3, [pc, #420]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a68      	ldr	r2, [pc, #416]	; (8000a98 <MX_GPIO_Init+0x230>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b66      	ldr	r3, [pc, #408]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x230>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <MX_GPIO_Init+0x230>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	485c      	ldr	r0, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x234>)
 800092c:	f001 fdb6 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	485a      	ldr	r0, [pc, #360]	; (8000aa0 <MX_GPIO_Init+0x238>)
 8000936:	f001 fdb1 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093a:	2200      	movs	r2, #0
 800093c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000940:	4858      	ldr	r0, [pc, #352]	; (8000aa4 <MX_GPIO_Init+0x23c>)
 8000942:	f001 fdab 	bl	800249c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	484f      	ldr	r0, [pc, #316]	; (8000a9c <MX_GPIO_Init+0x234>)
 800095e:	f001 fc01 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4849      	ldr	r0, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x238>)
 800097a:	f001 fbf3 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON4_Pin BUTTON5_Pin
                           BUTTON6_Pin BUTTON7_Pin BUTTON8_Pin BUTTON9_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON4_Pin|BUTTON5_Pin
 800097e:	f640 3376 	movw	r3, #2934	; 0xb76
 8000982:	61fb      	str	r3, [r7, #28]
                          |BUTTON6_Pin|BUTTON7_Pin|BUTTON8_Pin|BUTTON9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4843      	ldr	r0, [pc, #268]	; (8000aa0 <MX_GPIO_Init+0x238>)
 8000994:	f001 fbe6 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000998:	2308      	movs	r3, #8
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a8:	2305      	movs	r3, #5
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x238>)
 80009b4:	f001 fbd6 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0x240>)
 80009ce:	f001 fbc9 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009d2:	2304      	movs	r3, #4
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4831      	ldr	r0, [pc, #196]	; (8000aac <MX_GPIO_Init+0x244>)
 80009e6:	f001 fbbd 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON12_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON12_Pin;
 80009ea:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4827      	ldr	r0, [pc, #156]	; (8000a9c <MX_GPIO_Init+0x234>)
 8000a00:	f001 fbb0 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a16:	2305      	movs	r3, #5
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4822      	ldr	r0, [pc, #136]	; (8000aac <MX_GPIO_Init+0x244>)
 8000a22:	f001 fb9f 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_B_2_Pin JOYSTICK_B_1_Pin BUTTON10_Pin BUTTON11_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_B_2_Pin|JOYSTICK_B_1_Pin|BUTTON10_Pin|BUTTON11_Pin;
 8000a26:	f640 4306 	movw	r3, #3078	; 0xc06
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0x23c>)
 8000a3c:	f001 fb92 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a40:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a44:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MX_GPIO_Init+0x23c>)
 8000a5a:	f001 fb83 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0x23c>)
 8000a72:	f001 fb77 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0x234>)
 8000a8c:	f001 fb6a 	bl	8002164 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 ff80 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <HAL_ADC_MspInit+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d158      	bne.n	8000be0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8000b66:	2306      	movs	r3, #6
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	f001 faf3 	bl	8002164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_ADC_MspInit+0xec>)
 8000b82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bc6:	f000 ff5d 	bl	8001a84 <HAL_DMA_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000bd0:	f7ff ff6e 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40012000 	.word	0x40012000
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	20000250 	.word	0x20000250
 8000bf8:	40026410 	.word	0x40026410

08000bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_I2C_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12c      	bne.n	8000c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <HAL_I2C_MspInit+0x8c>)
 8000c58:	f001 fa84 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <HAL_I2S_MspInit+0xf0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d15a      	bne.n	8000d72 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 ffaf 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cd8:	f7ff feea 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d30:	2310      	movs	r3, #16
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d40:	2306      	movs	r3, #6
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <HAL_I2S_MspInit+0xf8>)
 8000d4c:	f001 fa0a 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d62:	2306      	movs	r3, #6
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <HAL_I2S_MspInit+0xfc>)
 8000d6e:	f001 f9f9 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40003c00 	.word	0x40003c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020800 	.word	0x40020800

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12b      	bne.n	8000e06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x8c>)
 8000e02:	f001 f9af 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8a4 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <DMA2_Stream0_IRQHandler+0x10>)
 8000e76:	f000 ff0b 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000250 	.word	0x20000250

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f002 fa55 	bl	8003338 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000824 	.word	0x20000824

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee6:	f7ff ffd7 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f007 fb33 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fae7 	bl	80004c0 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000f00:	0800863c 	.word	0x0800863c
  ldr r2, =_sbss
 8000f04:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000f08:	20000c2c 	.word	0x20000c2c

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 fd61 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fdba 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fd79 	bl	8001a6a <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 fd41 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000350 	.word	0x20000350

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000350 	.word	0x20000350

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fd56 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fa68 	bl	8001564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x1e>
 80010de:	2302      	movs	r3, #2
 80010e0:	e0e9      	b.n	80012b6 <HAL_ADC_Start_DMA+0x1f2>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d018      	beq.n	800112a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001108:	4b6d      	ldr	r3, [pc, #436]	; (80012c0 <HAL_ADC_Start_DMA+0x1fc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6d      	ldr	r2, [pc, #436]	; (80012c4 <HAL_ADC_Start_DMA+0x200>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3b01      	subs	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001138:	d107      	bne.n	800114a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001148:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	f040 80a1 	bne.w	800129c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001184:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001198:	d106      	bne.n	80011a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f023 0206 	bic.w	r2, r3, #6
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
 80011a6:	e002      	b.n	80011ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HAL_ADC_Start_DMA+0x204>)
 80011b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	4a43      	ldr	r2, [pc, #268]	; (80012cc <HAL_ADC_Start_DMA+0x208>)
 80011c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <HAL_ADC_Start_DMA+0x20c>)
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ce:	4a41      	ldr	r2, [pc, #260]	; (80012d4 <HAL_ADC_Start_DMA+0x210>)
 80011d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	334c      	adds	r3, #76	; 0x4c
 8001206:	4619      	mov	r1, r3
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f000 fce8 	bl	8001be0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12a      	bne.n	8001272 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <HAL_ADC_Start_DMA+0x214>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d015      	beq.n	8001252 <HAL_ADC_Start_DMA+0x18e>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <HAL_ADC_Start_DMA+0x218>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d105      	bne.n	800123c <HAL_ADC_Start_DMA+0x178>
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_ADC_Start_DMA+0x204>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00a      	beq.n	8001252 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_ADC_Start_DMA+0x21c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d136      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_ADC_Start_DMA+0x204>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d130      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d129      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e020      	b.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_ADC_Start_DMA+0x214>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d11b      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e00b      	b.n	80012b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f043 0210 	orr.w	r2, r3, #16
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	40012300 	.word	0x40012300
 80012cc:	0800175d 	.word	0x0800175d
 80012d0:	08001817 	.word	0x08001817
 80012d4:	08001833 	.word	0x08001833
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40012100 	.word	0x40012100
 80012e0:	40012200 	.word	0x40012200

080012e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x1c>
 8001338:	2302      	movs	r3, #2
 800133a:	e105      	b.n	8001548 <HAL_ADC_ConfigChannel+0x228>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b09      	cmp	r3, #9
 800134a:	d925      	bls.n	8001398 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68d9      	ldr	r1, [r3, #12]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	3b1e      	subs	r3, #30
 8001362:	2207      	movs	r2, #7
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43da      	mvns	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	400a      	ands	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	4603      	mov	r3, r0
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4403      	add	r3, r0
 800138a:	3b1e      	subs	r3, #30
 800138c:	409a      	lsls	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	e022      	b.n	80013de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6919      	ldr	r1, [r3, #16]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	2207      	movs	r2, #7
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4403      	add	r3, r0
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d824      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b05      	subs	r3, #5
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b05      	subs	r3, #5
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	e04c      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d824      	bhi.n	8001482 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b23      	subs	r3, #35	; 0x23
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b23      	subs	r3, #35	; 0x23
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
 8001480:	e023      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	3b41      	subs	r3, #65	; 0x41
 8001494:	221f      	movs	r2, #31
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b41      	subs	r3, #65	; 0x41
 80014be:	fa00 f203 	lsl.w	r2, r0, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_ADC_ConfigChannel+0x234>)
 80014cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_ADC_ConfigChannel+0x238>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1cc>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b12      	cmp	r3, #18
 80014de:	d105      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_ADC_ConfigChannel+0x238>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d123      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d003      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x1e6>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b11      	cmp	r3, #17
 8001504:	d11b      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d111      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_ADC_ConfigChannel+0x23c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_ADC_ConfigChannel+0x240>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9a      	lsrs	r2, r3, #18
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40012300 	.word	0x40012300
 8001558:	40012000 	.word	0x40012000
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156c:	4b79      	ldr	r3, [pc, #484]	; (8001754 <ADC_Init+0x1f0>)
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	431a      	orrs	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	021a      	lsls	r2, r3, #8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <ADC_Init+0x1f4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d022      	beq.n	8001642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800160a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6899      	ldr	r1, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800162c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e00f      	b.n	8001662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0202 	bic.w	r2, r2, #2
 8001670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	005a      	lsls	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800169e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	3b01      	subs	r3, #1
 80016bc:	035a      	lsls	r2, r3, #13
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	e007      	b.n	80016d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	051a      	lsls	r2, r3, #20
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800170c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6899      	ldr	r1, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800171a:	025a      	lsls	r2, r3, #9
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	029a      	lsls	r2, r3, #10
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40012300 	.word	0x40012300
 8001758:	0f000001 	.word	0x0f000001

0800175c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13c      	bne.n	80017f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12b      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001794:	2b00      	cmp	r3, #0
 8001796:	d127      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d119      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0220 	bic.w	r2, r2, #32
 80017c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff fd7b 	bl	80012e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ee:	e00e      	b.n	800180e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fd85 	bl	800130c <HAL_ADC_ErrorCallback>
}
 8001802:	e004      	b.n	800180e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fd67 	bl	80012f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f043 0204 	orr.w	r2, r3, #4
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fd5a 	bl	800130c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff faa4 	bl	8000fdc <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e099      	b.n	8001bd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	e00f      	b.n	8001ae2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fa8b 	bl	8000fdc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d908      	bls.n	8001ae2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e078      	b.n	8001bd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e8      	bne.n	8001ac2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_DMA_Init+0x158>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4313      	orrs	r3, r2
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d117      	bne.n	8001ba6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fa6f 	bl	800206c <DMA_CheckFifoParam>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e016      	b.n	8001bd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fa26 	bl	8002000 <DMA_CalcBaseAndBitshift>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	f010803f 	.word	0xf010803f

08001be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Start_IT+0x26>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e040      	b.n	8001c88 <HAL_DMA_Start_IT+0xa8>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12f      	bne.n	8001c7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f9b8 	bl	8001fa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0216 	orr.w	r2, r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e005      	b.n	8001c86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_DMA_IRQHandler+0x258>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a92      	ldr	r2, [pc, #584]	; (8001eec <HAL_DMA_IRQHandler+0x25c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2208      	movs	r2, #8
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	2208      	movs	r2, #8
 8001cea:	409a      	lsls	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2201      	movs	r2, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d012      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	2204      	movs	r2, #4
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d012      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0204 	orr.w	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d043      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d03c      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
 8001dbe:	e01f      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e016      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0208 	bic.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2220      	movs	r2, #32
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 808e 	beq.w	8001f2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8086 	beq.w	8001f2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2220      	movs	r2, #32
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d136      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0216 	bic.w	r2, r2, #22
 8001e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_DMA_IRQHandler+0x1da>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0208 	bic.w	r2, r2, #8
 8001e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	223f      	movs	r2, #63	; 0x3f
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d07d      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
        }
        return;
 8001ea6:	e078      	b.n	8001f9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d030      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e02b      	b.n	8001f2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e022      	b.n	8001f2e <HAL_DMA_IRQHandler+0x29e>
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0210 	bic.w	r2, r2, #16
 8001f0c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d032      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d022      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2205      	movs	r2, #5
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d307      	bcc.n	8001f76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f2      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x2ca>
 8001f74:	e000      	b.n	8001f78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f76:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f9a:	bf00      	nop
    }
  }
}
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop

08001fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d108      	bne.n	8001fe4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fe2:	e007      	b.n	8001ff4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3b10      	subs	r3, #16
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <DMA_CalcBaseAndBitshift+0x64>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <DMA_CalcBaseAndBitshift+0x68>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d909      	bls.n	8002042 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	1d1a      	adds	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	; 0x58
 8002040:	e007      	b.n	8002052 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	aaaaaaab 	.word	0xaaaaaaab
 8002068:	08008624 	.word	0x08008624

0800206c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11f      	bne.n	80020c6 <DMA_CheckFifoParam+0x5a>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d856      	bhi.n	800213a <DMA_CheckFifoParam+0xce>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x28>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020b7 	.word	0x080020b7
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	0800213b 	.word	0x0800213b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d046      	beq.n	800213e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b4:	e043      	b.n	800213e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020be:	d140      	bne.n	8002142 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e03d      	b.n	8002142 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ce:	d121      	bne.n	8002114 <DMA_CheckFifoParam+0xa8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d837      	bhi.n	8002146 <DMA_CheckFifoParam+0xda>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x70>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002105 	.word	0x08002105
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e030      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d025      	beq.n	800214a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002102:	e022      	b.n	800214a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002112:	e01c      	b.n	800214e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d903      	bls.n	8002122 <DMA_CheckFifoParam+0xb6>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d003      	beq.n	8002128 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002120:	e018      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      break;
 8002126:	e015      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e00b      	b.n	8002152 <DMA_CheckFifoParam+0xe6>
      break;
 800213a:	bf00      	nop
 800213c:	e00a      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e008      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e006      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e004      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e002      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;   
 800214e:	bf00      	nop
 8002150:	e000      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
    }
  } 
  
  return status; 
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e16b      	b.n	8002458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 815a 	bne.w	8002452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b4 	beq.w	8002452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b60      	ldr	r3, [pc, #384]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a5f      	ldr	r2, [pc, #380]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_GPIO_Init+0x30c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <HAL_GPIO_Init+0x310>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x314>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_GPIO_Init+0x318>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_GPIO_Init+0x31c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_GPIO_Init+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <HAL_GPIO_Init+0x324>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_GPIO_Init+0x328>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_GPIO_Init+0x32c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x20a>
 800236a:	2307      	movs	r3, #7
 800236c:	e00e      	b.n	800238c <HAL_GPIO_Init+0x228>
 800236e:	2308      	movs	r3, #8
 8002370:	e00c      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002372:	2306      	movs	r3, #6
 8002374:	e00a      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002376:	2305      	movs	r3, #5
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237a:	2304      	movs	r3, #4
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x228>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	; (8002474 <HAL_GPIO_Init+0x310>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ce:	4a32      	ldr	r2, [pc, #200]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_GPIO_Init+0x334>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_GPIO_Init+0x334>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f ae90 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40021400 	.word	0x40021400
 8002490:	40021800 	.word	0x40021800
 8002494:	40021c00 	.word	0x40021c00
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e12b      	b.n	800273a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fb80 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002534:	f002 fb68 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a81      	ldr	r2, [pc, #516]	; (8002744 <HAL_I2C_Init+0x274>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d807      	bhi.n	8002554 <HAL_I2C_Init+0x84>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a80      	ldr	r2, [pc, #512]	; (8002748 <HAL_I2C_Init+0x278>)
 8002548:	4293      	cmp	r3, r2
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e006      	b.n	8002562 <HAL_I2C_Init+0x92>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a7d      	ldr	r2, [pc, #500]	; (800274c <HAL_I2C_Init+0x27c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0e7      	b.n	800273a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a78      	ldr	r2, [pc, #480]	; (8002750 <HAL_I2C_Init+0x280>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9b      	lsrs	r3, r3, #18
 8002574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_I2C_Init+0x274>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d802      	bhi.n	80025a4 <HAL_I2C_Init+0xd4>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	e009      	b.n	80025b8 <HAL_I2C_Init+0xe8>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	4a69      	ldr	r2, [pc, #420]	; (8002754 <HAL_I2C_Init+0x284>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	3301      	adds	r3, #1
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	495c      	ldr	r1, [pc, #368]	; (8002744 <HAL_I2C_Init+0x274>)
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d819      	bhi.n	800260c <HAL_I2C_Init+0x13c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e59      	subs	r1, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e6:	1c59      	adds	r1, r3, #1
 80025e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025ec:	400b      	ands	r3, r1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_I2C_Init+0x138>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e59      	subs	r1, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	e051      	b.n	80026ac <HAL_I2C_Init+0x1dc>
 8002608:	2304      	movs	r3, #4
 800260a:	e04f      	b.n	80026ac <HAL_I2C_Init+0x1dc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d111      	bne.n	8002638 <HAL_I2C_Init+0x168>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e012      	b.n	800265e <HAL_I2C_Init+0x18e>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1e58      	subs	r0, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	0099      	lsls	r1, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x196>
 8002662:	2301      	movs	r3, #1
 8002664:	e022      	b.n	80026ac <HAL_I2C_Init+0x1dc>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10e      	bne.n	800268c <HAL_I2C_Init+0x1bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e58      	subs	r0, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	440b      	add	r3, r1
 800267c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002680:	3301      	adds	r3, #1
 8002682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	e00f      	b.n	80026ac <HAL_I2C_Init+0x1dc>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	0099      	lsls	r1, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6809      	ldr	r1, [r1, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6911      	ldr	r1, [r2, #16]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	000186a0 	.word	0x000186a0
 8002748:	001e847f 	.word	0x001e847f
 800274c:	003d08ff 	.word	0x003d08ff
 8002750:	431bde83 	.word	0x431bde83
 8002754:	10624dd3 	.word	0x10624dd3

08002758 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e128      	b.n	80029bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a90      	ldr	r2, [pc, #576]	; (80029c4 <HAL_I2S_Init+0x26c>)
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fa81 	bl	8000c8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027a0:	f023 030f 	bic.w	r3, r3, #15
 80027a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2202      	movs	r2, #2
 80027ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d060      	beq.n	8002878 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027be:	2310      	movs	r3, #16
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e001      	b.n	80027c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d802      	bhi.n	80027d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f002 fb0c 	bl	8004df4 <HAL_RCCEx_GetPeriphCLKFreq>
 80027dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e6:	d125      	bne.n	8002834 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	3305      	adds	r3, #5
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e01f      	b.n	8002852 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	fbb2 f2f3 	udiv	r2, r2, r3
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	461a      	mov	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	3305      	adds	r3, #5
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	e00e      	b.n	8002852 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	3305      	adds	r3, #5
 8002850:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a5c      	ldr	r2, [pc, #368]	; (80029c8 <HAL_I2S_Init+0x270>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e003      	b.n	8002880 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002878:	2302      	movs	r3, #2
 800287a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d902      	bls.n	800288c <HAL_I2S_Init+0x134>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2bff      	cmp	r3, #255	; 0xff
 800288a:	d907      	bls.n	800289c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e08f      	b.n	80029bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	ea42 0103 	orr.w	r1, r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028ba:	f023 030f 	bic.w	r3, r3, #15
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6851      	ldr	r1, [r2, #4]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6892      	ldr	r2, [r2, #8]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68d2      	ldr	r2, [r2, #12]
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6992      	ldr	r2, [r2, #24]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d161      	bne.n	80029ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_I2S_Init+0x274>)
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_I2S_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_I2S_Init+0x1a4>
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_I2S_Init+0x27c>)
 80028fa:	e001      	b.n	8002900 <HAL_I2S_Init+0x1a8>
 80028fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	4932      	ldr	r1, [pc, #200]	; (80029d0 <HAL_I2S_Init+0x278>)
 8002908:	428a      	cmp	r2, r1
 800290a:	d101      	bne.n	8002910 <HAL_I2S_Init+0x1b8>
 800290c:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <HAL_I2S_Init+0x27c>)
 800290e:	e001      	b.n	8002914 <HAL_I2S_Init+0x1bc>
 8002910:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002914:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002918:	f023 030f 	bic.w	r3, r3, #15
 800291c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_I2S_Init+0x278>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_I2S_Init+0x1d4>
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_I2S_Init+0x27c>)
 800292a:	e001      	b.n	8002930 <HAL_I2S_Init+0x1d8>
 800292c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002930:	2202      	movs	r2, #2
 8002932:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_I2S_Init+0x278>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_I2S_Init+0x1ea>
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_I2S_Init+0x27c>)
 8002940:	e001      	b.n	8002946 <HAL_I2S_Init+0x1ee>
 8002942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002952:	d003      	beq.n	800295c <HAL_I2S_Init+0x204>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e001      	b.n	8002968 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002972:	4313      	orrs	r3, r2
 8002974:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800297c:	4313      	orrs	r3, r2
 800297e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002986:	4313      	orrs	r3, r2
 8002988:	b29a      	uxth	r2, r3
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	4313      	orrs	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002994:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_I2S_Init+0x278>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_I2S_Init+0x24c>
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_I2S_Init+0x27c>)
 80029a2:	e001      	b.n	80029a8 <HAL_I2S_Init+0x250>
 80029a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a8:	897a      	ldrh	r2, [r7, #10]
 80029aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	08002acf 	.word	0x08002acf
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	08002be5 	.word	0x08002be5
 80029d0:	40003800 	.word	0x40003800
 80029d4:	40003400 	.word	0x40003400

080029d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffb8 	bl	80029d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	b292      	uxth	r2, r2
 8002a84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10e      	bne.n	8002ac6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff93 	bl	80029ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d13a      	bne.n	8002b60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d109      	bne.n	8002b08 <I2S_IRQHandler+0x3a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d102      	bne.n	8002b08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffb4 	bl	8002a70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d126      	bne.n	8002b60 <I2S_IRQHandler+0x92>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d11f      	bne.n	8002b60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ff50 	bl	8002a00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d136      	bne.n	8002bda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d109      	bne.n	8002b8a <I2S_IRQHandler+0xbc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d102      	bne.n	8002b8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff45 	bl	8002a14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d122      	bne.n	8002bda <I2S_IRQHandler+0x10c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d11b      	bne.n	8002bda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff13 	bl	8002a00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4aa2      	ldr	r2, [pc, #648]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c00:	e001      	b.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a9b      	ldr	r2, [pc, #620]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c1c:	4b9a      	ldr	r3, [pc, #616]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c1e:	e001      	b.n	8002c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d004      	beq.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8099 	bne.w	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d107      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f925 	bl	8002ea0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9c8 	bl	8003000 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d13a      	bne.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d035      	beq.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a7e      	ldr	r2, [pc, #504]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c8e:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c90:	e001      	b.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4979      	ldr	r1, [pc, #484]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c9e:	428b      	cmp	r3, r1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ca2:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ca4:	e001      	b.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fe88 	bl	8002a00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	f040 80be 	bne.w	8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80b8 	beq.w	8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a59      	ldr	r2, [pc, #356]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d22:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d24:	e001      	b.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4954      	ldr	r1, [pc, #336]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d32:	428b      	cmp	r3, r1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d36:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d38:	e001      	b.n	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fe4a 	bl	8002a00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d6c:	e084      	b.n	8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d107      	bne.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8be 	bl	8002f04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8fd 	bl	8002f9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d12f      	bne.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02a      	beq.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dc4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2e      	ldr	r2, [pc, #184]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd2:	e001      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002de6:	e001      	b.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fdfa 	bl	8002a00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d131      	bne.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02c      	beq.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e2c:	e001      	b.n	8002e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e3a:	428b      	cmp	r3, r1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e40:	e001      	b.n	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e5a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fdc5 	bl	8002a00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e76:	e000      	b.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e78:	bf00      	nop
}
 8002e7a:	bf00      	nop
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40003800 	.word	0x40003800
 8002e88:	40003400 	.word	0x40003400

08002e8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c99      	adds	r1, r3, #2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6251      	str	r1, [r2, #36]	; 0x24
 8002eb2:	881a      	ldrh	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ffc9 	bl	8002e8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c99      	adds	r1, r3, #2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6251      	str	r1, [r2, #36]	; 0x24
 8002f16:	8819      	ldrh	r1, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <I2SEx_TxISR_I2SExt+0x90>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <I2SEx_TxISR_I2SExt+0x22>
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <I2SEx_TxISR_I2SExt+0x94>)
 8002f24:	e001      	b.n	8002f2a <I2SEx_TxISR_I2SExt+0x26>
 8002f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d121      	bne.n	8002f8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <I2SEx_TxISR_I2SExt+0x90>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <I2SEx_TxISR_I2SExt+0x50>
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <I2SEx_TxISR_I2SExt+0x94>)
 8002f52:	e001      	b.n	8002f58 <I2SEx_TxISR_I2SExt+0x54>
 8002f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	490d      	ldr	r1, [pc, #52]	; (8002f94 <I2SEx_TxISR_I2SExt+0x90>)
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d101      	bne.n	8002f68 <I2SEx_TxISR_I2SExt+0x64>
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <I2SEx_TxISR_I2SExt+0x94>)
 8002f66:	e001      	b.n	8002f6c <I2SEx_TxISR_I2SExt+0x68>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff81 	bl	8002e8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40003800 	.word	0x40003800
 8002f98:	40003400 	.word	0x40003400

08002f9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68d8      	ldr	r0, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	1c99      	adds	r1, r3, #2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fb4:	b282      	uxth	r2, r0
 8002fb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff4a 	bl	8002e8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <I2SEx_RxISR_I2SExt+0x90>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <I2SEx_RxISR_I2SExt+0x16>
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <I2SEx_RxISR_I2SExt+0x94>)
 8003014:	e001      	b.n	800301a <I2SEx_RxISR_I2SExt+0x1a>
 8003016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301a:	68d8      	ldr	r0, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	1c99      	adds	r1, r3, #2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003026:	b282      	uxth	r2, r0
 8003028:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d121      	bne.n	8003086 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <I2SEx_RxISR_I2SExt+0x90>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d101      	bne.n	8003050 <I2SEx_RxISR_I2SExt+0x50>
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <I2SEx_RxISR_I2SExt+0x94>)
 800304e:	e001      	b.n	8003054 <I2SEx_RxISR_I2SExt+0x54>
 8003050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <I2SEx_RxISR_I2SExt+0x90>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d101      	bne.n	8003064 <I2SEx_RxISR_I2SExt+0x64>
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <I2SEx_RxISR_I2SExt+0x94>)
 8003062:	e001      	b.n	8003068 <I2SEx_RxISR_I2SExt+0x68>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800306c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff03 	bl	8002e8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40003800 	.word	0x40003800
 8003094:	40003400 	.word	0x40003400

08003098 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b08f      	sub	sp, #60	; 0x3c
 800309c:	af0a      	add	r7, sp, #40	; 0x28
 800309e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e10f      	b.n	80032ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f004 ff25 	bl	8007f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 f87e 	bl	80051ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	687e      	ldr	r6, [r7, #4]
 80030f6:	466d      	mov	r5, sp
 80030f8:	f106 0410 	add.w	r4, r6, #16
 80030fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003104:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003108:	e885 0003 	stmia.w	r5, {r0, r1}
 800310c:	1d33      	adds	r3, r6, #4
 800310e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f001 ff56 	bl	8004fc2 <USB_CoreInit>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d0      	b.n	80032ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f002 f86c 	bl	800520c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e04a      	b.n	80031d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	333d      	adds	r3, #61	; 0x3d
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	333c      	adds	r3, #60	; 0x3c
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	b298      	uxth	r0, r3
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3342      	adds	r3, #66	; 0x42
 8003176:	4602      	mov	r2, r0
 8003178:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	333f      	adds	r3, #63	; 0x3f
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3344      	adds	r3, #68	; 0x44
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3348      	adds	r3, #72	; 0x48
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3350      	adds	r3, #80	; 0x50
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	3301      	adds	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d3af      	bcc.n	800313a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	e044      	b.n	800326a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	3301      	adds	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3b5      	bcc.n	80031e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	687e      	ldr	r6, [r7, #4]
 800327c:	466d      	mov	r5, sp
 800327e:	f106 0410 	add.w	r4, r6, #16
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800328e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003292:	1d33      	adds	r3, r6, #4
 8003294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	f002 f804 	bl	80052a4 <USB_DevInit>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00d      	b.n	80032ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 f880 	bl	80063c8 <USB_DevDisconnect>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_PCD_Start+0x1c>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e020      	b.n	8003330 <HAL_PCD_Start+0x5e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d109      	bne.n	8003312 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003302:	2b01      	cmp	r3, #1
 8003304:	d005      	beq.n	8003312 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f001 ff56 	bl	80051c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 f830 	bl	8006386 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08d      	sub	sp, #52	; 0x34
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f003 f8ee 	bl	8006530 <USB_GetMode>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 839d 	bne.w	8003a96 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 f852 	bl	800640a <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8393 	beq.w	8003a94 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 f849 	bl	800640a <USB_ReadInterrupts>
 8003378:	4603      	mov	r3, r0
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 0202 	and.w	r2, r2, #2
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 f837 	bl	800640a <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d161      	bne.n	800346a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0210 	bic.w	r2, r2, #16
 80033b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	0c5b      	lsrs	r3, r3, #17
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d124      	bne.n	800342c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d035      	beq.n	800345a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	6a38      	ldr	r0, [r7, #32]
 8003402:	f002 fe6e 	bl	80060e2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	441a      	add	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003424:	441a      	add	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	619a      	str	r2, [r3, #24]
 800342a:	e016      	b.n	800345a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	0c5b      	lsrs	r3, r3, #17
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	2b06      	cmp	r3, #6
 8003436:	d110      	bne.n	800345a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800343e:	2208      	movs	r2, #8
 8003440:	4619      	mov	r1, r3
 8003442:	6a38      	ldr	r0, [r7, #32]
 8003444:	f002 fe4d 	bl	80060e2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003454:	441a      	add	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0210 	orr.w	r2, r2, #16
 8003468:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f002 ffcb 	bl	800640a <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800347e:	d16e      	bne.n	800355e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f002 ffd1 	bl	8006430 <USB_ReadDevAllOutEpInterrupt>
 800348e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003490:	e062      	b.n	8003558 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d057      	beq.n	800354c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fff6 	bl	8006498 <USB_ReadDevOutEPInterrupt>
 80034ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00c      	beq.n	80034d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	2301      	movs	r3, #1
 80034c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fd99 	bl	8004004 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	461a      	mov	r2, r3
 80034ea:	2308      	movs	r3, #8
 80034ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fe93 	bl	800421c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	2310      	movs	r3, #16
 8003510:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	2320      	movs	r3, #32
 800352c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003544:	461a      	mov	r2, r3
 8003546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800354a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	3301      	adds	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d199      	bne.n	8003492 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 ff51 	bl	800640a <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003572:	f040 80c0 	bne.w	80036f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f002 ff72 	bl	8006464 <USB_ReadDevAllInEpInterrupt>
 8003580:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003586:	e0b2      	b.n	80036ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80a7 	beq.w	80036e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 ff98 	bl	80064d4 <USB_ReadDevInEPInterrupt>
 80035a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d057      	beq.n	8003660 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	2201      	movs	r2, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69f9      	ldr	r1, [r7, #28]
 80035cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d0:	4013      	ands	r3, r2
 80035d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	461a      	mov	r2, r3
 80035e2:	2301      	movs	r3, #1
 80035e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d132      	bne.n	8003654 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3348      	adds	r3, #72	; 0x48
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4403      	add	r3, r0
 800360e:	3344      	adds	r3, #68	; 0x44
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4419      	add	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4403      	add	r3, r0
 8003622:	3348      	adds	r3, #72	; 0x48
 8003624:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <HAL_PCD_IRQHandler+0x31c>
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3350      	adds	r3, #80	; 0x50
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f002 ffa0 	bl	8006594 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fcf9 	bl	8008052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003676:	461a      	mov	r2, r3
 8003678:	2308      	movs	r3, #8
 800367a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	461a      	mov	r2, r3
 8003694:	2310      	movs	r3, #16
 8003696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	461a      	mov	r2, r3
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ca:	461a      	mov	r2, r3
 80036cc:	2302      	movs	r3, #2
 80036ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fc03 	bl	8003ee8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	3301      	adds	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f af49 	bne.w	8003588 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 fe85 	bl	800640a <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800370a:	d122      	bne.n	8003752 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003732:	2100      	movs	r1, #0
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fe0f 	bl	8004358 <HAL_PCDEx_LPM_Callback>
 800373a:	e002      	b.n	8003742 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f004 fcff 	bl	8008140 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f002 fe57 	bl	800640a <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	d112      	bne.n	800378e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f004 fcbb 	bl	80080f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800378c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fe39 	bl	800640a <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	f040 80c7 	bne.w	8003934 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2110      	movs	r1, #16
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fed3 	bl	800556c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	e056      	b.n	800387a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800381a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800381e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003832:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003852:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003872:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	3301      	adds	r3, #1
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d3a3      	bcc.n	80037cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003892:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003896:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f043 030b 	orr.w	r3, r3, #11
 80038b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f043 030b 	orr.w	r3, r3, #11
 80038ca:	6453      	str	r3, [r2, #68]	; 0x44
 80038cc:	e015      	b.n	80038fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f4:	f043 030b 	orr.w	r3, r3, #11
 80038f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003908:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800390c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800391e:	461a      	mov	r2, r3
 8003920:	f002 fe38 	bl	8006594 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fd66 	bl	800640a <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003948:	d124      	bne.n	8003994 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fdfc 	bl	800654c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fe64 	bl	8005626 <USB_GetDevSpeed>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	f001 f941 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 800396e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	4620      	mov	r0, r4
 800397a:	f001 fb83 	bl	8005084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f004 fb8f 	bl	80080a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003992:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f002 fd36 	bl	800640a <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d10a      	bne.n	80039be <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f004 fb6c 	bl	8008086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 0208 	and.w	r2, r2, #8
 80039bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fd21 	bl	800640a <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d10f      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 fbce 	bl	8008180 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 fd06 	bl	800640a <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a08:	d10f      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f004 fba1 	bl	800815c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 fceb 	bl	800640a <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d10a      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f004 fbaf 	bl	80081a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fcd5 	bl	800640a <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d115      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f004 fb9f 	bl	80081c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	e000      	b.n	8003a96 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a94:	bf00      	nop
    }
  }
}
 8003a96:	3734      	adds	r7, #52	; 0x34
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_PCD_SetAddress+0x1a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e013      	b.n	8003ade <HAL_PCD_SetAddress+0x42>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f002 fc33 	bl	800633a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	4608      	mov	r0, r1
 8003af0:	4611      	mov	r1, r2
 8003af2:	461a      	mov	r2, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	70fb      	strb	r3, [r7, #3]
 8003af8:	460b      	mov	r3, r1
 8003afa:	803b      	strh	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0f      	bge.n	8003b2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	; 0x38
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	705a      	strb	r2, [r3, #1]
 8003b2a:	e00f      	b.n	8003b4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b58:	883a      	ldrh	r2, [r7, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	78ba      	ldrb	r2, [r7, #2]
 8003b62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b76:	78bb      	ldrb	r3, [r7, #2]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d102      	bne.n	8003b82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_PCD_EP_Open+0xaa>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e00e      	b.n	8003bae <HAL_PCD_EP_Open+0xc8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fd66 	bl	8005670 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bac:	7afb      	ldrb	r3, [r7, #11]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da0f      	bge.n	8003bea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	705a      	strb	r2, [r3, #1]
 8003be8:	e00f      	b.n	8003c0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_Close+0x6e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e00e      	b.n	8003c42 <HAL_PCD_EP_Close+0x8c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 fda4 	bl	8005780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	460b      	mov	r3, r1
 8003c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d102      	bne.n	8003ca6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	f002 f87f 	bl	8005dc0 <USB_EP0StartXfer>
 8003cc2:	e008      	b.n	8003cd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	f001 fe31 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	460b      	mov	r3, r1
 8003cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3338      	adds	r3, #56	; 0x38
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	f002 f835 	bl	8005dc0 <USB_EP0StartXfer>
 8003d56:	e008      	b.n	8003d6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	f001 fde7 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d901      	bls.n	8003d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e050      	b.n	8003e34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da0f      	bge.n	8003dba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	3338      	adds	r3, #56	; 0x38
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	705a      	strb	r2, [r3, #1]
 8003db8:	e00d      	b.n	8003dd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_SetStall+0x82>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e01e      	b.n	8003e34 <HAL_PCD_EP_SetStall+0xc0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 f9c4 	bl	8006192 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	b2d9      	uxtb	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e24:	461a      	mov	r2, r3
 8003e26:	f002 fbb5 	bl	8006594 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d901      	bls.n	8003e5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e042      	b.n	8003ee0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da0f      	bge.n	8003e82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	705a      	strb	r2, [r3, #1]
 8003e80:	e00f      	b.n	8003ea2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_PCD_EP_ClrStall+0x86>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e00e      	b.n	8003ee0 <HAL_PCD_EP_ClrStall+0xa4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f002 f9cc 	bl	800626e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	3338      	adds	r3, #56	; 0x38
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d901      	bls.n	8003f20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e06c      	b.n	8003ffa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d902      	bls.n	8003f3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3303      	adds	r3, #3
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f44:	e02b      	b.n	8003f9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d902      	bls.n	8003f62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3303      	adds	r3, #3
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68d9      	ldr	r1, [r3, #12]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4603      	mov	r3, r0
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f002 f870 	bl	8006066 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d809      	bhi.n	8003fc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d203      	bcs.n	8003fc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1be      	bne.n	8003f46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d811      	bhi.n	8003ff8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	2201      	movs	r2, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	6939      	ldr	r1, [r7, #16]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	333c      	adds	r3, #60	; 0x3c
 800401c:	3304      	adds	r3, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b01      	cmp	r3, #1
 8004038:	f040 80a0 	bne.w	800417c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d015      	beq.n	8004072 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a72      	ldr	r2, [pc, #456]	; (8004214 <PCD_EP_OutXfrComplete_int+0x210>)
 800404a:	4293      	cmp	r3, r2
 800404c:	f240 80dd 	bls.w	800420a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80d7 	beq.w	800420a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	461a      	mov	r2, r3
 800406a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406e:	6093      	str	r3, [r2, #8]
 8004070:	e0cb      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	461a      	mov	r2, r3
 800408a:	2320      	movs	r3, #32
 800408c:	6093      	str	r3, [r2, #8]
 800408e:	e0bc      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 80b7 	bne.w	800420a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <PCD_EP_OutXfrComplete_int+0x210>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d90f      	bls.n	80040c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	e0a2      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	440b      	add	r3, r1
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4403      	add	r3, r0
 80040fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4403      	add	r3, r0
 8004122:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4419      	add	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4403      	add	r3, r0
 8004138:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800413c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d114      	bne.n	800416e <PCD_EP_OutXfrComplete_int+0x16a>
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004166:	461a      	mov	r2, r3
 8004168:	2101      	movs	r1, #1
 800416a:	f002 fa13 	bl	8006594 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4619      	mov	r1, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f003 ff51 	bl	800801c <HAL_PCD_DataOutStageCallback>
 800417a:	e046      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a26      	ldr	r2, [pc, #152]	; (8004218 <PCD_EP_OutXfrComplete_int+0x214>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d124      	bne.n	80041ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	461a      	mov	r2, r3
 800419c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a0:	6093      	str	r3, [r2, #8]
 80041a2:	e032      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	461a      	mov	r2, r3
 80041bc:	2320      	movs	r3, #32
 80041be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f003 ff28 	bl	800801c <HAL_PCD_DataOutStageCallback>
 80041cc:	e01d      	b.n	800420a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d114      	bne.n	80041fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041f6:	461a      	mov	r2, r3
 80041f8:	2100      	movs	r1, #0
 80041fa:	f002 f9cb 	bl	8006594 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f003 ff09 	bl	800801c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	4f54300a 	.word	0x4f54300a
 8004218:	4f54310a 	.word	0x4f54310a

0800421c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d90e      	bls.n	8004270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f003 fec1 	bl	8007ff8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90c      	bls.n	8004298 <PCD_EP_OutSetupPacket_int+0x7c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004290:	461a      	mov	r2, r3
 8004292:	2101      	movs	r1, #1
 8004294:	f002 f97e 	bl	8006594 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	4f54300a 	.word	0x4f54300a

080042a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042c6:	883b      	ldrh	r3, [r7, #0]
 80042c8:	0419      	lsls	r1, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
 80042d4:	e028      	b.n	8004328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e00d      	b.n	8004306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	3340      	adds	r3, #64	; 0x40
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	3301      	adds	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	3b01      	subs	r3, #1
 800430c:	429a      	cmp	r2, r3
 800430e:	d3ec      	bcc.n	80042ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004310:	883b      	ldrh	r3, [r7, #0]
 8004312:	0418      	lsls	r0, r3, #16
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	3b01      	subs	r3, #1
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4302      	orrs	r2, r0
 8004320:	3340      	adds	r3, #64	; 0x40
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e264      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d075      	beq.n	800447a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	4ba3      	ldr	r3, [pc, #652]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4ba0      	ldr	r3, [pc, #640]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b9d      	ldr	r3, [pc, #628]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b99      	ldr	r3, [pc, #612]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e23f      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x74>
 80043d6:	4b91      	ldr	r3, [pc, #580]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a90      	ldr	r2, [pc, #576]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x98>
 80043ee:	4b8b      	ldr	r3, [pc, #556]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a8a      	ldr	r2, [pc, #552]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a87      	ldr	r2, [pc, #540]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 8004408:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a83      	ldr	r2, [pc, #524]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a80      	ldr	r2, [pc, #512]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fdd8 	bl	8000fdc <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fc fdd4 	bl	8000fdc <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e204      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xc0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc fdc4 	bl	8000fdc <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc fdc0 	bl	8000fdc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1f0      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b6c      	ldr	r3, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b62      	ldr	r3, [pc, #392]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b5f      	ldr	r3, [pc, #380]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b5c      	ldr	r3, [pc, #368]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c4      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4952      	ldr	r1, [pc, #328]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_OscConfig+0x2b0>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fc fd79 	bl	8000fdc <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fc fd75 	bl	8000fdc <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1a5      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b43      	ldr	r3, [pc, #268]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4940      	ldr	r1, [pc, #256]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_OscConfig+0x2b0>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc fd58 	bl	8000fdc <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004530:	f7fc fd54 	bl	8000fdc <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e184      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x2b4>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fc fd38 	bl	8000fdc <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004570:	f7fc fd34 	bl	8000fdc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e164      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x200>
 800458e:	e015      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <HAL_RCC_OscConfig+0x2b4>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fc fd21 	bl	8000fdc <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459e:	f7fc fd1d 	bl	8000fdc <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e14d      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a0 	beq.w	800470a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d121      	bne.n	800464a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004612:	f7fc fce3 	bl	8000fdc <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	e011      	b.n	800463e <HAL_RCC_OscConfig+0x2ce>
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	42470000 	.word	0x42470000
 8004624:	42470e80 	.word	0x42470e80
 8004628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462c:	f7fc fcd6 	bl	8000fdc <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e106      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCC_OscConfig+0x4e4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x2f0>
 8004652:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a80      	ldr	r2, [pc, #512]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	e01c      	b.n	800469a <HAL_RCC_OscConfig+0x32a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d10c      	bne.n	8004682 <HAL_RCC_OscConfig+0x312>
 8004668:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a7a      	ldr	r2, [pc, #488]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	4b78      	ldr	r3, [pc, #480]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e00b      	b.n	800469a <HAL_RCC_OscConfig+0x32a>
 8004682:	4b75      	ldr	r3, [pc, #468]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a74      	ldr	r2, [pc, #464]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	4b72      	ldr	r3, [pc, #456]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a71      	ldr	r2, [pc, #452]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d015      	beq.n	80046ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fc fc9b 	bl	8000fdc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fc fc97 	bl	8000fdc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0c5      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	4b65      	ldr	r3, [pc, #404]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ee      	beq.n	80046aa <HAL_RCC_OscConfig+0x33a>
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ce:	f7fc fc85 	bl	8000fdc <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fc fc81 	bl	8000fdc <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0af      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ec:	4b5a      	ldr	r3, [pc, #360]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a55      	ldr	r2, [pc, #340]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 809b 	beq.w	800484a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d05c      	beq.n	80047da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d141      	bne.n	80047ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004728:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x4ec>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fc fc55 	bl	8000fdc <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004736:	f7fc fc51 	bl	8000fdc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e081      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	019b      	lsls	r3, r3, #6
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	4937      	ldr	r1, [pc, #220]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <HAL_RCC_OscConfig+0x4ec>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc fc2a 	bl	8000fdc <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fc fc26 	bl	8000fdc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e056      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x41c>
 80047aa:	e04e      	b.n	800484a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCC_OscConfig+0x4ec>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fc fc13 	bl	8000fdc <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fc fc0f 	bl	8000fdc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e03f      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x44a>
 80047d8:	e037      	b.n	800484a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e032      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e6:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <HAL_RCC_OscConfig+0x4e8>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d028      	beq.n	8004846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d121      	bne.n	8004846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d11a      	bne.n	8004846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481e:	4293      	cmp	r3, r2
 8004820:	d111      	bne.n	8004846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	3b01      	subs	r3, #1
 8004830:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40007000 	.word	0x40007000
 8004858:	40023800 	.word	0x40023800
 800485c:	42470060 	.word	0x42470060

08004860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0cc      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90c      	bls.n	800489c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b65      	ldr	r3, [pc, #404]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0b8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048cc:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	494d      	ldr	r1, [pc, #308]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d044      	beq.n	8004980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d003      	beq.n	800491e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e067      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4934      	ldr	r1, [pc, #208]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc fb44 	bl	8000fdc <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fb40 	bl	8000fdc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e04f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d20c      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4916      	ldr	r1, [pc, #88]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490e      	ldr	r1, [pc, #56]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049e6:	f000 f821 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490a      	ldr	r1, [pc, #40]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc faa4 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	0800860c 	.word	0x0800860c
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80bd 	bhi.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e0b7      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a62:	60bb      	str	r3, [r7, #8]
       break;
 8004a64:	e0b7      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a68:	60bb      	str	r3, [r7, #8]
      break;
 8004a6a:	e0b4      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04d      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	ea02 0800 	and.w	r8, r2, r0
 8004a9a:	ea03 0901 	and.w	r9, r3, r1
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	014b      	lsls	r3, r1, #5
 8004aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ab0:	0142      	lsls	r2, r0, #5
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	ebb0 0008 	subs.w	r0, r0, r8
 8004aba:	eb61 0109 	sbc.w	r1, r1, r9
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	018b      	lsls	r3, r1, #6
 8004ac8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004acc:	0182      	lsls	r2, r0, #6
 8004ace:	1a12      	subs	r2, r2, r0
 8004ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	00d9      	lsls	r1, r3, #3
 8004ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae2:	00d0      	lsls	r0, r2, #3
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	eb12 0208 	adds.w	r2, r2, r8
 8004aec:	eb43 0309 	adc.w	r3, r3, r9
 8004af0:	f04f 0000 	mov.w	r0, #0
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	0259      	lsls	r1, r3, #9
 8004afa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004afe:	0250      	lsls	r0, r2, #9
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f7fb fb5a 	bl	80001c8 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e04a      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	461a      	mov	r2, r3
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	ea02 0400 	and.w	r4, r2, r0
 8004b36:	ea03 0501 	and.w	r5, r3, r1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	014b      	lsls	r3, r1, #5
 8004b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b4c:	0142      	lsls	r2, r0, #5
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	1b00      	subs	r0, r0, r4
 8004b54:	eb61 0105 	sbc.w	r1, r1, r5
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	018b      	lsls	r3, r1, #6
 8004b62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b66:	0182      	lsls	r2, r0, #6
 8004b68:	1a12      	subs	r2, r2, r0
 8004b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	00d9      	lsls	r1, r3, #3
 8004b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b7c:	00d0      	lsls	r0, r2, #3
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	1912      	adds	r2, r2, r4
 8004b84:	eb45 0303 	adc.w	r3, r5, r3
 8004b88:	f04f 0000 	mov.w	r0, #0
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	0299      	lsls	r1, r3, #10
 8004b92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b96:	0290      	lsls	r0, r2, #10
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f7fb fb0e 	bl	80001c8 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	60bb      	str	r3, [r7, #8]
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bd2:	60bb      	str	r3, [r7, #8]
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800861c 	.word	0x0800861c

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d035      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c58:	4b62      	ldr	r3, [pc, #392]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc f9bd 	bl	8000fdc <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fc f9b9 	bl	8000fdc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0b0      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	019a      	lsls	r2, r3, #6
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	071b      	lsls	r3, r3, #28
 8004c90:	4955      	ldr	r1, [pc, #340]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c98:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc f99d 	bl	8000fdc <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ca6:	f7fc f999 	bl	8000fdc <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e090      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8083 	beq.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	4b44      	ldr	r3, [pc, #272]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	4a43      	ldr	r2, [pc, #268]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3e      	ldr	r2, [pc, #248]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc f96f 	bl	8000fdc <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d02:	f7fc f96b 	bl	8000fdc <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e062      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d14:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02f      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d48:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4e:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d54:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d114      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fc f939 	bl	8000fdc <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fc f935 	bl	8000fdc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e02a      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ee      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9c:	d10d      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	490d      	ldr	r1, [pc, #52]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]
 8004db8:	e005      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dc4:	6093      	str	r3, [r2, #8]
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd2:	4905      	ldr	r1, [pc, #20]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	42470068 	.word	0x42470068
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40007000 	.word	0x40007000
 8004df0:	42470e40 	.word	0x42470e40

08004df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d13e      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d12f      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e28:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e2a:	617b      	str	r3, [r7, #20]
          break;
 8004e2c:	e02f      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3a:	d108      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e007      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e4e:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e78:	0f1b      	lsrs	r3, r3, #28
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
          break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
          break;
 8004e8c:	bf00      	nop
        }
      }
      break;
 8004e8e:	bf00      	nop
    }
  }
  return frequency;
 8004e90:	697b      	ldr	r3, [r7, #20]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00bb8000 	.word	0x00bb8000
 8004ea8:	007a1200 	.word	0x007a1200
 8004eac:	00f42400 	.word	0x00f42400

08004eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e07b      	b.n	8004fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d009      	beq.n	8004ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
 8004eda:	e005      	b.n	8004ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fb ff42 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	ea42 0103 	orr.w	r1, r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 0104 	and.w	r1, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0210 	and.w	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	f107 001c 	add.w	r0, r7, #28
 8004fd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d122      	bne.n	8005020 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fb1b 	bl	8006650 <USB_CoreReset>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e01a      	b.n	8005056 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fb0f 	bl	8006650 <USB_CoreReset>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
 8005048:	e005      	b.n	8005056 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10b      	bne.n	8005074 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f043 0206 	orr.w	r2, r3, #6
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005080:	b004      	add	sp, #16
 8005082:	4770      	bx	lr

08005084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d165      	bne.n	8005164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a41      	ldr	r2, [pc, #260]	; (80051a0 <USB_SetTurnaroundTime+0x11c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d906      	bls.n	80050ae <USB_SetTurnaroundTime+0x2a>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4a40      	ldr	r2, [pc, #256]	; (80051a4 <USB_SetTurnaroundTime+0x120>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d202      	bcs.n	80050ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050a8:	230f      	movs	r3, #15
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e062      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <USB_SetTurnaroundTime+0x120>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d306      	bcc.n	80050c4 <USB_SetTurnaroundTime+0x40>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <USB_SetTurnaroundTime+0x124>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d202      	bcs.n	80050c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050be:	230e      	movs	r3, #14
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e057      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <USB_SetTurnaroundTime+0x124>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d306      	bcc.n	80050da <USB_SetTurnaroundTime+0x56>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a37      	ldr	r2, [pc, #220]	; (80051ac <USB_SetTurnaroundTime+0x128>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d202      	bcs.n	80050da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050d4:	230d      	movs	r3, #13
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e04c      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <USB_SetTurnaroundTime+0x128>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d306      	bcc.n	80050f0 <USB_SetTurnaroundTime+0x6c>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <USB_SetTurnaroundTime+0x12c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d802      	bhi.n	80050f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ea:	230c      	movs	r3, #12
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e041      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <USB_SetTurnaroundTime+0x12c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d906      	bls.n	8005106 <USB_SetTurnaroundTime+0x82>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <USB_SetTurnaroundTime+0x130>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d802      	bhi.n	8005106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005100:	230b      	movs	r3, #11
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e036      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <USB_SetTurnaroundTime+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d906      	bls.n	800511c <USB_SetTurnaroundTime+0x98>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <USB_SetTurnaroundTime+0x134>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d802      	bhi.n	800511c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005116:	230a      	movs	r3, #10
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e02b      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <USB_SetTurnaroundTime+0x134>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d906      	bls.n	8005132 <USB_SetTurnaroundTime+0xae>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <USB_SetTurnaroundTime+0x138>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d202      	bcs.n	8005132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800512c:	2309      	movs	r3, #9
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e020      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <USB_SetTurnaroundTime+0x138>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d306      	bcc.n	8005148 <USB_SetTurnaroundTime+0xc4>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <USB_SetTurnaroundTime+0x13c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d802      	bhi.n	8005148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005142:	2308      	movs	r3, #8
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e015      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <USB_SetTurnaroundTime+0x13c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d906      	bls.n	800515e <USB_SetTurnaroundTime+0xda>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <USB_SetTurnaroundTime+0x140>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d202      	bcs.n	800515e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005158:	2307      	movs	r3, #7
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e00a      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800515e:	2306      	movs	r3, #6
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e007      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800516a:	2309      	movs	r3, #9
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	e001      	b.n	8005174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005170:	2309      	movs	r3, #9
 8005172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	00d8acbf 	.word	0x00d8acbf
 80051a4:	00e4e1c0 	.word	0x00e4e1c0
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	01067380 	.word	0x01067380
 80051b0:	011a499f 	.word	0x011a499f
 80051b4:	01312cff 	.word	0x01312cff
 80051b8:	014ca43f 	.word	0x014ca43f
 80051bc:	016e3600 	.word	0x016e3600
 80051c0:	01a6ab1f 	.word	0x01a6ab1f
 80051c4:	01e84800 	.word	0x01e84800

080051c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f043 0201 	orr.w	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d115      	bne.n	800525a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800523a:	2001      	movs	r0, #1
 800523c:	f7fb feda 	bl	8000ff4 <HAL_Delay>
      ms++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f972 	bl	8006530 <USB_GetMode>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d01e      	beq.n	8005290 <USB_SetCurrentMode+0x84>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b31      	cmp	r3, #49	; 0x31
 8005256:	d9f0      	bls.n	800523a <USB_SetCurrentMode+0x2e>
 8005258:	e01a      	b.n	8005290 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d115      	bne.n	800528c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800526c:	2001      	movs	r0, #1
 800526e:	f7fb fec1 	bl	8000ff4 <HAL_Delay>
      ms++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f959 	bl	8006530 <USB_GetMode>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <USB_SetCurrentMode+0x84>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b31      	cmp	r3, #49	; 0x31
 8005288:	d9f0      	bls.n	800526c <USB_SetCurrentMode+0x60>
 800528a:	e001      	b.n	8005290 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e005      	b.n	800529c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b32      	cmp	r3, #50	; 0x32
 8005294:	d101      	bne.n	800529a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a4:	b084      	sub	sp, #16
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e009      	b.n	80052d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3340      	adds	r3, #64	; 0x40
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3301      	adds	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b0e      	cmp	r3, #14
 80052dc:	d9f2      	bls.n	80052c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11c      	bne.n	800531e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f2:	f043 0302 	orr.w	r3, r3, #2
 80052f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
 800531c:	e00b      	b.n	8005336 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	4619      	mov	r1, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	461a      	mov	r2, r3
 8005352:	680b      	ldr	r3, [r1, #0]
 8005354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10c      	bne.n	8005376 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005362:	2100      	movs	r1, #0
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f945 	bl	80055f4 <USB_SetDevSpeed>
 800536a:	e008      	b.n	800537e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800536c:	2101      	movs	r1, #1
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f940 	bl	80055f4 <USB_SetDevSpeed>
 8005374:	e003      	b.n	800537e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005376:	2103      	movs	r1, #3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f93b 	bl	80055f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800537e:	2110      	movs	r1, #16
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8f3 	bl	800556c <USB_FlushTxFifo>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f90f 	bl	80055b4 <USB_FlushRxFifo>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	461a      	mov	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	461a      	mov	r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e043      	b.n	8005452 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e0:	d118      	bne.n	8005414 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e013      	b.n	8005426 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	461a      	mov	r2, r3
 800540c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e008      	b.n	8005426 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	461a      	mov	r2, r3
 8005446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800544a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	3301      	adds	r3, #1
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d3b7      	bcc.n	80053ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e043      	b.n	80054e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005476:	d118      	bne.n	80054aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e013      	b.n	80054bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e008      	b.n	80054bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	461a      	mov	r2, r3
 80054dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d3b7      	bcc.n	8005460 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005502:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005510:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <USB_DevInit+0x2c4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005550:	f043 0304 	orr.w	r3, r3, #4
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005564:	b004      	add	sp, #16
 8005566:	4770      	bx	lr
 8005568:	803c3800 	.word	0x803c3800

0800556c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <USB_FlushTxFifo+0x44>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e006      	b.n	80055a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d0f1      	beq.n	8005586 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	00030d40 	.word	0x00030d40

080055b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2210      	movs	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <USB_FlushRxFifo+0x3c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d0f1      	beq.n	80055c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	00030d40 	.word	0x00030d40

080055f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0306 	and.w	r3, r3, #6
 800563e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
 800564a:	e00a      	b.n	8005662 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d002      	beq.n	8005658 <USB_GetDevSpeed+0x32>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d102      	bne.n	800565e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005658:	2302      	movs	r3, #2
 800565a:	75fb      	strb	r3, [r7, #23]
 800565c:	e001      	b.n	8005662 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800565e:	230f      	movs	r3, #15
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d13a      	bne.n	8005702 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d155      	bne.n	8005770 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	78db      	ldrb	r3, [r3, #3]
 80056de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	059b      	lsls	r3, r3, #22
 80056e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e8:	4313      	orrs	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e036      	b.n	8005770 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11a      	bne.n	8005770 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005756:	430b      	orrs	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d161      	bne.n	8005860 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b2:	d11f      	bne.n	80057f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005814:	4013      	ands	r3, r2
 8005816:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2101      	movs	r1, #1
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005838:	4013      	ands	r3, r2
 800583a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	0159      	lsls	r1, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	440b      	add	r3, r1
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	4619      	mov	r1, r3
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <USB_DeactivateEndpoint+0x1b0>)
 800585a:	4013      	ands	r3, r2
 800585c:	600b      	str	r3, [r1, #0]
 800585e:	e060      	b.n	8005922 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005876:	d11f      	bne.n	80058b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005896:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	43db      	mvns	r3, r3
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d8:	4013      	ands	r3, r2
 80058da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	43db      	mvns	r3, r3
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fc:	4013      	ands	r3, r2
 80058fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	440b      	add	r3, r1
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	4619      	mov	r1, r3
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <USB_DeactivateEndpoint+0x1b4>)
 800591e:	4013      	ands	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	ec337800 	.word	0xec337800
 8005934:	eff37800 	.word	0xeff37800

08005938 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	f040 815c 	bne.w	8005c12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d132      	bne.n	80059c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c0:	0cdb      	lsrs	r3, r3, #19
 80059c2:	04db      	lsls	r3, r3, #19
 80059c4:	6113      	str	r3, [r2, #16]
 80059c6:	e074      	b.n	8005ab2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e2:	0cdb      	lsrs	r3, r3, #19
 80059e4:	04db      	lsls	r3, r3, #19
 80059e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6959      	ldr	r1, [r3, #20]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	440b      	add	r3, r1
 8005a24:	1e59      	subs	r1, r3, #1
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a30:	4b9d      	ldr	r3, [pc, #628]	; (8005ca8 <USB_EPStartXfer+0x370>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	0148      	lsls	r0, r1, #5
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5a:	69b9      	ldr	r1, [r7, #24]
 8005a5c:	0148      	lsls	r0, r1, #5
 8005a5e:	69f9      	ldr	r1, [r7, #28]
 8005a60:	4401      	add	r1, r0
 8005a62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a66:	4313      	orrs	r3, r2
 8005a68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11f      	bne.n	8005ab2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ab0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d14b      	bne.n	8005b50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	461a      	mov	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d128      	bne.n	8005b2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d110      	bne.n	8005b0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e00f      	b.n	8005b2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e12f      	b.n	8005db0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	78db      	ldrb	r3, [r3, #3]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d015      	beq.n	8005ba4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8117 	beq.w	8005db0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ba2:	e105      	b.n	8005db0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e00f      	b.n	8005bf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68d9      	ldr	r1, [r3, #12]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	b298      	uxth	r0, r3
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa2b 	bl	8006066 <USB_WritePacket>
 8005c10:	e0ce      	b.n	8005db0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	04db      	lsls	r3, r3, #19
 8005c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d126      	bne.n	8005cac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	0148      	lsls	r0, r1, #5
 8005c78:	69f9      	ldr	r1, [r7, #28]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c80:	4313      	orrs	r3, r2
 8005c82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca2:	6113      	str	r3, [r2, #16]
 8005ca4:	e036      	b.n	8005d14 <USB_EPStartXfer+0x3dc>
 8005ca6:	bf00      	nop
 8005ca8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	8afb      	ldrh	r3, [r7, #22]
 8005cd2:	04d9      	lsls	r1, r3, #19
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <USB_EPStartXfer+0x484>)
 8005cd6:	400b      	ands	r3, r1
 8005cd8:	69b9      	ldr	r1, [r7, #24]
 8005cda:	0148      	lsls	r0, r1, #5
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	4401      	add	r1, r0
 8005ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	8af9      	ldrh	r1, [r7, #22]
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10d      	bne.n	8005d36 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68d9      	ldr	r1, [r3, #12]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	460a      	mov	r2, r1
 8005d34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	78db      	ldrb	r3, [r3, #3]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d128      	bne.n	8005d90 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e00f      	b.n	8005d90 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	1ff80000 	.word	0x1ff80000

08005dc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 80cd 	bne.w	8005f7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d132      	bne.n	8005e50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	0cdb      	lsrs	r3, r3, #19
 8005e4a:	04db      	lsls	r3, r3, #19
 8005e4c:	6113      	str	r3, [r2, #16]
 8005e4e:	e04e      	b.n	8005eee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	0cdb      	lsrs	r3, r3, #19
 8005e6c:	04db      	lsls	r3, r3, #19
 8005e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d903      	bls.n	8005ea8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ede:	6939      	ldr	r1, [r7, #16]
 8005ee0:	0148      	lsls	r0, r1, #5
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	4401      	add	r1, r0
 8005ee6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eea:	4313      	orrs	r3, r2
 8005eec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d11e      	bne.n	8005f32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e092      	b.n	8006058 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d07e      	beq.n	8006058 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f76:	4313      	orrs	r3, r2
 8005f78:	634b      	str	r3, [r1, #52]	; 0x34
 8005f7a:	e06d      	b.n	8006058 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	0cdb      	lsrs	r3, r3, #19
 8005f98:	04db      	lsls	r3, r3, #19
 8005f9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fbe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	0148      	lsls	r0, r1, #5
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	4401      	add	r1, r0
 800600e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10d      	bne.n	8006038 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	460a      	mov	r2, r1
 8006036:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006066:	b480      	push	{r7}
 8006068:	b089      	sub	sp, #36	; 0x24
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	4611      	mov	r1, r2
 8006072:	461a      	mov	r2, r3
 8006074:	460b      	mov	r3, r1
 8006076:	71fb      	strb	r3, [r7, #7]
 8006078:	4613      	mov	r3, r2
 800607a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d123      	bne.n	80060d4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800608c:	88bb      	ldrh	r3, [r7, #4]
 800608e:	3303      	adds	r3, #3
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e018      	b.n	80060cc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	031a      	lsls	r2, r3, #12
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a6:	461a      	mov	r2, r3
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d3e2      	bcc.n	800609a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3724      	adds	r7, #36	; 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b08b      	sub	sp, #44	; 0x2c
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	4613      	mov	r3, r2
 80060ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	e014      	b.n	8006138 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	601a      	str	r2, [r3, #0]
    pDest++;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	3301      	adds	r3, #1
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	3301      	adds	r3, #1
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	3301      	adds	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	3301      	adds	r3, #1
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	429a      	cmp	r2, r3
 800613e:	d3e6      	bcc.n	800610e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006140:	8bfb      	ldrh	r3, [r7, #30]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01e      	beq.n	8006184 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006150:	461a      	mov	r2, r3
 8006152:	f107 0310 	add.w	r3, r7, #16
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	701a      	strb	r2, [r3, #0]
      i++;
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	3301      	adds	r3, #1
 8006170:	623b      	str	r3, [r7, #32]
      pDest++;
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	3301      	adds	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006178:	8bfb      	ldrh	r3, [r7, #30]
 800617a:	3b01      	subs	r3, #1
 800617c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800617e:	8bfb      	ldrh	r3, [r7, #30]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ea      	bne.n	800615a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006186:	4618      	mov	r0, r3
 8006188:	372c      	adds	r7, #44	; 0x2c
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d12c      	bne.n	8006208 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	db12      	blt.n	80061e6 <USB_EPSetStall+0x54>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00f      	beq.n	80061e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	e02b      	b.n	8006260 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	db12      	blt.n	8006240 <USB_EPSetStall+0xae>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800623e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800625e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d128      	bne.n	80062dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	78db      	ldrb	r3, [r3, #3]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d003      	beq.n	80062ba <USB_EPClearStall+0x4c>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	78db      	ldrb	r3, [r3, #3]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d138      	bne.n	800632c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e027      	b.n	800632c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d003      	beq.n	800630c <USB_EPClearStall+0x9e>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	78db      	ldrb	r3, [r3, #3]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d10f      	bne.n	800632c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006358:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800635c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a0:	f023 0303 	bic.w	r3, r3, #3
 80063a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b4:	f023 0302 	bic.w	r3, r3, #2
 80063b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f6:	f043 0302 	orr.w	r3, r3, #2
 80063fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4013      	ands	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	0c1b      	lsrs	r3, r3, #16
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	b29b      	uxth	r3, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064c6:	68bb      	ldr	r3, [r7, #8]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	01db      	lsls	r3, r3, #7
 8006506:	b2db      	uxtb	r3, r3
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4013      	ands	r3, r2
 8006520:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006522:	68bb      	ldr	r3, [r7, #8]
}
 8006524:	4618      	mov	r0, r3
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0301 	and.w	r3, r3, #1
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006566:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006582:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	460b      	mov	r3, r1
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	333c      	adds	r3, #60	; 0x3c
 80065aa:	3304      	adds	r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4a26      	ldr	r2, [pc, #152]	; (800664c <USB_EP0_OutStart+0xb8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d90a      	bls.n	80065ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c8:	d101      	bne.n	80065ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e037      	b.n	800663e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fc:	f043 0318 	orr.w	r3, r3, #24
 8006600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006614:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10f      	bne.n	800663c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800663a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	4f54300a 	.word	0x4f54300a

08006650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <USB_CoreReset+0x60>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e01a      	b.n	80066a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	daf3      	bge.n	800665c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <USB_CoreReset+0x60>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e006      	b.n	80066a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d0f1      	beq.n	8006684 <USB_CoreReset+0x34>

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	00030d40 	.word	0x00030d40

080066b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80066c0:	2010      	movs	r0, #16
 80066c2:	f001 ff03 	bl	80084cc <USBD_static_malloc>
 80066c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d105      	bne.n	80066da <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80066d6:	2302      	movs	r3, #2
 80066d8:	e01b      	b.n	8006712 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	7c1b      	ldrb	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2207      	movs	r2, #7
 80066ee:	875a      	strh	r2, [r3, #58]	; 0x3a
 80066f0:	e002      	b.n	80066f8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	220a      	movs	r2, #10
 80066f6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80066f8:	2304      	movs	r3, #4
 80066fa:	2203      	movs	r2, #3
 80066fc:	2181      	movs	r1, #129	; 0x81
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fdd3 	bl	80082aa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006726:	2181      	movs	r1, #129	; 0x81
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fde4 	bl	80082f6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800674a:	4618      	mov	r0, r3
 800674c:	f001 fecc 	bl	80084e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006774:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	e0e8      	b.n	800695a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006790:	2b00      	cmp	r3, #0
 8006792:	d046      	beq.n	8006822 <USBD_HID_Setup+0xbe>
 8006794:	2b20      	cmp	r3, #32
 8006796:	f040 80d8 	bne.w	800694a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	3b02      	subs	r3, #2
 80067a0:	2b09      	cmp	r3, #9
 80067a2:	d836      	bhi.n	8006812 <USBD_HID_Setup+0xae>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USBD_HID_Setup+0x48>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	08006803 	.word	0x08006803
 80067b0:	080067e3 	.word	0x080067e3
 80067b4:	08006813 	.word	0x08006813
 80067b8:	08006813 	.word	0x08006813
 80067bc:	08006813 	.word	0x08006813
 80067c0:	08006813 	.word	0x08006813
 80067c4:	08006813 	.word	0x08006813
 80067c8:	08006813 	.word	0x08006813
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067d5 	.word	0x080067d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	885b      	ldrh	r3, [r3, #2]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]
          break;
 80067e0:	e01e      	b.n	8006820 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f9fa 	bl	8007be2 <USBD_CtlSendData>
          break;
 80067ee:	e017      	b.n	8006820 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	885b      	ldrh	r3, [r3, #2]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	605a      	str	r2, [r3, #4]
          break;
 8006800:	e00e      	b.n	8006820 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 f9e9 	bl	8007be2 <USBD_CtlSendData>
          break;
 8006810:	e006      	b.n	8006820 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f973 	bl	8007b00 <USBD_CtlError>
          ret = USBD_FAIL;
 800681a:	2303      	movs	r3, #3
 800681c:	75fb      	strb	r3, [r7, #23]
          break;
 800681e:	bf00      	nop
      }
      break;
 8006820:	e09a      	b.n	8006958 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b0b      	cmp	r3, #11
 8006828:	f200 8086 	bhi.w	8006938 <USBD_HID_Setup+0x1d4>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <USBD_HID_Setup+0xd0>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006865 	.word	0x08006865
 8006838:	08006947 	.word	0x08006947
 800683c:	08006939 	.word	0x08006939
 8006840:	08006939 	.word	0x08006939
 8006844:	08006939 	.word	0x08006939
 8006848:	08006939 	.word	0x08006939
 800684c:	0800688f 	.word	0x0800688f
 8006850:	08006939 	.word	0x08006939
 8006854:	08006939 	.word	0x08006939
 8006858:	08006939 	.word	0x08006939
 800685c:	080068e7 	.word	0x080068e7
 8006860:	08006911 	.word	0x08006911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d107      	bne.n	8006880 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006870:	f107 030a 	add.w	r3, r7, #10
 8006874:	2202      	movs	r2, #2
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 f9b2 	bl	8007be2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800687e:	e063      	b.n	8006948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f93c 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8006888:	2303      	movs	r3, #3
 800688a:	75fb      	strb	r3, [r7, #23]
          break;
 800688c:	e05c      	b.n	8006948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b22      	cmp	r3, #34	; 0x22
 8006898:	d108      	bne.n	80068ac <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	88db      	ldrh	r3, [r3, #6]
 800689e:	2b4a      	cmp	r3, #74	; 0x4a
 80068a0:	bf28      	it	cs
 80068a2:	234a      	movcs	r3, #74	; 0x4a
 80068a4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80068a6:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <USBD_HID_Setup+0x200>)
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	e015      	b.n	80068d8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	885b      	ldrh	r3, [r3, #2]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b21      	cmp	r3, #33	; 0x21
 80068b6:	d108      	bne.n	80068ca <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <USBD_HID_Setup+0x204>)
 80068ba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	88db      	ldrh	r3, [r3, #6]
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	bf28      	it	cs
 80068c4:	2309      	movcs	r3, #9
 80068c6:	82bb      	strh	r3, [r7, #20]
 80068c8:	e006      	b.n	80068d8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f917 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 80068d2:	2303      	movs	r3, #3
 80068d4:	75fb      	strb	r3, [r7, #23]
            break;
 80068d6:	e037      	b.n	8006948 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80068d8:	8abb      	ldrh	r3, [r7, #20]
 80068da:	461a      	mov	r2, r3
 80068dc:	6939      	ldr	r1, [r7, #16]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 f97f 	bl	8007be2 <USBD_CtlSendData>
          break;
 80068e4:	e030      	b.n	8006948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d107      	bne.n	8006902 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3308      	adds	r3, #8
 80068f6:	2201      	movs	r2, #1
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f971 	bl	8007be2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006900:	e022      	b.n	8006948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f8fb 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 800690a:	2303      	movs	r3, #3
 800690c:	75fb      	strb	r3, [r7, #23]
          break;
 800690e:	e01b      	b.n	8006948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b03      	cmp	r3, #3
 800691a:	d106      	bne.n	800692a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	885b      	ldrh	r3, [r3, #2]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006928:	e00e      	b.n	8006948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f8e7 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8006932:	2303      	movs	r3, #3
 8006934:	75fb      	strb	r3, [r7, #23]
          break;
 8006936:	e007      	b.n	8006948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 f8e0 	bl	8007b00 <USBD_CtlError>
          ret = USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	75fb      	strb	r3, [r7, #23]
          break;
 8006944:	e000      	b.n	8006948 <USBD_HID_Setup+0x1e4>
          break;
 8006946:	bf00      	nop
      }
      break;
 8006948:	e006      	b.n	8006958 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f8d7 	bl	8007b00 <USBD_CtlError>
      ret = USBD_FAIL;
 8006952:	2303      	movs	r3, #3
 8006954:	75fb      	strb	r3, [r7, #23]
      break;
 8006956:	bf00      	nop
  }

  return (uint8_t)ret;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200000c8 	.word	0x200000c8
 8006968:	200000b0 	.word	0x200000b0

0800696c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2222      	movs	r2, #34	; 0x22
 8006978:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000044 	.word	0x20000044

0800698c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2222      	movs	r2, #34	; 0x22
 8006998:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000068 	.word	0x20000068

080069ac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80069ba:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	2000008c 	.word	0x2000008c

080069cc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069de:	2200      	movs	r2, #0
 80069e0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	220a      	movs	r2, #10
 80069fc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80069fe:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	200000bc 	.word	0x200000bc

08006a10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e01f      	b.n	8006a68 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	79fa      	ldrb	r2, [r7, #7]
 8006a5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 fbbd 	bl	80081dc <USBD_LL_Init>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e016      	b.n	8006ab6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	f107 020e 	add.w	r2, r7, #14
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fbd4 	bl	8008274 <USBD_LL_Start>
 8006acc:	4603      	mov	r3, r0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
  }

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 ff90 	bl	8007a8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d01a      	beq.n	8006bc6 <USBD_LL_SetupStage+0x72>
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d822      	bhi.n	8006bda <USBD_LL_SetupStage+0x86>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <USBD_LL_SetupStage+0x4a>
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d00a      	beq.n	8006bb2 <USBD_LL_SetupStage+0x5e>
 8006b9c:	e01d      	b.n	8006bda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa62 	bl	8007070 <USBD_StdDevReq>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb0:	e020      	b.n	8006bf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fac6 	bl	800714c <USBD_StdItfReq>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e016      	b.n	8006bf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fb05 	bl	80071de <USBD_StdEPReq>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd8:	e00c      	b.n	8006bf4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006be0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fba3 	bl	8008334 <USBD_LL_StallEP>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	bf00      	nop
  }

  return ret;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	460b      	mov	r3, r1
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d138      	bne.n	8006c84 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d14a      	bne.n	8006cba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d913      	bls.n	8006c58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	1ad2      	subs	r2, r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bf28      	it	cs
 8006c4a:	4613      	movcs	r3, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fff2 	bl	8007c3a <USBD_CtlContinueRx>
 8006c56:	e030      	b.n	8006cba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d10b      	bne.n	8006c7c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 ffed 	bl	8007c5c <USBD_CtlSendStatus>
 8006c82:	e01a      	b.n	8006cba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d114      	bne.n	8006cba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00e      	beq.n	8006cba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	7afa      	ldrb	r2, [r7, #11]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	4798      	blx	r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	e000      	b.n	8006cbc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d16b      	bne.n	8006db0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d156      	bne.n	8006d96 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d914      	bls.n	8006d1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 ff84 	bl	8007c18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 fbb6 	bl	8008488 <USBD_LL_PrepareReceive>
 8006d1c:	e03b      	b.n	8006d96 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d11c      	bne.n	8006d64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d316      	bcc.n	8006d64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d20f      	bcs.n	8006d64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d44:	2200      	movs	r2, #0
 8006d46:	2100      	movs	r1, #0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 ff65 	bl	8007c18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d56:	2300      	movs	r3, #0
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f001 fb93 	bl	8008488 <USBD_LL_PrepareReceive>
 8006d62:	e018      	b.n	8006d96 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d10b      	bne.n	8006d88 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 fad2 	bl	8008334 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 ff76 	bl	8007c82 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d122      	bne.n	8006de6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fe98 	bl	8006ad6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006dae:	e01a      	b.n	8006de6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d114      	bne.n	8006de6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	7afa      	ldrb	r2, [r7, #11]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	4798      	blx	r3
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	e000      	b.n	8006de8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e02f      	b.n	8006e84 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00f      	beq.n	8006e4e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6852      	ldr	r2, [r2, #4]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	4611      	mov	r1, r2
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fa28 	bl	80082aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2240      	movs	r2, #64	; 0x40
 8006e66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fa1a 	bl	80082aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d106      	bne.n	8006efa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e012      	b.n	8006f44 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d10b      	bne.n	8006f42 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e014      	b.n	8006f90 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d10d      	bne.n	8006f8e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e014      	b.n	8006fdc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d10d      	bne.n	8006fda <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	78fa      	ldrb	r2, [r7, #3]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6852      	ldr	r2, [r2, #4]
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	4611      	mov	r1, r2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
  }

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	3301      	adds	r3, #1
 8007048:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007050:	8a3b      	ldrh	r3, [r7, #16]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	b21a      	sxth	r2, r3
 8007056:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800705a:	4313      	orrs	r3, r2
 800705c:	b21b      	sxth	r3, r3
 800705e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007060:	89fb      	ldrh	r3, [r7, #14]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d005      	beq.n	8007096 <USBD_StdDevReq+0x26>
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d853      	bhi.n	8007136 <USBD_StdDevReq+0xc6>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <USBD_StdDevReq+0x3a>
 8007092:	2b20      	cmp	r3, #32
 8007094:	d14f      	bne.n	8007136 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
      break;
 80070a8:	e04a      	b.n	8007140 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b09      	cmp	r3, #9
 80070b0:	d83b      	bhi.n	800712a <USBD_StdDevReq+0xba>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USBD_StdDevReq+0x48>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007121 	.word	0x08007121
 80070c0:	0800712b 	.word	0x0800712b
 80070c4:	08007117 	.word	0x08007117
 80070c8:	0800712b 	.word	0x0800712b
 80070cc:	080070eb 	.word	0x080070eb
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	0800712b 	.word	0x0800712b
 80070d8:	08007103 	.word	0x08007103
 80070dc:	080070f5 	.word	0x080070f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f9de 	bl	80074a4 <USBD_GetDescriptor>
          break;
 80070e8:	e024      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb43 	bl	8007778 <USBD_SetAddress>
          break;
 80070f2:	e01f      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fb82 	bl	8007800 <USBD_SetConfig>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007100:	e018      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc21 	bl	800794c <USBD_GetConfig>
          break;
 800710a:	e013      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fc52 	bl	80079b8 <USBD_GetStatus>
          break;
 8007114:	e00e      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fc81 	bl	8007a20 <USBD_SetFeature>
          break;
 800711e:	e009      	b.n	8007134 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fc90 	bl	8007a48 <USBD_ClrFeature>
          break;
 8007128:	e004      	b.n	8007134 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fce7 	bl	8007b00 <USBD_CtlError>
          break;
 8007132:	bf00      	nop
      }
      break;
 8007134:	e004      	b.n	8007140 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fce1 	bl	8007b00 <USBD_CtlError>
      break;
 800713e:	bf00      	nop
  }

  return ret;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop

0800714c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d005      	beq.n	8007172 <USBD_StdItfReq+0x26>
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d82f      	bhi.n	80071ca <USBD_StdItfReq+0x7e>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <USBD_StdItfReq+0x26>
 800716e:	2b20      	cmp	r3, #32
 8007170:	d12b      	bne.n	80071ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007178:	b2db      	uxtb	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	2b02      	cmp	r3, #2
 800717e:	d81d      	bhi.n	80071bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	889b      	ldrh	r3, [r3, #4]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d813      	bhi.n	80071b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d110      	bne.n	80071c6 <USBD_StdItfReq+0x7a>
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fd56 	bl	8007c5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071b0:	e009      	b.n	80071c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fca3 	bl	8007b00 <USBD_CtlError>
          break;
 80071ba:	e004      	b.n	80071c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fc9e 	bl	8007b00 <USBD_CtlError>
          break;
 80071c4:	e000      	b.n	80071c8 <USBD_StdItfReq+0x7c>
          break;
 80071c6:	bf00      	nop
      }
      break;
 80071c8:	e004      	b.n	80071d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc97 	bl	8007b00 <USBD_CtlError>
      break;
 80071d2:	bf00      	nop
  }

  return ret;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	889b      	ldrh	r3, [r3, #4]
 80071f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d007      	beq.n	800720e <USBD_StdEPReq+0x30>
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	f200 8145 	bhi.w	800748e <USBD_StdEPReq+0x2b0>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <USBD_StdEPReq+0x44>
 8007208:	2b20      	cmp	r3, #32
 800720a:	f040 8140 	bne.w	800748e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
      break;
 8007220:	e13a      	b.n	8007498 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d007      	beq.n	800723a <USBD_StdEPReq+0x5c>
 800722a:	2b03      	cmp	r3, #3
 800722c:	f300 8129 	bgt.w	8007482 <USBD_StdEPReq+0x2a4>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d07f      	beq.n	8007334 <USBD_StdEPReq+0x156>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d03c      	beq.n	80072b2 <USBD_StdEPReq+0xd4>
 8007238:	e123      	b.n	8007482 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d002      	beq.n	800724c <USBD_StdEPReq+0x6e>
 8007246:	2b03      	cmp	r3, #3
 8007248:	d016      	beq.n	8007278 <USBD_StdEPReq+0x9a>
 800724a:	e02c      	b.n	80072a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <USBD_StdEPReq+0x90>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d00a      	beq.n	800726e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f869 	bl	8008334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f865 	bl	8008334 <USBD_LL_StallEP>
 800726a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800726c:	e020      	b.n	80072b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc45 	bl	8007b00 <USBD_CtlError>
              break;
 8007276:	e01b      	b.n	80072b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10e      	bne.n	800729e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <USBD_StdEPReq+0xc0>
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d008      	beq.n	800729e <USBD_StdEPReq+0xc0>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f84b 	bl	8008334 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fcdc 	bl	8007c5c <USBD_CtlSendStatus>

              break;
 80072a4:	e004      	b.n	80072b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc29 	bl	8007b00 <USBD_CtlError>
              break;
 80072ae:	bf00      	nop
          }
          break;
 80072b0:	e0ec      	b.n	800748c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d002      	beq.n	80072c4 <USBD_StdEPReq+0xe6>
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d016      	beq.n	80072f0 <USBD_StdEPReq+0x112>
 80072c2:	e030      	b.n	8007326 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <USBD_StdEPReq+0x108>
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d00a      	beq.n	80072e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 f82d 	bl	8008334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072da:	2180      	movs	r1, #128	; 0x80
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f829 	bl	8008334 <USBD_LL_StallEP>
 80072e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072e4:	e025      	b.n	8007332 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc09 	bl	8007b00 <USBD_CtlError>
              break;
 80072ee:	e020      	b.n	8007332 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11b      	bne.n	8007330 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f833 	bl	8008372 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fca5 	bl	8007c5c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007324:	e004      	b.n	8007330 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fbe9 	bl	8007b00 <USBD_CtlError>
              break;
 800732e:	e000      	b.n	8007332 <USBD_StdEPReq+0x154>
              break;
 8007330:	bf00      	nop
          }
          break;
 8007332:	e0ab      	b.n	800748c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d002      	beq.n	8007346 <USBD_StdEPReq+0x168>
 8007340:	2b03      	cmp	r3, #3
 8007342:	d032      	beq.n	80073aa <USBD_StdEPReq+0x1cc>
 8007344:	e097      	b.n	8007476 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <USBD_StdEPReq+0x17e>
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b80      	cmp	r3, #128	; 0x80
 8007350:	d004      	beq.n	800735c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fbd3 	bl	8007b00 <USBD_CtlError>
                break;
 800735a:	e091      	b.n	8007480 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da0b      	bge.n	800737c <USBD_StdEPReq+0x19e>
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	3310      	adds	r3, #16
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	3304      	adds	r3, #4
 800737a:	e00b      	b.n	8007394 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	3304      	adds	r3, #4
 8007394:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2202      	movs	r2, #2
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc1d 	bl	8007be2 <USBD_CtlSendData>
              break;
 80073a8:	e06a      	b.n	8007480 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da11      	bge.n	80073d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d117      	bne.n	80073fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb96 	bl	8007b00 <USBD_CtlError>
                  break;
 80073d4:	e054      	b.n	8007480 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	f003 020f 	and.w	r2, r3, #15
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fb83 	bl	8007b00 <USBD_CtlError>
                  break;
 80073fa:	e041      	b.n	8007480 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	da0b      	bge.n	800741c <USBD_StdEPReq+0x23e>
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	3310      	adds	r3, #16
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4413      	add	r3, r2
 8007418:	3304      	adds	r3, #4
 800741a:	e00b      	b.n	8007434 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	3304      	adds	r3, #4
 8007434:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <USBD_StdEPReq+0x264>
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d103      	bne.n	800744a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	e00e      	b.n	8007468 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ffae 	bl	80083b0 <USBD_LL_IsStallEP>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2201      	movs	r2, #1
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e002      	b.n	8007468 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2202      	movs	r2, #2
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fbb7 	bl	8007be2 <USBD_CtlSendData>
              break;
 8007474:	e004      	b.n	8007480 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb41 	bl	8007b00 <USBD_CtlError>
              break;
 800747e:	bf00      	nop
          }
          break;
 8007480:	e004      	b.n	800748c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb3b 	bl	8007b00 <USBD_CtlError>
          break;
 800748a:	bf00      	nop
      }
      break;
 800748c:	e004      	b.n	8007498 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fb35 	bl	8007b00 <USBD_CtlError>
      break;
 8007496:	bf00      	nop
  }

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	f200 8128 	bhi.w	800771a <USBD_GetDescriptor+0x276>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <USBD_GetDescriptor+0x2c>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	08007505 	.word	0x08007505
 80074d8:	08007545 	.word	0x08007545
 80074dc:	0800771b 	.word	0x0800771b
 80074e0:	0800771b 	.word	0x0800771b
 80074e4:	080076bb 	.word	0x080076bb
 80074e8:	080076e7 	.word	0x080076e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
      break;
 8007502:	e112      	b.n	800772a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7c1b      	ldrb	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	f107 0208 	add.w	r2, r7, #8
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	2202      	movs	r2, #2
 8007524:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007526:	e100      	b.n	800772a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f107 0208 	add.w	r2, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	2202      	movs	r2, #2
 8007540:	701a      	strb	r2, [r3, #0]
      break;
 8007542:	e0f2      	b.n	800772a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	885b      	ldrh	r3, [r3, #2]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b05      	cmp	r3, #5
 800754c:	f200 80ac 	bhi.w	80076a8 <USBD_GetDescriptor+0x204>
 8007550:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <USBD_GetDescriptor+0xb4>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	08007571 	.word	0x08007571
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075d9 	.word	0x080075d9
 8007564:	0800760d 	.word	0x0800760d
 8007568:	08007641 	.word	0x08007641
 800756c:	08007675 	.word	0x08007675
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	7c12      	ldrb	r2, [r2, #16]
 8007588:	f107 0108 	add.w	r1, r7, #8
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007592:	e091      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fab2 	bl	8007b00 <USBD_CtlError>
            err++;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	3301      	adds	r3, #1
 80075a0:	72fb      	strb	r3, [r7, #11]
          break;
 80075a2:	e089      	b.n	80076b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e077      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa98 	bl	8007b00 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e06f      	b.n	80076b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	7c12      	ldrb	r2, [r2, #16]
 80075f0:	f107 0108 	add.w	r1, r7, #8
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
 80075f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fa:	e05d      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa7e 	bl	8007b00 <USBD_CtlError>
            err++;
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	3301      	adds	r3, #1
 8007608:	72fb      	strb	r3, [r7, #11]
          break;
 800760a:	e055      	b.n	80076b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 0108 	add.w	r1, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762e:	e043      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa64 	bl	8007b00 <USBD_CtlError>
            err++;
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	3301      	adds	r3, #1
 800763c:	72fb      	strb	r3, [r7, #11]
          break;
 800763e:	e03b      	b.n	80076b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	f107 0108 	add.w	r1, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007662:	e029      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa4a 	bl	8007b00 <USBD_CtlError>
            err++;
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	3301      	adds	r3, #1
 8007670:	72fb      	strb	r3, [r7, #11]
          break;
 8007672:	e021      	b.n	80076b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	7c12      	ldrb	r2, [r2, #16]
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007696:	e00f      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa30 	bl	8007b00 <USBD_CtlError>
            err++;
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	3301      	adds	r3, #1
 80076a4:	72fb      	strb	r3, [r7, #11]
          break;
 80076a6:	e007      	b.n	80076b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa28 	bl	8007b00 <USBD_CtlError>
          err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80076b6:	bf00      	nop
      }
      break;
 80076b8:	e037      	b.n	800772a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7c1b      	ldrb	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ca:	f107 0208 	add.w	r2, r7, #8
 80076ce:	4610      	mov	r0, r2
 80076d0:	4798      	blx	r3
 80076d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076d4:	e029      	b.n	800772a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fa11 	bl	8007b00 <USBD_CtlError>
        err++;
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	3301      	adds	r3, #1
 80076e2:	72fb      	strb	r3, [r7, #11]
      break;
 80076e4:	e021      	b.n	800772a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c1b      	ldrb	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f107 0208 	add.w	r2, r7, #8
 80076fa:	4610      	mov	r0, r2
 80076fc:	4798      	blx	r3
 80076fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3301      	adds	r3, #1
 8007704:	2207      	movs	r2, #7
 8007706:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007708:	e00f      	b.n	800772a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9f7 	bl	8007b00 <USBD_CtlError>
        err++;
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	3301      	adds	r3, #1
 8007716:	72fb      	strb	r3, [r7, #11]
      break;
 8007718:	e007      	b.n	800772a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9ef 	bl	8007b00 <USBD_CtlError>
      err++;
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	3301      	adds	r3, #1
 8007726:	72fb      	strb	r3, [r7, #11]
      break;
 8007728:	bf00      	nop
  }

  if (err != 0U)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d11e      	bne.n	800776e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88db      	ldrh	r3, [r3, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007738:	893b      	ldrh	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88da      	ldrh	r2, [r3, #6]
 8007742:	893b      	ldrh	r3, [r7, #8]
 8007744:	4293      	cmp	r3, r2
 8007746:	bf28      	it	cs
 8007748:	4613      	movcs	r3, r2
 800774a:	b29b      	uxth	r3, r3
 800774c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800774e:	893b      	ldrh	r3, [r7, #8]
 8007750:	461a      	mov	r2, r3
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa44 	bl	8007be2 <USBD_CtlSendData>
 800775a:	e009      	b.n	8007770 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9ce 	bl	8007b00 <USBD_CtlError>
 8007764:	e004      	b.n	8007770 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa78 	bl	8007c5c <USBD_CtlSendStatus>
 800776c:	e000      	b.n	8007770 <USBD_GetDescriptor+0x2cc>
    return;
 800776e:	bf00      	nop
  }
}
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop

08007778 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	889b      	ldrh	r3, [r3, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d131      	bne.n	80077ee <USBD_SetAddress+0x76>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	88db      	ldrh	r3, [r3, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d12d      	bne.n	80077ee <USBD_SetAddress+0x76>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	885b      	ldrh	r3, [r3, #2]
 8007796:	2b7f      	cmp	r3, #127	; 0x7f
 8007798:	d829      	bhi.n	80077ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d104      	bne.n	80077bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9a3 	bl	8007b00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ba:	e01d      	b.n	80077f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7bfa      	ldrb	r2, [r7, #15]
 80077c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fe1d 	bl	8008408 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa44 	bl	8007c5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e2:	e009      	b.n	80077f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ec:	e004      	b.n	80077f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f985 	bl	8007b00 <USBD_CtlError>
  }
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	885b      	ldrh	r3, [r3, #2]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	4b4c      	ldr	r3, [pc, #304]	; (8007948 <USBD_SetConfig+0x148>)
 8007816:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007818:	4b4b      	ldr	r3, [pc, #300]	; (8007948 <USBD_SetConfig+0x148>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d905      	bls.n	800782c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f96c 	bl	8007b00 <USBD_CtlError>
    return USBD_FAIL;
 8007828:	2303      	movs	r3, #3
 800782a:	e088      	b.n	800793e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d002      	beq.n	800783e <USBD_SetConfig+0x3e>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d025      	beq.n	8007888 <USBD_SetConfig+0x88>
 800783c:	e071      	b.n	8007922 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800783e:	4b42      	ldr	r3, [pc, #264]	; (8007948 <USBD_SetConfig+0x148>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01c      	beq.n	8007880 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007846:	4b40      	ldr	r3, [pc, #256]	; (8007948 <USBD_SetConfig+0x148>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007850:	4b3d      	ldr	r3, [pc, #244]	; (8007948 <USBD_SetConfig+0x148>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f948 	bl	8006aec <USBD_SetClassConfig>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f949 	bl	8007b00 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800786e:	e065      	b.n	800793c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f9f3 	bl	8007c5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2203      	movs	r2, #3
 800787a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800787e:	e05d      	b.n	800793c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9eb 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 8007886:	e059      	b.n	800793c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007888:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <USBD_SetConfig+0x148>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <USBD_SetConfig+0x148>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078a2:	4b29      	ldr	r3, [pc, #164]	; (8007948 <USBD_SetConfig+0x148>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff f93b 	bl	8006b24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9d4 	bl	8007c5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b4:	e042      	b.n	800793c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <USBD_SetConfig+0x148>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d02a      	beq.n	800791a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff f929 	bl	8006b24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <USBD_SetConfig+0x148>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <USBD_SetConfig+0x148>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff f902 	bl	8006aec <USBD_SetClassConfig>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00f      	beq.n	8007912 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f903 	bl	8007b00 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff f90e 	bl	8006b24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007910:	e014      	b.n	800793c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9a2 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 8007918:	e010      	b.n	800793c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f99e 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 8007920:	e00c      	b.n	800793c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8eb 	bl	8007b00 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <USBD_SetConfig+0x148>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff f8f7 	bl	8006b24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000180 	.word	0x20000180

0800794c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d004      	beq.n	8007968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8cd 	bl	8007b00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007966:	e023      	b.n	80079b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	dc02      	bgt.n	800797a <USBD_GetConfig+0x2e>
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc03      	bgt.n	8007980 <USBD_GetConfig+0x34>
 8007978:	e015      	b.n	80079a6 <USBD_GetConfig+0x5a>
 800797a:	2b03      	cmp	r3, #3
 800797c:	d00b      	beq.n	8007996 <USBD_GetConfig+0x4a>
 800797e:	e012      	b.n	80079a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3308      	adds	r3, #8
 800798a:	2201      	movs	r2, #1
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f927 	bl	8007be2 <USBD_CtlSendData>
        break;
 8007994:	e00c      	b.n	80079b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	2201      	movs	r2, #1
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f91f 	bl	8007be2 <USBD_CtlSendData>
        break;
 80079a4:	e004      	b.n	80079b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f8a9 	bl	8007b00 <USBD_CtlError>
        break;
 80079ae:	bf00      	nop
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d81e      	bhi.n	8007a0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	88db      	ldrh	r3, [r3, #6]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d004      	beq.n	80079e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f890 	bl	8007b00 <USBD_CtlError>
        break;
 80079e0:	e01a      	b.n	8007a18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	330c      	adds	r3, #12
 8007a02:	2202      	movs	r2, #2
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8eb 	bl	8007be2 <USBD_CtlSendData>
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f875 	bl	8007b00 <USBD_CtlError>
      break;
 8007a16:	bf00      	nop
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d106      	bne.n	8007a40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f90e 	bl	8007c5c <USBD_CtlSendStatus>
  }
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d80b      	bhi.n	8007a78 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d10c      	bne.n	8007a82 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8f3 	bl	8007c5c <USBD_CtlSendStatus>
      }
      break;
 8007a76:	e004      	b.n	8007a82 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f840 	bl	8007b00 <USBD_CtlError>
      break;
 8007a80:	e000      	b.n	8007a84 <USBD_ClrFeature+0x3c>
      break;
 8007a82:	bf00      	nop
  }
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fabb 	bl	8007032 <SWAPBYTE>
 8007abc:	4603      	mov	r3, r0
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff faae 	bl	8007032 <SWAPBYTE>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff faa1 	bl	8007032 <SWAPBYTE>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	80da      	strh	r2, [r3, #6]
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0a:	2180      	movs	r1, #128	; 0x80
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fc11 	bl	8008334 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b12:	2100      	movs	r1, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fc0d 	bl	8008334 <USBD_LL_StallEP>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d036      	beq.n	8007ba6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b3c:	6938      	ldr	r0, [r7, #16]
 8007b3e:	f000 f836 	bl	8007bae <USBD_GetLen>
 8007b42:	4603      	mov	r3, r0
 8007b44:	3301      	adds	r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	7812      	ldrb	r2, [r2, #0]
 8007b5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	4413      	add	r3, r2
 8007b68:	2203      	movs	r2, #3
 8007b6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b72:	e013      	b.n	8007b9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3301      	adds	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
    idx++;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e7      	bne.n	8007b74 <USBD_GetString+0x52>
 8007ba4:	e000      	b.n	8007ba8 <USBD_GetString+0x86>
    return;
 8007ba6:	bf00      	nop
  }
}
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bbe:	e005      	b.n	8007bcc <USBD_GetLen+0x1e>
  {
    len++;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f5      	bne.n	8007bc0 <USBD_GetLen+0x12>
  }

  return len;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	2100      	movs	r1, #0
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fc1c 	bl	8008446 <USBD_LL_Transmit>

  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fc0b 	bl	8008446 <USBD_LL_Transmit>

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fc1b 	bl	8008488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2204      	movs	r2, #4
 8007c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fbe7 	bl	8008446 <USBD_LL_Transmit>

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c92:	2300      	movs	r3, #0
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fbf5 	bl	8008488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cac:	2200      	movs	r2, #0
 8007cae:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <MX_USB_DEVICE_Init+0x40>)
 8007cb0:	480e      	ldr	r0, [pc, #56]	; (8007cec <MX_USB_DEVICE_Init+0x44>)
 8007cb2:	f7fe fead 	bl	8006a10 <USBD_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cbc:	f7f8 fef8 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007cc0:	490b      	ldr	r1, [pc, #44]	; (8007cf0 <MX_USB_DEVICE_Init+0x48>)
 8007cc2:	480a      	ldr	r0, [pc, #40]	; (8007cec <MX_USB_DEVICE_Init+0x44>)
 8007cc4:	f7fe fed4 	bl	8006a70 <USBD_RegisterClass>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cce:	f7f8 feef 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cd2:	4806      	ldr	r0, [pc, #24]	; (8007cec <MX_USB_DEVICE_Init+0x44>)
 8007cd4:	f7fe fef3 	bl	8006abe <USBD_Start>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007cde:	f7f8 fee7 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000114 	.word	0x20000114
 8007cec:	20000354 	.word	0x20000354
 8007cf0:	2000000c 	.word	0x2000000c

08007cf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2212      	movs	r2, #18
 8007d04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20000130 	.word	0x20000130

08007d18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	6039      	str	r1, [r7, #0]
 8007d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2204      	movs	r2, #4
 8007d28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	20000144 	.word	0x20000144

08007d3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4907      	ldr	r1, [pc, #28]	; (8007d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d52:	4808      	ldr	r0, [pc, #32]	; (8007d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d54:	f7ff fee5 	bl	8007b22 <USBD_GetString>
 8007d58:	e004      	b.n	8007d64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	4904      	ldr	r1, [pc, #16]	; (8007d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d5e:	4805      	ldr	r0, [pc, #20]	; (8007d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d60:	f7ff fedf 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000624 	.word	0x20000624
 8007d74:	080085c4 	.word	0x080085c4

08007d78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4904      	ldr	r1, [pc, #16]	; (8007d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d88:	4804      	ldr	r0, [pc, #16]	; (8007d9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d8a:	f7ff feca 	bl	8007b22 <USBD_GetString>
  return USBD_StrDesc;
 8007d8e:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000624 	.word	0x20000624
 8007d9c:	080085dc 	.word	0x080085dc

08007da0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	221a      	movs	r2, #26
 8007db0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007db2:	f000 f843 	bl	8007e3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007db6:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000148 	.word	0x20000148

08007dc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	4907      	ldr	r1, [pc, #28]	; (8007df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dda:	4808      	ldr	r0, [pc, #32]	; (8007dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ddc:	f7ff fea1 	bl	8007b22 <USBD_GetString>
 8007de0:	e004      	b.n	8007dec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4904      	ldr	r1, [pc, #16]	; (8007df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007de6:	4805      	ldr	r0, [pc, #20]	; (8007dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007de8:	f7ff fe9b 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000624 	.word	0x20000624
 8007dfc:	080085f0 	.word	0x080085f0

08007e00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	6039      	str	r1, [r7, #0]
 8007e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4907      	ldr	r1, [pc, #28]	; (8007e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e16:	4808      	ldr	r0, [pc, #32]	; (8007e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e18:	f7ff fe83 	bl	8007b22 <USBD_GetString>
 8007e1c:	e004      	b.n	8007e28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4904      	ldr	r1, [pc, #16]	; (8007e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e22:	4805      	ldr	r0, [pc, #20]	; (8007e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e24:	f7ff fe7d 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000624 	.word	0x20000624
 8007e38:	080085fc 	.word	0x080085fc

08007e3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e42:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <Get_SerialNum+0x44>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <Get_SerialNum+0x48>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <Get_SerialNum+0x4c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4413      	add	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e62:	2208      	movs	r2, #8
 8007e64:	4909      	ldr	r1, [pc, #36]	; (8007e8c <Get_SerialNum+0x50>)
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f814 	bl	8007e94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	4908      	ldr	r1, [pc, #32]	; (8007e90 <Get_SerialNum+0x54>)
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f000 f80f 	bl	8007e94 <IntToUnicode>
  }
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	1fff7a10 	.word	0x1fff7a10
 8007e84:	1fff7a14 	.word	0x1fff7a14
 8007e88:	1fff7a18 	.word	0x1fff7a18
 8007e8c:	2000014a 	.word	0x2000014a
 8007e90:	2000015a 	.word	0x2000015a

08007e94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
 8007eaa:	e027      	b.n	8007efc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	0f1b      	lsrs	r3, r3, #28
 8007eb0:	2b09      	cmp	r3, #9
 8007eb2:	d80b      	bhi.n	8007ecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	0f1b      	lsrs	r3, r3, #28
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	440b      	add	r3, r1
 8007ec4:	3230      	adds	r2, #48	; 0x30
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	e00a      	b.n	8007ee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	0f1b      	lsrs	r3, r3, #28
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	440b      	add	r3, r1
 8007edc:	3237      	adds	r2, #55	; 0x37
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	3301      	adds	r3, #1
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
 8007efc:	7dfa      	ldrb	r2, [r7, #23]
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3d3      	bcc.n	8007eac <IntToUnicode+0x18>
  }
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	; 0x28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f1c:	f107 0314 	add.w	r3, r7, #20
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	60da      	str	r2, [r3, #12]
 8007f2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f34:	d158      	bne.n	8007fe8 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	4a2c      	ldr	r2, [pc, #176]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	6313      	str	r3, [r2, #48]	; 0x30
 8007f46:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	4619      	mov	r1, r3
 8007f66:	4823      	ldr	r0, [pc, #140]	; (8007ff4 <HAL_PCD_MspInit+0xe0>)
 8007f68:	f7fa f8fc 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8007f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f72:	2302      	movs	r3, #2
 8007f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f7e:	230a      	movs	r3, #10
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8007f82:	f107 0314 	add.w	r3, r7, #20
 8007f86:	4619      	mov	r1, r3
 8007f88:	481a      	ldr	r0, [pc, #104]	; (8007ff4 <HAL_PCD_MspInit+0xe0>)
 8007f8a:	f7fa f8eb 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f94:	2302      	movs	r3, #2
 8007f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fa0:	230a      	movs	r3, #10
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fa4:	f107 0314 	add.w	r3, r7, #20
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4812      	ldr	r0, [pc, #72]	; (8007ff4 <HAL_PCD_MspInit+0xe0>)
 8007fac:	f7fa f8da 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb4:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	6353      	str	r3, [r2, #52]	; 0x34
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc4:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fca:	6453      	str	r3, [r2, #68]	; 0x44
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_PCD_MspInit+0xdc>)
 8007fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2100      	movs	r1, #0
 8007fdc:	2043      	movs	r0, #67	; 0x43
 8007fde:	f7f9 fd1a 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fe2:	2043      	movs	r0, #67	; 0x43
 8007fe4:	f7f9 fd33 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3728      	adds	r7, #40	; 0x28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	40020000 	.word	0x40020000

08007ff8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fda0 	bl	8006b54 <USBD_LL_SetupStage>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	4619      	mov	r1, r3
 8008046:	f7fe fdda 	bl	8006bfe <USBD_LL_DataOutStage>
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	3348      	adds	r3, #72	; 0x48
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	4619      	mov	r1, r3
 800807a:	f7fe fe23 	bl	8006cc4 <USBD_LL_DataInStage>
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe ff37 	bl	8006f08 <USBD_LL_SOF>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
 80080ba:	e008      	b.n	80080ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d102      	bne.n	80080ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e001      	b.n	80080ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080ca:	f7f8 fcf1 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080d4:	7bfa      	ldrb	r2, [r7, #15]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fed7 	bl	8006e8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fe83 	bl	8006df0 <USBD_LL_Reset>
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fed2 	bl	8006eac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <HAL_PCD_SuspendCallback+0x48>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4a03      	ldr	r2, [pc, #12]	; (800813c <HAL_PCD_SuspendCallback+0x48>)
 800812e:	f043 0306 	orr.w	r3, r3, #6
 8008132:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	e000ed00 	.word	0xe000ed00

08008140 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fec2 	bl	8006ed8 <USBD_LL_Resume>
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	4611      	mov	r1, r2
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe ff10 	bl	8006f98 <USBD_LL_IsoOUTIncomplete>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fed8 	bl	8006f4c <USBD_LL_IsoINIncomplete>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe ff16 	bl	8006fe4 <USBD_LL_DevConnected>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe ff13 	bl	8006ffa <USBD_LL_DevDisconnected>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d13c      	bne.n	8008266 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081ec:	4a20      	ldr	r2, [pc, #128]	; (8008270 <USBD_LL_Init+0x94>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <USBD_LL_Init+0x94>)
 80081f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081fc:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <USBD_LL_Init+0x94>)
 80081fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008202:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008204:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <USBD_LL_Init+0x94>)
 8008206:	2204      	movs	r2, #4
 8008208:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800820a:	4b19      	ldr	r3, [pc, #100]	; (8008270 <USBD_LL_Init+0x94>)
 800820c:	2202      	movs	r2, #2
 800820e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <USBD_LL_Init+0x94>)
 8008212:	2200      	movs	r2, #0
 8008214:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008216:	4b16      	ldr	r3, [pc, #88]	; (8008270 <USBD_LL_Init+0x94>)
 8008218:	2202      	movs	r2, #2
 800821a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800821c:	4b14      	ldr	r3, [pc, #80]	; (8008270 <USBD_LL_Init+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <USBD_LL_Init+0x94>)
 8008224:	2200      	movs	r2, #0
 8008226:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <USBD_LL_Init+0x94>)
 800822a:	2200      	movs	r2, #0
 800822c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800822e:	4b10      	ldr	r3, [pc, #64]	; (8008270 <USBD_LL_Init+0x94>)
 8008230:	2200      	movs	r2, #0
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <USBD_LL_Init+0x94>)
 8008236:	2200      	movs	r2, #0
 8008238:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800823a:	480d      	ldr	r0, [pc, #52]	; (8008270 <USBD_LL_Init+0x94>)
 800823c:	f7fa ff2c 	bl	8003098 <HAL_PCD_Init>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008246:	f7f8 fc33 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800824a:	2180      	movs	r1, #128	; 0x80
 800824c:	4808      	ldr	r0, [pc, #32]	; (8008270 <USBD_LL_Init+0x94>)
 800824e:	f7fc f872 	bl	8004336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008252:	2240      	movs	r2, #64	; 0x40
 8008254:	2100      	movs	r1, #0
 8008256:	4806      	ldr	r0, [pc, #24]	; (8008270 <USBD_LL_Init+0x94>)
 8008258:	f7fc f826 	bl	80042a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800825c:	2280      	movs	r2, #128	; 0x80
 800825e:	2101      	movs	r1, #1
 8008260:	4803      	ldr	r0, [pc, #12]	; (8008270 <USBD_LL_Init+0x94>)
 8008262:	f7fc f821 	bl	80042a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000824 	.word	0x20000824

08008274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb f821 	bl	80032d2 <HAL_PCD_Start>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f930 	bl	80084fc <USBD_Get_USB_Status>
 800829c:	4603      	mov	r3, r0
 800829e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	461a      	mov	r2, r3
 80082b8:	4603      	mov	r3, r0
 80082ba:	70fb      	strb	r3, [r7, #3]
 80082bc:	460b      	mov	r3, r1
 80082be:	70bb      	strb	r3, [r7, #2]
 80082c0:	4613      	mov	r3, r2
 80082c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082d2:	78bb      	ldrb	r3, [r7, #2]
 80082d4:	883a      	ldrh	r2, [r7, #0]
 80082d6:	78f9      	ldrb	r1, [r7, #3]
 80082d8:	f7fb fc05 	bl	8003ae6 <HAL_PCD_EP_Open>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f90a 	bl	80084fc <USBD_Get_USB_Status>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	4611      	mov	r1, r2
 8008314:	4618      	mov	r0, r3
 8008316:	f7fb fc4e 	bl	8003bb6 <HAL_PCD_EP_Close>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f8eb 	bl	80084fc <USBD_Get_USB_Status>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832a:	7bbb      	ldrb	r3, [r7, #14]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7fb fd0e 	bl	8003d74 <HAL_PCD_EP_SetStall>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4618      	mov	r0, r3
 8008360:	f000 f8cc 	bl	80084fc <USBD_Get_USB_Status>
 8008364:	4603      	mov	r3, r0
 8008366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008368:	7bbb      	ldrb	r3, [r7, #14]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f7fb fd53 	bl	8003e3c <HAL_PCD_EP_ClrStall>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f8ad 	bl	80084fc <USBD_Get_USB_Status>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da0b      	bge.n	80083e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	333e      	adds	r3, #62	; 0x3e
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	e00b      	b.n	80083fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	1a9b      	subs	r3, r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	440b      	add	r3, r1
 80083f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f7fb fb38 	bl	8003a9c <HAL_PCD_SetAddress>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f862 	bl	80084fc <USBD_Get_USB_Status>
 8008438:	4603      	mov	r3, r0
 800843a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800843c:	7bbb      	ldrb	r3, [r7, #14]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
 8008452:	460b      	mov	r3, r1
 8008454:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008464:	7af9      	ldrb	r1, [r7, #11]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f7fb fc39 	bl	8003ce0 <HAL_PCD_EP_Transmit>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f841 	bl	80084fc <USBD_Get_USB_Status>
 800847a:	4603      	mov	r3, r0
 800847c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800847e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	460b      	mov	r3, r1
 8008496:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084a6:	7af9      	ldrb	r1, [r7, #11]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	f7fb fbcd 	bl	8003c4a <HAL_PCD_EP_Receive>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f820 	bl	80084fc <USBD_Get_USB_Status>
 80084bc:	4603      	mov	r3, r0
 80084be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084d4:	4b03      	ldr	r3, [pc, #12]	; (80084e4 <USBD_static_malloc+0x18>)
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000184 	.word	0x20000184

080084e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	2b03      	cmp	r3, #3
 800850e:	d817      	bhi.n	8008540 <USBD_Get_USB_Status+0x44>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_Get_USB_Status+0x1c>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	08008529 	.word	0x08008529
 800851c:	0800852f 	.word	0x0800852f
 8008520:	08008535 	.word	0x08008535
 8008524:	0800853b 	.word	0x0800853b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e00b      	b.n	8008546 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800852e:	2303      	movs	r3, #3
 8008530:	73fb      	strb	r3, [r7, #15]
    break;
 8008532:	e008      	b.n	8008546 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	e005      	b.n	8008546 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800853a:	2303      	movs	r3, #3
 800853c:	73fb      	strb	r3, [r7, #15]
    break;
 800853e:	e002      	b.n	8008546 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	bf00      	nop
  }
  return usb_status;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4d0d      	ldr	r5, [pc, #52]	; (800858c <__libc_init_array+0x38>)
 8008558:	4c0d      	ldr	r4, [pc, #52]	; (8008590 <__libc_init_array+0x3c>)
 800855a:	1b64      	subs	r4, r4, r5
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	2600      	movs	r6, #0
 8008560:	42a6      	cmp	r6, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	4d0b      	ldr	r5, [pc, #44]	; (8008594 <__libc_init_array+0x40>)
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <__libc_init_array+0x44>)
 8008568:	f000 f820 	bl	80085ac <_init>
 800856c:	1b64      	subs	r4, r4, r5
 800856e:	10a4      	asrs	r4, r4, #2
 8008570:	2600      	movs	r6, #0
 8008572:	42a6      	cmp	r6, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f855 3b04 	ldr.w	r3, [r5], #4
 800857c:	4798      	blx	r3
 800857e:	3601      	adds	r6, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f855 3b04 	ldr.w	r3, [r5], #4
 8008586:	4798      	blx	r3
 8008588:	3601      	adds	r6, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	08008634 	.word	0x08008634
 8008590:	08008634 	.word	0x08008634
 8008594:	08008634 	.word	0x08008634
 8008598:	08008638 	.word	0x08008638

0800859c <memset>:
 800859c:	4402      	add	r2, r0
 800859e:	4603      	mov	r3, r0
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d100      	bne.n	80085a6 <memset+0xa>
 80085a4:	4770      	bx	lr
 80085a6:	f803 1b01 	strb.w	r1, [r3], #1
 80085aa:	e7f9      	b.n	80085a0 <memset+0x4>

080085ac <_init>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr

080085b8 <_fini>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr
