
xbox395.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008660  08008660  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008668  08008668  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000ac8  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c2c  20000c2c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a828  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b54  00000000  00000000  0003a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  0003f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bcd  00000000  00000000  00040930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a31  00000000  00000000  000664fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d734a  00000000  00000000  0007ff2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00157278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e1c  00000000  00000000  001572cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085e0 	.word	0x080085e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	080085e0 	.word	0x080085e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd3e 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f84e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9ca 	bl	8000864 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f914 	bl	80006fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f940 	bl	8000758 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f96e 	bl	80007b8 <MX_SPI1_Init>
  MX_DMA_Init();
 80004dc:	f000 f9a2 	bl	8000824 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8ac 	bl	800063c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 fbfa 	bl	8007cdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 80004e8:	2202      	movs	r2, #2
 80004ea:	491c      	ldr	r1, [pc, #112]	; (800055c <main+0x9c>)
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <main+0xa0>)
 80004ee:	f000 fe03 	bl	80010f8 <HAL_ADC_Start_DMA>
  uint16_t buttons_state;
  //uint16_t joystick = 2048;
  int i;
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 80004f2:	2202      	movs	r2, #2
 80004f4:	4919      	ldr	r1, [pc, #100]	; (800055c <main+0x9c>)
 80004f6:	481a      	ldr	r0, [pc, #104]	; (8000560 <main+0xa0>)
 80004f8:	f000 fdfe 	bl	80010f8 <HAL_ADC_Start_DMA>
	  if(joystick_val[0] > 3000){
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <main+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000504:	4293      	cmp	r3, r2
 8000506:	d905      	bls.n	8000514 <main+0x54>
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050e:	4815      	ldr	r0, [pc, #84]	; (8000564 <main+0xa4>)
 8000510:	f001 ffde 	bl	80024d0 <HAL_GPIO_WritePin>
	  }
	  if(joystick_val[0] < 1000){
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800051c:	d205      	bcs.n	800052a <main+0x6a>
	  		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0xa4>)
 8000526:	f001 ffd3 	bl	80024d0 <HAL_GPIO_WritePin>
	  	  }
	  if(joystick_val[1] > 3000){
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x9c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000532:	4293      	cmp	r3, r2
 8000534:	d905      	bls.n	8000542 <main+0x82>
	  		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0xa4>)
 800053e:	f001 ffc7 	bl	80024d0 <HAL_GPIO_WritePin>
	  	  }
	  if(joystick_val[1] > 1000){
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0x9c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054a:	d9d2      	bls.n	80004f2 <main+0x32>
	  		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0xa4>)
 8000554:	f001 ffbc 	bl	80024d0 <HAL_GPIO_WritePin>
	  HAL_ADC_Start_DMA(&hadc1, joystick_val, 2);
 8000558:	e7cb      	b.n	80004f2 <main+0x32>
 800055a:	bf00      	nop
 800055c:	20000198 	.word	0x20000198
 8000560:	20000208 	.word	0x20000208
 8000564:	40020c00 	.word	0x40020c00

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 f82a 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fed8 	bl	80043a4 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 fa57 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f939 	bl	8004894 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 fa40 	bl	8000aac <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <MX_ADC1_Init+0xb8>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_ADC1_Init+0xb4>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000664:	2201      	movs	r2, #1
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0xb4>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0xb4>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0xb4>)
 800068a:	2202      	movs	r2, #2
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_ADC1_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_ADC1_Init+0xb4>)
 800069e:	f000 fce7 	bl	8001070 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 fa00 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006b4:	2307      	movs	r3, #7
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ADC1_Init+0xb4>)
 80006be:	f000 fe49 	bl	8001354 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c8:	f000 f9f0 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC1_Init+0xb4>)
 80006da:	f000 fe3b 	bl	8001354 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e4:	f000 f9e2 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000208 	.word	0x20000208
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f001 fee3 	bl	8002504 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f9b2 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200001a0 	.word	0x200001a0
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_I2S3_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MX_I2S3_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_I2S3_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_I2S3_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2S3_Init+0x54>)
 8000798:	f001 fff8 	bl	800278c <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 f983 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000308 	.word	0x20000308
 80007b0:	40003c00 	.word	0x40003c00
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI1_Init+0x64>)
 800080a:	f004 fb6b 	bl	8004ee4 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f94a 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200002b0 	.word	0x200002b0
 8000820:	40013000 	.word	0x40013000

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DMA_Init+0x3c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <MX_DMA_Init+0x3c>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DMA_Init+0x3c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2038      	movs	r0, #56	; 0x38
 800084c:	f001 f8fd 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000850:	2038      	movs	r0, #56	; 0x38
 8000852:	f001 f916 	bl	8001a82 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b85      	ldr	r3, [pc, #532]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a84      	ldr	r2, [pc, #528]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b82      	ldr	r3, [pc, #520]	; (8000a94 <MX_GPIO_Init+0x230>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b7e      	ldr	r3, [pc, #504]	; (8000a94 <MX_GPIO_Init+0x230>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7d      	ldr	r2, [pc, #500]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7b      	ldr	r3, [pc, #492]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b77      	ldr	r3, [pc, #476]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a76      	ldr	r2, [pc, #472]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b74      	ldr	r3, [pc, #464]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b70      	ldr	r3, [pc, #448]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a6f      	ldr	r2, [pc, #444]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a68      	ldr	r2, [pc, #416]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <MX_GPIO_Init+0x230>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b62      	ldr	r3, [pc, #392]	; (8000a94 <MX_GPIO_Init+0x230>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a61      	ldr	r2, [pc, #388]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <MX_GPIO_Init+0x230>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2108      	movs	r1, #8
 8000926:	485c      	ldr	r0, [pc, #368]	; (8000a98 <MX_GPIO_Init+0x234>)
 8000928:	f001 fdd2 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	485a      	ldr	r0, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x238>)
 8000932:	f001 fdcd 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	2200      	movs	r2, #0
 8000938:	f24f 0110 	movw	r1, #61456	; 0xf010
 800093c:	4858      	ldr	r0, [pc, #352]	; (8000aa0 <MX_GPIO_Init+0x23c>)
 800093e:	f001 fdc7 	bl	80024d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	484f      	ldr	r0, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x234>)
 800095a:	f001 fc1d 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4849      	ldr	r0, [pc, #292]	; (8000a9c <MX_GPIO_Init+0x238>)
 8000976:	f001 fc0f 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON4_Pin BUTTON5_Pin
                           BUTTON6_Pin BUTTON7_Pin BUTTON8_Pin BUTTON9_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON4_Pin|BUTTON5_Pin
 800097a:	f640 3376 	movw	r3, #2934	; 0xb76
 800097e:	61fb      	str	r3, [r7, #28]
                          |BUTTON6_Pin|BUTTON7_Pin|BUTTON8_Pin|BUTTON9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4843      	ldr	r0, [pc, #268]	; (8000a9c <MX_GPIO_Init+0x238>)
 8000990:	f001 fc02 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000994:	2308      	movs	r3, #8
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a4:	2305      	movs	r3, #5
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	483b      	ldr	r0, [pc, #236]	; (8000a9c <MX_GPIO_Init+0x238>)
 80009b0:	f001 fbf2 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <MX_GPIO_Init+0x240>)
 80009ca:	f001 fbe5 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4831      	ldr	r0, [pc, #196]	; (8000aa8 <MX_GPIO_Init+0x244>)
 80009e2:	f001 fbd9 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON12_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON12_Pin;
 80009e6:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4827      	ldr	r0, [pc, #156]	; (8000a98 <MX_GPIO_Init+0x234>)
 80009fc:	f001 fbcc 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a12:	2305      	movs	r3, #5
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0x244>)
 8000a1e:	f001 fbbb 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_B_2_Pin JOYSTICK_B_1_Pin BUTTON10_Pin BUTTON11_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_B_2_Pin|JOYSTICK_B_1_Pin|BUTTON10_Pin|BUTTON11_Pin;
 8000a22:	f640 4306 	movw	r3, #3078	; 0xc06
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0x23c>)
 8000a38:	f001 fbae 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a40:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0x23c>)
 8000a56:	f001 fb9f 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0x23c>)
 8000a6e:	f001 fb93 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0x234>)
 8000a88:	f001 fb86 	bl	8002198 <HAL_GPIO_Init>

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 ff9c 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a3c      	ldr	r2, [pc, #240]	; (8000c18 <HAL_ADC_MspInit+0x110>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d172      	bne.n	8000c10 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_ADC_MspInit+0x114>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4823      	ldr	r0, [pc, #140]	; (8000c20 <HAL_ADC_MspInit+0x118>)
 8000b92:	f001 fb01 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 8000b96:	2303      	movs	r3, #3
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481e      	ldr	r0, [pc, #120]	; (8000c24 <HAL_ADC_MspInit+0x11c>)
 8000baa:	f001 faf5 	bl	8002198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_ADC_MspInit+0x124>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000be8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000bf6:	f000 ff5f 	bl	8001ab8 <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000c00:	f7ff ff54 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_ADC_MspInit+0x120>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000250 	.word	0x20000250
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	2312      	movs	r3, #18
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c80:	2304      	movs	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8c:	f001 fa84 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <HAL_I2S_MspInit+0xf0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d15a      	bne.n	8000da6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cf4:	23c0      	movs	r3, #192	; 0xc0
 8000cf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 ffaf 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff fece 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d64:	2310      	movs	r3, #16
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d74:	2306      	movs	r3, #6
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_I2S_MspInit+0xf8>)
 8000d80:	f001 fa0a 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d96:	2306      	movs	r3, #6
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_I2S_MspInit+0xfc>)
 8000da2:	f001 f9f9 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40003c00 	.word	0x40003c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_SPI_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e1a:	23e0      	movs	r3, #224	; 0xe0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_SPI_MspInit+0x8c>)
 8000e36:	f001 f9af 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40013000 	.word	0x40013000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f8a4 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eaa:	f000 ff0b 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000250 	.word	0x20000250

08000eb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <OTG_FS_IRQHandler+0x10>)
 8000ebe:	f002 fa55 	bl	800336c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000824 	.word	0x20000824

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f007 fb33 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff facd 	bl	80004c0 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000f34:	08008670 	.word	0x08008670
  ldr r2, =_sbss
 8000f38:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000f3c:	20000c2c 	.word	0x20000c2c

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fd61 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd9e 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fd79 	bl	8001a9e <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 fd41 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20000350 	.word	0x20000350

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000350 	.word	0x20000350

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd3a 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa68 	bl	8001598 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Start_DMA+0x1e>
 8001112:	2302      	movs	r3, #2
 8001114:	e0e9      	b.n	80012ea <HAL_ADC_Start_DMA+0x1f2>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d018      	beq.n	800115e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_ADC_Start_DMA+0x1fc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6d      	ldr	r2, [pc, #436]	; (80012f8 <HAL_ADC_Start_DMA+0x200>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9a      	lsrs	r2, r3, #18
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001150:	e002      	b.n	8001158 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	3b01      	subs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f9      	bne.n	8001152 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800116c:	d107      	bne.n	800117e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800117c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	f040 80a1 	bne.w	80012d0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011cc:	d106      	bne.n	80011dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f023 0206 	bic.w	r2, r3, #6
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
 80011da:	e002      	b.n	80011e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ADC_Start_DMA+0x204>)
 80011ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	4a43      	ldr	r2, [pc, #268]	; (8001300 <HAL_ADC_Start_DMA+0x208>)
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a42      	ldr	r2, [pc, #264]	; (8001304 <HAL_ADC_Start_DMA+0x20c>)
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	4a41      	ldr	r2, [pc, #260]	; (8001308 <HAL_ADC_Start_DMA+0x210>)
 8001204:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800120e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800121e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	334c      	adds	r3, #76	; 0x4c
 800123a:	4619      	mov	r1, r3
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f000 fce8 	bl	8001c14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12a      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_ADC_Start_DMA+0x214>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d015      	beq.n	8001286 <HAL_ADC_Start_DMA+0x18e>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <HAL_ADC_Start_DMA+0x218>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d105      	bne.n	8001270 <HAL_ADC_Start_DMA+0x178>
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ADC_Start_DMA+0x204>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00a      	beq.n	8001286 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_ADC_Start_DMA+0x21c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d136      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_ADC_Start_DMA+0x204>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	d130      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d129      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e020      	b.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_ADC_Start_DMA+0x214>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d11b      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d114      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	e00b      	b.n	80012e8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	40012300 	.word	0x40012300
 8001300:	08001791 	.word	0x08001791
 8001304:	0800184b 	.word	0x0800184b
 8001308:	08001867 	.word	0x08001867
 800130c:	40012000 	.word	0x40012000
 8001310:	40012100 	.word	0x40012100
 8001314:	40012200 	.word	0x40012200

08001318 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1c>
 800136c:	2302      	movs	r3, #2
 800136e:	e105      	b.n	800157c <HAL_ADC_ConfigChannel+0x228>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d925      	bls.n	80013cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68d9      	ldr	r1, [r3, #12]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	3b1e      	subs	r3, #30
 8001396:	2207      	movs	r2, #7
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68d9      	ldr	r1, [r3, #12]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4403      	add	r3, r0
 80013be:	3b1e      	subs	r3, #30
 80013c0:	409a      	lsls	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	e022      	b.n	8001412 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6919      	ldr	r1, [r3, #16]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	2207      	movs	r2, #7
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6919      	ldr	r1, [r3, #16]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	4603      	mov	r3, r0
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4403      	add	r3, r0
 8001408:	409a      	lsls	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b06      	cmp	r3, #6
 8001418:	d824      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b05      	subs	r3, #5
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b05      	subs	r3, #5
 8001456:	fa00 f203 	lsl.w	r2, r0, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	e04c      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d824      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b23      	subs	r3, #35	; 0x23
 800147e:	221f      	movs	r2, #31
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43da      	mvns	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	400a      	ands	r2, r1
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b23      	subs	r3, #35	; 0x23
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
 80014b4:	e023      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b41      	subs	r3, #65	; 0x41
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b41      	subs	r3, #65	; 0x41
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_ADC_ConfigChannel+0x234>)
 8001500:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_ADC_ConfigChannel+0x238>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d109      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1cc>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d105      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_ADC_ConfigChannel+0x238>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d123      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x21e>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d003      	beq.n	800153a <HAL_ADC_ConfigChannel+0x1e6>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b11      	cmp	r3, #17
 8001538:	d11b      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b10      	cmp	r3, #16
 800154c:	d111      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_ADC_ConfigChannel+0x23c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_ADC_ConfigChannel+0x240>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9a      	lsrs	r2, r3, #18
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001564:	e002      	b.n	800156c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	40012000 	.word	0x40012000
 8001590:	20000000 	.word	0x20000000
 8001594:	431bde83 	.word	0x431bde83

08001598 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a0:	4b79      	ldr	r3, [pc, #484]	; (8001788 <ADC_Init+0x1f0>)
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	021a      	lsls	r2, r3, #8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	4a58      	ldr	r2, [pc, #352]	; (800178c <ADC_Init+0x1f4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d022      	beq.n	8001676 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800163e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6899      	ldr	r1, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e00f      	b.n	8001696 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0202 	bic.w	r2, r2, #2
 80016a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e1b      	ldrb	r3, [r3, #24]
 80016b0:	005a      	lsls	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01b      	beq.n	80016fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	3b01      	subs	r3, #1
 80016f0:	035a      	lsls	r2, r3, #13
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	e007      	b.n	800170c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	3b01      	subs	r3, #1
 8001728:	051a      	lsls	r2, r3, #20
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6899      	ldr	r1, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174e:	025a      	lsls	r2, r3, #9
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6899      	ldr	r1, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	029a      	lsls	r2, r3, #10
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40012300 	.word	0x40012300
 800178c:	0f000001 	.word	0x0f000001

08001790 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d13c      	bne.n	8001824 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d12b      	bne.n	800181c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d127      	bne.n	800181c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d119      	bne.n	800181c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0220 	bic.w	r2, r2, #32
 80017f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fd7b 	bl	8001318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001822:	e00e      	b.n	8001842 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fd85 	bl	8001340 <HAL_ADC_ErrorCallback>
}
 8001836:	e004      	b.n	8001842 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fd67 	bl	800132c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f043 0204 	orr.w	r2, r3, #4
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff fd5a 	bl	8001340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	; (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff29 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff3e 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff8e 	bl	8001988 <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5d 	bl	8001934 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff31 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff faa4 	bl	8001010 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e099      	b.n	8001c08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af4:	e00f      	b.n	8001b16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af6:	f7ff fa8b 	bl	8001010 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d908      	bls.n	8001b16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e078      	b.n	8001c08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e8      	bne.n	8001af6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_DMA_Init+0x158>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d107      	bne.n	8001b80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d117      	bne.n	8001bda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00e      	beq.n	8001bda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fa6f 	bl	80020a0 <DMA_CheckFifoParam>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e016      	b.n	8001c08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa26 	bl	8002034 <DMA_CalcBaseAndBitshift>
 8001be8:	4603      	mov	r3, r0
 8001bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	f010803f 	.word	0xf010803f

08001c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_Start_IT+0x26>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e040      	b.n	8001cbc <HAL_DMA_Start_IT+0xa8>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d12f      	bne.n	8001cae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f9b8 	bl	8001fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	223f      	movs	r2, #63	; 0x3f
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0216 	orr.w	r2, r2, #22
 8001c82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0208 	orr.w	r2, r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e005      	b.n	8001cba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_DMA_IRQHandler+0x258>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a92      	ldr	r2, [pc, #584]	; (8001f20 <HAL_DMA_IRQHandler+0x25c>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0a9b      	lsrs	r3, r3, #10
 8001cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2208      	movs	r2, #8
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01a      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2201      	movs	r2, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d012      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2201      	movs	r2, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d012      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2204      	movs	r2, #4
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2210      	movs	r2, #16
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d043      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03c      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d018      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d024      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e01f      	b.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e016      	b.n	8001e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0208 	bic.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2220      	movs	r2, #32
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 808e 	beq.w	8001f62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8086 	beq.w	8001f62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d136      	bne.n	8001edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0216 	bic.w	r2, r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_DMA_IRQHandler+0x1da>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0208 	bic.w	r2, r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	223f      	movs	r2, #63	; 0x3f
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d07d      	beq.n	8001fce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
        }
        return;
 8001eda:	e078      	b.n	8001fce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d030      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e02b      	b.n	8001f62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d027      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
 8001f1a:	e022      	b.n	8001f62 <HAL_DMA_IRQHandler+0x29e>
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0210 	bic.w	r2, r2, #16
 8001f40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d032      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d022      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d307      	bcc.n	8001faa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f2      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x2ca>
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001faa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fce:	bf00      	nop
    }
  }
}
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d108      	bne.n	8002018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002016:	e007      	b.n	8002028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3b10      	subs	r3, #16
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <DMA_CalcBaseAndBitshift+0x64>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <DMA_CalcBaseAndBitshift+0x68>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d909      	bls.n	8002076 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	; 0x58
 8002074:	e007      	b.n	8002086 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	aaaaaaab 	.word	0xaaaaaaab
 800209c:	08008658 	.word	0x08008658

080020a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11f      	bne.n	80020fa <DMA_CheckFifoParam+0x5a>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d856      	bhi.n	800216e <DMA_CheckFifoParam+0xce>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <DMA_CheckFifoParam+0x28>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020eb 	.word	0x080020eb
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	0800216f 	.word	0x0800216f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d046      	beq.n	8002172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e8:	e043      	b.n	8002172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f2:	d140      	bne.n	8002176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f8:	e03d      	b.n	8002176 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d121      	bne.n	8002148 <DMA_CheckFifoParam+0xa8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d837      	bhi.n	800217a <DMA_CheckFifoParam+0xda>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <DMA_CheckFifoParam+0x70>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002121 	.word	0x08002121
 8002114:	08002127 	.word	0x08002127
 8002118:	08002121 	.word	0x08002121
 800211c:	08002139 	.word	0x08002139
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e030      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d025      	beq.n	800217e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002136:	e022      	b.n	800217e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002140:	d11f      	bne.n	8002182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002146:	e01c      	b.n	8002182 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d903      	bls.n	8002156 <DMA_CheckFifoParam+0xb6>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002154:	e018      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      break;
 800215a:	e015      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e00b      	b.n	8002186 <DMA_CheckFifoParam+0xe6>
      break;
 800216e:	bf00      	nop
 8002170:	e00a      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e008      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e006      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e004      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e002      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;   
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
    }
  } 
  
  return status; 
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e16b      	b.n	800248c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 815a 	bne.w	8002486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d005      	beq.n	80021ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d130      	bne.n	800224c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80b4 	beq.w	8002486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <HAL_GPIO_Init+0x30c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a5f      	ldr	r2, [pc, #380]	; (80024a4 <HAL_GPIO_Init+0x30c>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_GPIO_Init+0x30c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_GPIO_Init+0x310>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_GPIO_Init+0x314>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02b      	beq.n	80023be <HAL_GPIO_Init+0x226>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x318>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d025      	beq.n	80023ba <HAL_GPIO_Init+0x222>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x31c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01f      	beq.n	80023b6 <HAL_GPIO_Init+0x21e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x320>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <HAL_GPIO_Init+0x21a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x324>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x216>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x328>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x212>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x32c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x20e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x330>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x20a>
 800239e:	2307      	movs	r3, #7
 80023a0:	e00e      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023a2:	2308      	movs	r3, #8
 80023a4:	e00c      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023a6:	2306      	movs	r3, #6
 80023a8:	e00a      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023aa:	2305      	movs	r3, #5
 80023ac:	e008      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023ae:	2304      	movs	r3, #4
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x228>
 80023be:	2300      	movs	r3, #0
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_GPIO_Init+0x310>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_GPIO_Init+0x334>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002402:	4a32      	ldr	r2, [pc, #200]	; (80024cc <HAL_GPIO_Init+0x334>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_GPIO_Init+0x334>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_GPIO_Init+0x334>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3301      	adds	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f ae90 	bls.w	80021b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e12b      	b.n	800276e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fb80 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2224      	movs	r2, #36	; 0x24
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002568:	f002 fb68 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a81      	ldr	r2, [pc, #516]	; (8002778 <HAL_I2C_Init+0x274>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d807      	bhi.n	8002588 <HAL_I2C_Init+0x84>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a80      	ldr	r2, [pc, #512]	; (800277c <HAL_I2C_Init+0x278>)
 800257c:	4293      	cmp	r3, r2
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e006      	b.n	8002596 <HAL_I2C_Init+0x92>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a7d      	ldr	r2, [pc, #500]	; (8002780 <HAL_I2C_Init+0x27c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0e7      	b.n	800276e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a78      	ldr	r2, [pc, #480]	; (8002784 <HAL_I2C_Init+0x280>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	; (8002778 <HAL_I2C_Init+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d802      	bhi.n	80025d8 <HAL_I2C_Init+0xd4>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3301      	adds	r3, #1
 80025d6:	e009      	b.n	80025ec <HAL_I2C_Init+0xe8>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	4a69      	ldr	r2, [pc, #420]	; (8002788 <HAL_I2C_Init+0x284>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	495c      	ldr	r1, [pc, #368]	; (8002778 <HAL_I2C_Init+0x274>)
 8002608:	428b      	cmp	r3, r1
 800260a:	d819      	bhi.n	8002640 <HAL_I2C_Init+0x13c>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e59      	subs	r1, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fbb1 f3f3 	udiv	r3, r1, r3
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_I2C_Init+0x138>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e59      	subs	r1, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fbb1 f3f3 	udiv	r3, r1, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	e051      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800263c:	2304      	movs	r3, #4
 800263e:	e04f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d111      	bne.n	800266c <HAL_I2C_Init+0x168>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e012      	b.n	8002692 <HAL_I2C_Init+0x18e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	0099      	lsls	r1, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x196>
 8002696:	2301      	movs	r3, #1
 8002698:	e022      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10e      	bne.n	80026c0 <HAL_I2C_Init+0x1bc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1e58      	subs	r0, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	440b      	add	r3, r1
 80026b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6809      	ldr	r1, [r1, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800270e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6911      	ldr	r1, [r2, #16]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	000186a0 	.word	0x000186a0
 800277c:	001e847f 	.word	0x001e847f
 8002780:	003d08ff 	.word	0x003d08ff
 8002784:	431bde83 	.word	0x431bde83
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e128      	b.n	80029f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a90      	ldr	r2, [pc, #576]	; (80029f8 <HAL_I2S_Init+0x26c>)
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fa81 	bl	8000cc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d060      	beq.n	80028ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027f2:	2310      	movs	r3, #16
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e001      	b.n	80027fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d802      	bhi.n	800280a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800280a:	2001      	movs	r0, #1
 800280c:	f002 fb0c 	bl	8004e28 <HAL_RCCEx_GetPeriphCLKFreq>
 8002810:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281a:	d125      	bne.n	8002868 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	fbb2 f2f3 	udiv	r2, r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	3305      	adds	r3, #5
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e01f      	b.n	8002886 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	3305      	adds	r3, #5
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e00e      	b.n	8002886 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	3305      	adds	r3, #5
 8002884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <HAL_I2S_Init+0x270>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e003      	b.n	80028b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d902      	bls.n	80028c0 <HAL_I2S_Init+0x134>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2bff      	cmp	r3, #255	; 0xff
 80028be:	d907      	bls.n	80028d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e08f      	b.n	80029f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	ea42 0103 	orr.w	r1, r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6851      	ldr	r1, [r2, #4]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6992      	ldr	r2, [r2, #24]
 8002906:	430a      	orrs	r2, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002912:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d161      	bne.n	80029e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_I2S_Init+0x274>)
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a37      	ldr	r2, [pc, #220]	; (8002a04 <HAL_I2S_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_I2S_Init+0x1a4>
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_I2S_Init+0x27c>)
 800292e:	e001      	b.n	8002934 <HAL_I2S_Init+0x1a8>
 8002930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4932      	ldr	r1, [pc, #200]	; (8002a04 <HAL_I2S_Init+0x278>)
 800293c:	428a      	cmp	r2, r1
 800293e:	d101      	bne.n	8002944 <HAL_I2S_Init+0x1b8>
 8002940:	4a31      	ldr	r2, [pc, #196]	; (8002a08 <HAL_I2S_Init+0x27c>)
 8002942:	e001      	b.n	8002948 <HAL_I2S_Init+0x1bc>
 8002944:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002948:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <HAL_I2S_Init+0x278>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_I2S_Init+0x1d4>
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <HAL_I2S_Init+0x27c>)
 800295e:	e001      	b.n	8002964 <HAL_I2S_Init+0x1d8>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002964:	2202      	movs	r2, #2
 8002966:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_I2S_Init+0x278>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2S_Init+0x1ea>
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_I2S_Init+0x27c>)
 8002974:	e001      	b.n	800297a <HAL_I2S_Init+0x1ee>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002986:	d003      	beq.n	8002990 <HAL_I2S_Init+0x204>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e001      	b.n	800299c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b29a      	uxth	r2, r3
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_I2S_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_I2S_Init+0x24c>
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_I2S_Init+0x27c>)
 80029d6:	e001      	b.n	80029dc <HAL_I2S_Init+0x250>
 80029d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029dc:	897a      	ldrh	r2, [r7, #10]
 80029de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	08002b03 	.word	0x08002b03
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	08002c19 	.word	0x08002c19
 8002a04:	40003800 	.word	0x40003800
 8002a08:	40003400 	.word	0x40003400

08002a0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffb8 	bl	8002a0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff93 	bl	8002a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d13a      	bne.n	8002b94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d109      	bne.n	8002b3c <I2S_IRQHandler+0x3a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d102      	bne.n	8002b3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffb4 	bl	8002aa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d126      	bne.n	8002b94 <I2S_IRQHandler+0x92>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d11f      	bne.n	8002b94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff50 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d136      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d109      	bne.n	8002bbe <I2S_IRQHandler+0xbc>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d102      	bne.n	8002bbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff45 	bl	8002a48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d122      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d11b      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002be4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff13 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4aa2      	ldr	r2, [pc, #648]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c32:	4ba2      	ldr	r3, [pc, #648]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c34:	e001      	b.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a9b      	ldr	r2, [pc, #620]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c50:	4b9a      	ldr	r3, [pc, #616]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c52:	e001      	b.n	8002c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d004      	beq.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8099 	bne.w	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f925 	bl	8002ed4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9c8 	bl	8003034 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d13a      	bne.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d035      	beq.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7e      	ldr	r2, [pc, #504]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cc2:	4b7e      	ldr	r3, [pc, #504]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc4:	e001      	b.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4979      	ldr	r1, [pc, #484]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cd6:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd8:	e001      	b.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ce2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0202 	orr.w	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fe88 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	f040 80be 	bne.w	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80b8 	beq.w	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a59      	ldr	r2, [pc, #356]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d56:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d58:	e001      	b.n	8002d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4954      	ldr	r1, [pc, #336]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d6c:	e001      	b.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f043 0204 	orr.w	r2, r3, #4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fe4a 	bl	8002a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002da0:	e084      	b.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d107      	bne.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8be 	bl	8002f38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f8fd 	bl	8002fd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d12f      	bne.n	8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02a      	beq.n	8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002df8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e06:	e001      	b.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4929      	ldr	r1, [pc, #164]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d101      	bne.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e1a:	e001      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fdfa 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d131      	bne.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02c      	beq.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e60:	e001      	b.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4912      	ldr	r1, [pc, #72]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e6e:	428b      	cmp	r3, r1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e74:	e001      	b.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e8e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fdc5 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	e000      	b.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eac:	bf00      	nop
}
 8002eae:	bf00      	nop
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40003800 	.word	0x40003800
 8002ebc:	40003400 	.word	0x40003400

08002ec0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c99      	adds	r1, r3, #2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d113      	bne.n	8002f2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffc9 	bl	8002ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c99      	adds	r1, r3, #2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6251      	str	r1, [r2, #36]	; 0x24
 8002f4a:	8819      	ldrh	r1, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <I2SEx_TxISR_I2SExt+0x22>
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <I2SEx_TxISR_I2SExt+0x94>)
 8002f58:	e001      	b.n	8002f5e <I2SEx_TxISR_I2SExt+0x26>
 8002f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f5e:	460a      	mov	r2, r1
 8002f60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <I2SEx_TxISR_I2SExt+0x50>
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <I2SEx_TxISR_I2SExt+0x94>)
 8002f86:	e001      	b.n	8002f8c <I2SEx_TxISR_I2SExt+0x54>
 8002f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	490d      	ldr	r1, [pc, #52]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d101      	bne.n	8002f9c <I2SEx_TxISR_I2SExt+0x64>
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <I2SEx_TxISR_I2SExt+0x94>)
 8002f9a:	e001      	b.n	8002fa0 <I2SEx_TxISR_I2SExt+0x68>
 8002f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff81 	bl	8002ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40003800 	.word	0x40003800
 8002fcc:	40003400 	.word	0x40003400

08002fd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68d8      	ldr	r0, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	1c99      	adds	r1, r3, #2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fe8:	b282      	uxth	r2, r0
 8002fea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d113      	bne.n	800302c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003012:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff4a 	bl	8002ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <I2SEx_RxISR_I2SExt+0x16>
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003048:	e001      	b.n	800304e <I2SEx_RxISR_I2SExt+0x1a>
 800304a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304e:	68d8      	ldr	r0, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	1c99      	adds	r1, r3, #2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	62d1      	str	r1, [r2, #44]	; 0x2c
 800305a:	b282      	uxth	r2, r0
 800305c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d121      	bne.n	80030ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <I2SEx_RxISR_I2SExt+0x90>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <I2SEx_RxISR_I2SExt+0x50>
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003082:	e001      	b.n	8003088 <I2SEx_RxISR_I2SExt+0x54>
 8003084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	490d      	ldr	r1, [pc, #52]	; (80030c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d101      	bne.n	8003098 <I2SEx_RxISR_I2SExt+0x64>
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003096:	e001      	b.n	800309c <I2SEx_RxISR_I2SExt+0x68>
 8003098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff03 	bl	8002ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003800 	.word	0x40003800
 80030c8:	40003400 	.word	0x40003400

080030cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	b08f      	sub	sp, #60	; 0x3c
 80030d0:	af0a      	add	r7, sp, #40	; 0x28
 80030d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e10f      	b.n	80032fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f004 ff25 	bl	8007f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2203      	movs	r2, #3
 8003102:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f002 f87e 	bl	800521e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	687e      	ldr	r6, [r7, #4]
 800312a:	466d      	mov	r5, sp
 800312c:	f106 0410 	add.w	r4, r6, #16
 8003130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003140:	1d33      	adds	r3, r6, #4
 8003142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003144:	6838      	ldr	r0, [r7, #0]
 8003146:	f001 ff56 	bl	8004ff6 <USB_CoreInit>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0d0      	b.n	80032fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f002 f86c 	bl	8005240 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e04a      	b.n	8003204 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	333d      	adds	r3, #61	; 0x3d
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	333c      	adds	r3, #60	; 0x3c
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	b298      	uxth	r0, r3
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3342      	adds	r3, #66	; 0x42
 80031aa:	4602      	mov	r2, r0
 80031ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	333f      	adds	r3, #63	; 0x3f
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3344      	adds	r3, #68	; 0x44
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3348      	adds	r3, #72	; 0x48
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3350      	adds	r3, #80	; 0x50
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	3301      	adds	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d3af      	bcc.n	800316e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e044      	b.n	800329e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	3301      	adds	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3b5      	bcc.n	8003214 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	687e      	ldr	r6, [r7, #4]
 80032b0:	466d      	mov	r5, sp
 80032b2:	f106 0410 	add.w	r4, r6, #16
 80032b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c6:	1d33      	adds	r3, r6, #4
 80032c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f002 f804 	bl	80052d8 <USB_DevInit>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00d      	b.n	80032fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f880 	bl	80063fc <USB_DevDisconnect>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003306 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_PCD_Start+0x1c>
 800331e:	2302      	movs	r3, #2
 8003320:	e020      	b.n	8003364 <HAL_PCD_Start+0x5e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	2b01      	cmp	r3, #1
 8003330:	d109      	bne.n	8003346 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f001 ff56 	bl	80051fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 f830 	bl	80063ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08d      	sub	sp, #52	; 0x34
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f003 f8ee 	bl	8006564 <USB_GetMode>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 839d 	bne.w	8003aca <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 f852 	bl	800643e <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8393 	beq.w	8003ac8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 f849 	bl	800643e <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d107      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 0202 	and.w	r2, r2, #2
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 f837 	bl	800643e <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d161      	bne.n	800349e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0210 	bic.w	r2, r2, #16
 80033e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	0c5b      	lsrs	r3, r3, #17
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	2b02      	cmp	r3, #2
 8003414:	d124      	bne.n	8003460 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d035      	beq.n	800348e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800342c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003430:	b29b      	uxth	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	6a38      	ldr	r0, [r7, #32]
 8003436:	f002 fe6e 	bl	8006116 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003446:	441a      	add	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003458:	441a      	add	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	619a      	str	r2, [r3, #24]
 800345e:	e016      	b.n	800348e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	0c5b      	lsrs	r3, r3, #17
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	2b06      	cmp	r3, #6
 800346a:	d110      	bne.n	800348e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003472:	2208      	movs	r2, #8
 8003474:	4619      	mov	r1, r3
 8003476:	6a38      	ldr	r0, [r7, #32]
 8003478:	f002 fe4d 	bl	8006116 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003488:	441a      	add	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0210 	orr.w	r2, r2, #16
 800349c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ffcb 	bl	800643e <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034b2:	d16e      	bne.n	8003592 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 ffd1 	bl	8006464 <USB_ReadDevAllOutEpInterrupt>
 80034c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034c4:	e062      	b.n	800358c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d057      	beq.n	8003580 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 fff6 	bl	80064cc <USB_ReadDevOutEPInterrupt>
 80034e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	2301      	movs	r3, #1
 80034fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fd99 	bl	8004038 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00c      	beq.n	800352a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	2308      	movs	r3, #8
 8003520:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fe93 	bl	8004250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	2310      	movs	r3, #16
 8003544:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	2320      	movs	r3, #32
 8003560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	461a      	mov	r2, r3
 800357a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	3301      	adds	r3, #1
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d199      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 ff51 	bl	800643e <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a6:	f040 80c0 	bne.w	800372a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 ff72 	bl	8006498 <USB_ReadDevAllInEpInterrupt>
 80035b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035ba:	e0b2      	b.n	8003722 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a7 	beq.w	8003716 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 ff98 	bl	8006508 <USB_ReadDevInEPInterrupt>
 80035d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d057      	beq.n	8003694 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	2201      	movs	r2, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69f9      	ldr	r1, [r7, #28]
 8003600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003604:	4013      	ands	r3, r2
 8003606:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	2301      	movs	r3, #1
 8003618:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d132      	bne.n	8003688 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3348      	adds	r3, #72	; 0x48
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4403      	add	r3, r0
 8003642:	3344      	adds	r3, #68	; 0x44
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4419      	add	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4403      	add	r3, r0
 8003656:	3348      	adds	r3, #72	; 0x48
 8003658:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <HAL_PCD_IRQHandler+0x31c>
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3350      	adds	r3, #80	; 0x50
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f002 ffa0 	bl	80065c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f004 fcf9 	bl	8008086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036aa:	461a      	mov	r2, r3
 80036ac:	2308      	movs	r3, #8
 80036ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2310      	movs	r3, #16
 80036ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	461a      	mov	r2, r3
 80036e4:	2340      	movs	r3, #64	; 0x40
 80036e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	461a      	mov	r2, r3
 8003700:	2302      	movs	r3, #2
 8003702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800370e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fc03 	bl	8003f1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	3301      	adds	r3, #1
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f af49 	bne.w	80035bc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fe85 	bl	800643e <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373e:	d122      	bne.n	8003786 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003766:	2100      	movs	r1, #0
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fe0f 	bl	800438c <HAL_PCDEx_LPM_Callback>
 800376e:	e002      	b.n	8003776 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f004 fcff 	bl	8008174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fe57 	bl	800643e <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379a:	d112      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d102      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f004 fcbb 	bl	8008128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fe39 	bl	800643e <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	f040 80c7 	bne.w	8003968 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2110      	movs	r1, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fed3 	bl	80055a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	e056      	b.n	80038ae <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003812:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	440a      	add	r2, r1
 800382a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003832:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003852:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003866:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003886:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	440a      	add	r2, r1
 800389e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	3301      	adds	r3, #1
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d3a3      	bcc.n	8003800 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f043 030b 	orr.w	r3, r3, #11
 80038e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fa:	f043 030b 	orr.w	r3, r3, #11
 80038fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003900:	e015      	b.n	800392e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003910:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003914:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003918:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003928:	f043 030b 	orr.w	r3, r3, #11
 800392c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003940:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003952:	461a      	mov	r2, r3
 8003954:	f002 fe38 	bl	80065c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f002 fd66 	bl	800643e <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397c:	d124      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f002 fdfc 	bl	8006580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fe64 	bl	800565a <USB_GetDevSpeed>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681c      	ldr	r4, [r3, #0]
 800399e:	f001 f941 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 80039a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	4620      	mov	r0, r4
 80039ae:	f001 fb83 	bl	80050b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f004 fb8f 	bl	80080d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fd36 	bl	800643e <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d10a      	bne.n	80039f2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f004 fb6c 	bl	80080ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 0208 	and.w	r2, r2, #8
 80039f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fd21 	bl	800643e <USB_ReadInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d10f      	bne.n	8003a28 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f004 fbce 	bl	80081b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fd06 	bl	800643e <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a3c:	d10f      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f004 fba1 	bl	8008190 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 fceb 	bl	800643e <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d10a      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f004 fbaf 	bl	80081d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f002 fcd5 	bl	800643e <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d115      	bne.n	8003aca <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f004 fb9f 	bl	80081f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e000      	b.n	8003aca <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ac8:	bf00      	nop
    }
  }
}
 8003aca:	3734      	adds	r7, #52	; 0x34
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd90      	pop	{r4, r7, pc}

08003ad0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_PCD_SetAddress+0x1a>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e013      	b.n	8003b12 <HAL_PCD_SetAddress+0x42>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fc33 	bl	800636e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	461a      	mov	r2, r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	70fb      	strb	r3, [r7, #3]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	803b      	strh	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	da0f      	bge.n	8003b60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	3338      	adds	r3, #56	; 0x38
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	705a      	strb	r2, [r3, #1]
 8003b5e:	e00f      	b.n	8003b80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b8c:	883a      	ldrh	r2, [r7, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	78ba      	ldrb	r2, [r7, #2]
 8003b96:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003baa:	78bb      	ldrb	r3, [r7, #2]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d102      	bne.n	8003bb6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_PCD_EP_Open+0xaa>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e00e      	b.n	8003be2 <HAL_PCD_EP_Open+0xc8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fd66 	bl	80056a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003be0:	7afb      	ldrb	r3, [r7, #11]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	da0f      	bge.n	8003c1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 020f 	and.w	r2, r3, #15
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	3338      	adds	r3, #56	; 0x38
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	3304      	adds	r3, #4
 8003c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	705a      	strb	r2, [r3, #1]
 8003c1c:	e00f      	b.n	8003c3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4413      	add	r3, r2
 8003c34:	3304      	adds	r3, #4
 8003c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_EP_Close+0x6e>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e00e      	b.n	8003c76 <HAL_PCD_EP_Close+0x8c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fda4 	bl	80057b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	f002 f87f 	bl	8005df4 <USB_EP0StartXfer>
 8003cf6:	e008      	b.n	8003d0a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	f001 fe31 	bl	800596c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	460b      	mov	r3, r1
 8003d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	3338      	adds	r3, #56	; 0x38
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2201      	movs	r2, #1
 8003d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	f002 f835 	bl	8005df4 <USB_EP0StartXfer>
 8003d8a:	e008      	b.n	8003d9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	f001 fde7 	bl	800596c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d901      	bls.n	8003dc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da0f      	bge.n	8003dee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	3338      	adds	r3, #56	; 0x38
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	705a      	strb	r2, [r3, #1]
 8003dec:	e00d      	b.n	8003e0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_PCD_EP_SetStall+0x82>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e01e      	b.n	8003e68 <HAL_PCD_EP_SetStall+0xc0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 f9c4 	bl	80061c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	b2d9      	uxtb	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f002 fbb5 	bl	80065c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d901      	bls.n	8003e8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da0f      	bge.n	8003eb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 020f 	and.w	r2, r3, #15
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3338      	adds	r3, #56	; 0x38
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	705a      	strb	r2, [r3, #1]
 8003eb4:	e00f      	b.n	8003ed6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_PCD_EP_ClrStall+0x86>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e00e      	b.n	8003f14 <HAL_PCD_EP_ClrStall+0xa4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 f9cc 	bl	80062a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	3338      	adds	r3, #56	; 0x38
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d901      	bls.n	8003f54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e06c      	b.n	800402e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d902      	bls.n	8003f70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3303      	adds	r3, #3
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f78:	e02b      	b.n	8003fd2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d902      	bls.n	8003f96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f002 f870 	bl	800609a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	441a      	add	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d809      	bhi.n	8003ffc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d203      	bcs.n	8003ffc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1be      	bne.n	8003f7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d811      	bhi.n	800402c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	43db      	mvns	r3, r3
 8004022:	6939      	ldr	r1, [r7, #16]
 8004024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004028:	4013      	ands	r3, r2
 800402a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	333c      	adds	r3, #60	; 0x3c
 8004050:	3304      	adds	r3, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b01      	cmp	r3, #1
 800406c:	f040 80a0 	bne.w	80041b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d015      	beq.n	80040a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a72      	ldr	r2, [pc, #456]	; (8004248 <PCD_EP_OutXfrComplete_int+0x210>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f240 80dd 	bls.w	800423e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80d7 	beq.w	800423e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a2:	6093      	str	r3, [r2, #8]
 80040a4:	e0cb      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	2320      	movs	r3, #32
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	e0bc      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 80b7 	bne.w	800423e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <PCD_EP_OutXfrComplete_int+0x210>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d90f      	bls.n	80040f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e0a2      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800410a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	440b      	add	r3, r1
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800411e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004132:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004146:	6819      	ldr	r1, [r3, #0]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4403      	add	r3, r0
 8004156:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4419      	add	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4403      	add	r3, r0
 800416c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004170:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d114      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d108      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800419a:	461a      	mov	r2, r3
 800419c:	2101      	movs	r1, #1
 800419e:	f002 fa13 	bl	80065c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f003 ff51 	bl	8008050 <HAL_PCD_DataOutStageCallback>
 80041ae:	e046      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a26      	ldr	r2, [pc, #152]	; (800424c <PCD_EP_OutXfrComplete_int+0x214>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d124      	bne.n	8004202 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d4:	6093      	str	r3, [r2, #8]
 80041d6:	e032      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	2320      	movs	r3, #32
 80041f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f003 ff28 	bl	8008050 <HAL_PCD_DataOutStageCallback>
 8004200:	e01d      	b.n	800423e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d114      	bne.n	8004232 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d108      	bne.n	8004232 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800422a:	461a      	mov	r2, r3
 800422c:	2100      	movs	r1, #0
 800422e:	f002 f9cb 	bl	80065c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f003 ff09 	bl	8008050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	4f54300a 	.word	0x4f54300a
 800424c:	4f54310a 	.word	0x4f54310a

08004250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	333c      	adds	r3, #60	; 0x3c
 8004268:	3304      	adds	r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d90e      	bls.n	80042a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f003 fec1 	bl	800802c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d90c      	bls.n	80042cc <PCD_EP_OutSetupPacket_int+0x7c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042c4:	461a      	mov	r2, r3
 80042c6:	2101      	movs	r1, #1
 80042c8:	f002 f97e 	bl	80065c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	4f54300a 	.word	0x4f54300a

080042dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
 80042e8:	4613      	mov	r3, r2
 80042ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042fa:	883b      	ldrh	r3, [r7, #0]
 80042fc:	0419      	lsls	r1, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	430a      	orrs	r2, r1
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
 8004308:	e028      	b.n	800435c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4413      	add	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e00d      	b.n	800433a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	3340      	adds	r3, #64	; 0x40
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	3301      	adds	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	3b01      	subs	r3, #1
 8004340:	429a      	cmp	r2, r3
 8004342:	d3ec      	bcc.n	800431e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004344:	883b      	ldrh	r3, [r7, #0]
 8004346:	0418      	lsls	r0, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	3b01      	subs	r3, #1
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4302      	orrs	r2, r0
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e264      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d075      	beq.n	80044ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c2:	4ba3      	ldr	r3, [pc, #652]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4ba0      	ldr	r3, [pc, #640]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d112      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b9d      	ldr	r3, [pc, #628]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d10b      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b99      	ldr	r3, [pc, #612]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05b      	beq.n	80044ac <HAL_RCC_OscConfig+0x108>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d157      	bne.n	80044ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e23f      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x74>
 800440a:	4b91      	ldr	r3, [pc, #580]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a90      	ldr	r2, [pc, #576]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x98>
 8004422:	4b8b      	ldr	r3, [pc, #556]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a8a      	ldr	r2, [pc, #552]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a87      	ldr	r2, [pc, #540]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 800443c:	4b84      	ldr	r3, [pc, #528]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a83      	ldr	r2, [pc, #524]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b81      	ldr	r3, [pc, #516]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a80      	ldr	r2, [pc, #512]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fc fdd8 	bl	8001010 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fc fdd4 	bl	8001010 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e204      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xc0>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fc fdc4 	bl	8001010 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fc fdc0 	bl	8001010 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1f0      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0xe8>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ba:	4b65      	ldr	r3, [pc, #404]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b62      	ldr	r3, [pc, #392]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b5f      	ldr	r3, [pc, #380]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b5c      	ldr	r3, [pc, #368]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1c4      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4952      	ldr	r1, [pc, #328]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e03a      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <HAL_RCC_OscConfig+0x2b0>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fc fd79 	bl	8001010 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fc fd75 	bl	8001010 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1a5      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	4b46      	ldr	r3, [pc, #280]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4940      	ldr	r1, [pc, #256]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004556:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <HAL_RCC_OscConfig+0x2b0>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fc fd58 	bl	8001010 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004564:	f7fc fd54 	bl	8001010 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e184      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b36      	ldr	r3, [pc, #216]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d030      	beq.n	80045f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b30      	ldr	r3, [pc, #192]	; (8004658 <HAL_RCC_OscConfig+0x2b4>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fc fd38 	bl	8001010 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fc fd34 	bl	8001010 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e164      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x200>
 80045c2:	e015      	b.n	80045f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_OscConfig+0x2b4>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ca:	f7fc fd21 	bl	8001010 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d2:	f7fc fd1d 	bl	8001010 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e14d      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a0 	beq.w	800473e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b13      	ldr	r3, [pc, #76]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_OscConfig+0x2b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d121      	bne.n	800467e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_OscConfig+0x2b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <HAL_RCC_OscConfig+0x2b8>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fc fce3 	bl	8001010 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e011      	b.n	8004672 <HAL_RCC_OscConfig+0x2ce>
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	42470000 	.word	0x42470000
 8004658:	42470e80 	.word	0x42470e80
 800465c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fc fcd6 	bl	8001010 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e106      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCC_OscConfig+0x4e4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <HAL_RCC_OscConfig+0x2f0>
 8004686:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a80      	ldr	r2, [pc, #512]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	e01c      	b.n	80046ce <HAL_RCC_OscConfig+0x32a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x312>
 800469c:	4b7b      	ldr	r3, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a7a      	ldr	r2, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a77      	ldr	r2, [pc, #476]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	e00b      	b.n	80046ce <HAL_RCC_OscConfig+0x32a>
 80046b6:	4b75      	ldr	r3, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a74      	ldr	r2, [pc, #464]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	4b72      	ldr	r3, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a71      	ldr	r2, [pc, #452]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fc fc9b 	bl	8001010 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fc fc97 	bl	8001010 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0c5      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	4b65      	ldr	r3, [pc, #404]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RCC_OscConfig+0x33a>
 8004700:	e014      	b.n	800472c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fc fc85 	bl	8001010 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fc fc81 	bl	8001010 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0af      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ee      	bne.n	800470a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a55      	ldr	r2, [pc, #340]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 809b 	beq.w	800487e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004748:	4b50      	ldr	r3, [pc, #320]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d05c      	beq.n	800480e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d141      	bne.n	80047e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fc55 	bl	8001010 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fc fc51 	bl	8001010 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e081      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477c:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	3b01      	subs	r3, #1
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	4937      	ldr	r1, [pc, #220]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b2:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fc fc2a 	bl	8001010 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fc fc26 	bl	8001010 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e056      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x41c>
 80047de:	e04e      	b.n	800487e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fc fc13 	bl	8001010 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fc fc0f 	bl	8001010 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e03f      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004800:	4b22      	ldr	r3, [pc, #136]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x44a>
 800480c:	e037      	b.n	800487e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e032      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_RCC_OscConfig+0x4e8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d028      	beq.n	800487a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d121      	bne.n	800487a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d11a      	bne.n	800487a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004850:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004852:	4293      	cmp	r3, r2
 8004854:	d111      	bne.n	800487a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d107      	bne.n	800487a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40007000 	.word	0x40007000
 800488c:	40023800 	.word	0x40023800
 8004890:	42470060 	.word	0x42470060

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cc      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d90c      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d003      	beq.n	8004952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	2b03      	cmp	r3, #3
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e067      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fc fb44 	bl	8001010 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fc fb40 	bl	8001010 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20c      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 f821 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490a      	ldr	r1, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc faa4 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08008640 	.word	0x08008640
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	20000004 	.word	0x20000004

08004a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	2300      	movs	r3, #0
 8004a72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a78:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	f200 80bd 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a92:	e0b7      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a96:	60bb      	str	r3, [r7, #8]
       break;
 8004a98:	e0b7      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9a:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a9c:	60bb      	str	r3, [r7, #8]
      break;
 8004a9e:	e0b4      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa0:	4b5d      	ldr	r3, [pc, #372]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04d      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	099b      	lsrs	r3, r3, #6
 8004abc:	461a      	mov	r2, r3
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	ea02 0800 	and.w	r8, r2, r0
 8004ace:	ea03 0901 	and.w	r9, r3, r1
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	014b      	lsls	r3, r1, #5
 8004ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ae4:	0142      	lsls	r2, r0, #5
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	ebb0 0008 	subs.w	r0, r0, r8
 8004aee:	eb61 0109 	sbc.w	r1, r1, r9
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b00:	0182      	lsls	r2, r0, #6
 8004b02:	1a12      	subs	r2, r2, r0
 8004b04:	eb63 0301 	sbc.w	r3, r3, r1
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	00d9      	lsls	r1, r3, #3
 8004b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b16:	00d0      	lsls	r0, r2, #3
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	eb12 0208 	adds.w	r2, r2, r8
 8004b20:	eb43 0309 	adc.w	r3, r3, r9
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0259      	lsls	r1, r3, #9
 8004b2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b32:	0250      	lsls	r0, r2, #9
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f7fb fb40 	bl	80001c8 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e04a      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b52:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	ea02 0400 	and.w	r4, r2, r0
 8004b6a:	ea03 0501 	and.w	r5, r3, r1
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	014b      	lsls	r3, r1, #5
 8004b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b80:	0142      	lsls	r2, r0, #5
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	1b00      	subs	r0, r0, r4
 8004b88:	eb61 0105 	sbc.w	r1, r1, r5
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	018b      	lsls	r3, r1, #6
 8004b96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b9a:	0182      	lsls	r2, r0, #6
 8004b9c:	1a12      	subs	r2, r2, r0
 8004b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	00d9      	lsls	r1, r3, #3
 8004bac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bb0:	00d0      	lsls	r0, r2, #3
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	1912      	adds	r2, r2, r4
 8004bb8:	eb45 0303 	adc.w	r3, r5, r3
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	0299      	lsls	r1, r3, #10
 8004bc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bca:	0290      	lsls	r0, r2, #10
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f7fb faf4 	bl	80001c8 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	60bb      	str	r3, [r7, #8]
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c06:	60bb      	str	r3, [r7, #8]
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	007a1200 	.word	0x007a1200

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000000 	.word	0x20000000

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08008650 	.word	0x08008650

08004c64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d035      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c8c:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c92:	f7fc f9bd 	bl	8001010 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9a:	f7fc f9b9 	bl	8001010 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0b0      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cac:	4b5b      	ldr	r3, [pc, #364]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	019a      	lsls	r2, r3, #6
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	071b      	lsls	r3, r3, #28
 8004cc4:	4955      	ldr	r1, [pc, #340]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ccc:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc f99d 	bl	8001010 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cda:	f7fc f999 	bl	8001010 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e090      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cec:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8083 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b44      	ldr	r3, [pc, #272]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a43      	ldr	r2, [pc, #268]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d22:	4b3f      	ldr	r3, [pc, #252]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a3e      	ldr	r2, [pc, #248]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc f96f 	bl	8001010 <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fc f96b 	bl	8001010 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e062      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d48:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d54:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d028      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d88:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d114      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fc f939 	bl	8001010 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fc f935 	bl	8001010 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e02a      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ee      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	490d      	ldr	r1, [pc, #52]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e06:	4905      	ldr	r1, [pc, #20]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	42470068 	.word	0x42470068
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42470e40 	.word	0x42470e40

08004e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d13e      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e46:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12f      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5e:	617b      	str	r3, [r7, #20]
          break;
 8004e60:	e02f      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6e:	d108      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	e007      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eac:	0f1b      	lsrs	r3, r3, #28
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]
          break;
 8004eba:	e002      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
          break;
 8004ec0:	bf00      	nop
        }
      }
      break;
 8004ec2:	bf00      	nop
    }
  }
  return frequency;
 8004ec4:	697b      	ldr	r3, [r7, #20]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	00bb8000 	.word	0x00bb8000
 8004edc:	007a1200 	.word	0x007a1200
 8004ee0:	00f42400 	.word	0x00f42400

08004ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e07b      	b.n	8004fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d108      	bne.n	8004f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f06:	d009      	beq.n	8004f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61da      	str	r2, [r3, #28]
 8004f0e:	e005      	b.n	8004f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fb ff42 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	ea42 0103 	orr.w	r1, r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0104 	and.w	r1, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0210 	and.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	f107 001c 	add.w	r0, r7, #28
 8005004:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2b01      	cmp	r3, #1
 800500c:	d122      	bne.n	8005054 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 fb1b 	bl	8006684 <USB_CoreReset>
 800504e:	4603      	mov	r3, r0
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e01a      	b.n	800508a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fb0f 	bl	8006684 <USB_CoreReset>
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
 800507c:	e005      	b.n	800508a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10b      	bne.n	80050a8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f043 0206 	orr.w	r2, r3, #6
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b4:	b004      	add	sp, #16
 80050b6:	4770      	bx	lr

080050b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d165      	bne.n	8005198 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a41      	ldr	r2, [pc, #260]	; (80051d4 <USB_SetTurnaroundTime+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d906      	bls.n	80050e2 <USB_SetTurnaroundTime+0x2a>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a40      	ldr	r2, [pc, #256]	; (80051d8 <USB_SetTurnaroundTime+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d202      	bcs.n	80050e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050dc:	230f      	movs	r3, #15
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e062      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <USB_SetTurnaroundTime+0x120>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d306      	bcc.n	80050f8 <USB_SetTurnaroundTime+0x40>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <USB_SetTurnaroundTime+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d202      	bcs.n	80050f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050f2:	230e      	movs	r3, #14
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e057      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a38      	ldr	r2, [pc, #224]	; (80051dc <USB_SetTurnaroundTime+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d306      	bcc.n	800510e <USB_SetTurnaroundTime+0x56>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <USB_SetTurnaroundTime+0x128>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d202      	bcs.n	800510e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005108:	230d      	movs	r3, #13
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e04c      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <USB_SetTurnaroundTime+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d306      	bcc.n	8005124 <USB_SetTurnaroundTime+0x6c>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <USB_SetTurnaroundTime+0x12c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d802      	bhi.n	8005124 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800511e:	230c      	movs	r3, #12
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e041      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <USB_SetTurnaroundTime+0x12c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d906      	bls.n	800513a <USB_SetTurnaroundTime+0x82>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <USB_SetTurnaroundTime+0x130>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d802      	bhi.n	800513a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005134:	230b      	movs	r3, #11
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e036      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <USB_SetTurnaroundTime+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d906      	bls.n	8005150 <USB_SetTurnaroundTime+0x98>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <USB_SetTurnaroundTime+0x134>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d802      	bhi.n	8005150 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800514a:	230a      	movs	r3, #10
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e02b      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a26      	ldr	r2, [pc, #152]	; (80051ec <USB_SetTurnaroundTime+0x134>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d906      	bls.n	8005166 <USB_SetTurnaroundTime+0xae>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <USB_SetTurnaroundTime+0x138>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d202      	bcs.n	8005166 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005160:	2309      	movs	r3, #9
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e020      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <USB_SetTurnaroundTime+0x138>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d306      	bcc.n	800517c <USB_SetTurnaroundTime+0xc4>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <USB_SetTurnaroundTime+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d802      	bhi.n	800517c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005176:	2308      	movs	r3, #8
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e015      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <USB_SetTurnaroundTime+0x13c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d906      	bls.n	8005192 <USB_SetTurnaroundTime+0xda>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <USB_SetTurnaroundTime+0x140>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d202      	bcs.n	8005192 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800518c:	2307      	movs	r3, #7
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e00a      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005192:	2306      	movs	r3, #6
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e007      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800519e:	2309      	movs	r3, #9
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e001      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051a4:	2309      	movs	r3, #9
 80051a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	00d8acbf 	.word	0x00d8acbf
 80051d8:	00e4e1c0 	.word	0x00e4e1c0
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	01067380 	.word	0x01067380
 80051e4:	011a499f 	.word	0x011a499f
 80051e8:	01312cff 	.word	0x01312cff
 80051ec:	014ca43f 	.word	0x014ca43f
 80051f0:	016e3600 	.word	0x016e3600
 80051f4:	01a6ab1f 	.word	0x01a6ab1f
 80051f8:	01e84800 	.word	0x01e84800

080051fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f043 0201 	orr.w	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d115      	bne.n	800528e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800526e:	2001      	movs	r0, #1
 8005270:	f7fb feda 	bl	8001028 <HAL_Delay>
      ms++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f972 	bl	8006564 <USB_GetMode>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d01e      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b31      	cmp	r3, #49	; 0x31
 800528a:	d9f0      	bls.n	800526e <USB_SetCurrentMode+0x2e>
 800528c:	e01a      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d115      	bne.n	80052c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a0:	2001      	movs	r0, #1
 80052a2:	f7fb fec1 	bl	8001028 <HAL_Delay>
      ms++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 f959 	bl	8006564 <USB_GetMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b31      	cmp	r3, #49	; 0x31
 80052bc:	d9f0      	bls.n	80052a0 <USB_SetCurrentMode+0x60>
 80052be:	e001      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e005      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b32      	cmp	r3, #50	; 0x32
 80052c8:	d101      	bne.n	80052ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d8:	b084      	sub	sp, #16
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e009      	b.n	800530c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3340      	adds	r3, #64	; 0x40
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	2200      	movs	r2, #0
 8005304:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b0e      	cmp	r3, #14
 8005310:	d9f2      	bls.n	80052f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11c      	bne.n	8005352 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
 8005350:	e00b      	b.n	800536a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005370:	461a      	mov	r2, r3
 8005372:	2300      	movs	r3, #0
 8005374:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	4619      	mov	r1, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	461a      	mov	r2, r3
 8005386:	680b      	ldr	r3, [r1, #0]
 8005388:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10c      	bne.n	80053aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005396:	2100      	movs	r1, #0
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f945 	bl	8005628 <USB_SetDevSpeed>
 800539e:	e008      	b.n	80053b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053a0:	2101      	movs	r1, #1
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f940 	bl	8005628 <USB_SetDevSpeed>
 80053a8:	e003      	b.n	80053b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053aa:	2103      	movs	r1, #3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f93b 	bl	8005628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053b2:	2110      	movs	r1, #16
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8f3 	bl	80055a0 <USB_FlushTxFifo>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f90f 	bl	80055e8 <USB_FlushRxFifo>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	461a      	mov	r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	e043      	b.n	8005486 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d118      	bne.n	8005448 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	461a      	mov	r2, r3
 800542a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e013      	b.n	800545a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	461a      	mov	r2, r3
 8005440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e008      	b.n	800545a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	461a      	mov	r2, r3
 800547a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800547e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	3301      	adds	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d3b7      	bcc.n	80053fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e043      	b.n	800551c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054aa:	d118      	bne.n	80054de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	461a      	mov	r2, r3
 80054c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e013      	b.n	80054f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e008      	b.n	80054f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	461a      	mov	r2, r3
 80054ec:	2300      	movs	r3, #0
 80054ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	461a      	mov	r2, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	3301      	adds	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d3b7      	bcc.n	8005494 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005536:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005544:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d105      	bne.n	8005558 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f043 0210 	orr.w	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699a      	ldr	r2, [r3, #24]
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <USB_DevInit+0x2c4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 0208 	orr.w	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800558c:	7dfb      	ldrb	r3, [r7, #23]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005598:	b004      	add	sp, #16
 800559a:	4770      	bx	lr
 800559c:	803c3800 	.word	0x803c3800

080055a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	f043 0220 	orr.w	r2, r3, #32
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <USB_FlushTxFifo+0x44>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d0f1      	beq.n	80055ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2210      	movs	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <USB_FlushRxFifo+0x3c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e006      	b.n	8005618 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b10      	cmp	r3, #16
 8005614:	d0f1      	beq.n	80055fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	00030d40 	.word	0x00030d40

08005628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005648:	4313      	orrs	r3, r2
 800564a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0306 	and.w	r3, r3, #6
 8005672:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
 800567e:	e00a      	b.n	8005696 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d002      	beq.n	800568c <USB_GetDevSpeed+0x32>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b06      	cmp	r3, #6
 800568a:	d102      	bne.n	8005692 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800568c:	2302      	movs	r3, #2
 800568e:	75fb      	strb	r3, [r7, #23]
 8005690:	e001      	b.n	8005696 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005692:	230f      	movs	r3, #15
 8005694:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d13a      	bne.n	8005736 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2101      	movs	r1, #1
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056de:	4313      	orrs	r3, r2
 80056e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d155      	bne.n	80057a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	78db      	ldrb	r3, [r3, #3]
 8005712:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005714:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	059b      	lsls	r3, r3, #22
 800571a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800571c:	4313      	orrs	r3, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e036      	b.n	80057a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	2101      	movs	r1, #1
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005754:	4313      	orrs	r3, r2
 8005756:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11a      	bne.n	80057a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800578a:	430b      	orrs	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d161      	bne.n	8005894 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e6:	d11f      	bne.n	8005828 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005806:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	2101      	movs	r1, #1
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	b29b      	uxth	r3, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005848:	4013      	ands	r3, r2
 800584a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800586c:	4013      	ands	r3, r2
 800586e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	0159      	lsls	r1, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	440b      	add	r3, r1
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	4619      	mov	r1, r3
 800588c:	4b35      	ldr	r3, [pc, #212]	; (8005964 <USB_DeactivateEndpoint+0x1b0>)
 800588e:	4013      	ands	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
 8005892:	e060      	b.n	8005956 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058aa:	d11f      	bne.n	80058ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2101      	movs	r1, #1
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	43db      	mvns	r3, r3
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800590c:	4013      	ands	r3, r2
 800590e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	2101      	movs	r1, #1
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	43db      	mvns	r3, r3
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005930:	4013      	ands	r3, r2
 8005932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	0159      	lsls	r1, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	440b      	add	r3, r1
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	4619      	mov	r1, r3
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <USB_DeactivateEndpoint+0x1b4>)
 8005952:	4013      	ands	r3, r2
 8005954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	ec337800 	.word	0xec337800
 8005968:	eff37800 	.word	0xeff37800

0800596c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 815c 	bne.w	8005c46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d132      	bne.n	80059fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	0cdb      	lsrs	r3, r3, #19
 80059f6:	04db      	lsls	r3, r3, #19
 80059f8:	6113      	str	r3, [r2, #16]
 80059fa:	e074      	b.n	8005ae6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	0cdb      	lsrs	r3, r3, #19
 8005a18:	04db      	lsls	r3, r3, #19
 8005a1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6959      	ldr	r1, [r3, #20]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	440b      	add	r3, r1
 8005a58:	1e59      	subs	r1, r3, #1
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a64:	4b9d      	ldr	r3, [pc, #628]	; (8005cdc <USB_EPStartXfer+0x370>)
 8005a66:	400b      	ands	r3, r1
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	0148      	lsls	r0, r1, #5
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	4401      	add	r1, r0
 8005a70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	0148      	lsls	r0, r1, #5
 8005a92:	69f9      	ldr	r1, [r7, #28]
 8005a94:	4401      	add	r1, r0
 8005a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	78db      	ldrb	r3, [r3, #3]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d11f      	bne.n	8005ae6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ac4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d14b      	bne.n	8005b84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	78db      	ldrb	r3, [r3, #3]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d128      	bne.n	8005b62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d110      	bne.n	8005b42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	e00f      	b.n	8005b62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e12f      	b.n	8005de4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ba2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d015      	beq.n	8005bd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8117 	beq.w	8005de4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	69f9      	ldr	r1, [r7, #28]
 8005bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	634b      	str	r3, [r1, #52]	; 0x34
 8005bd6:	e105      	b.n	8005de4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d110      	bne.n	8005c0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e00f      	b.n	8005c2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	68d9      	ldr	r1, [r3, #12]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	b298      	uxth	r0, r3
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fa2b 	bl	800609a <USB_WritePacket>
 8005c44:	e0ce      	b.n	8005de4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	0cdb      	lsrs	r3, r3, #19
 8005c62:	04db      	lsls	r3, r3, #19
 8005c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d126      	bne.n	8005ce0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca8:	69b9      	ldr	r1, [r7, #24]
 8005caa:	0148      	lsls	r0, r1, #5
 8005cac:	69f9      	ldr	r1, [r7, #28]
 8005cae:	4401      	add	r1, r0
 8005cb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd6:	6113      	str	r3, [r2, #16]
 8005cd8:	e036      	b.n	8005d48 <USB_EPStartXfer+0x3dc>
 8005cda:	bf00      	nop
 8005cdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	8afb      	ldrh	r3, [r7, #22]
 8005d06:	04d9      	lsls	r1, r3, #19
 8005d08:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <USB_EPStartXfer+0x484>)
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	0148      	lsls	r0, r1, #5
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	4401      	add	r1, r0
 8005d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	8af9      	ldrh	r1, [r7, #22]
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10d      	bne.n	8005d6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	460a      	mov	r2, r1
 8005d68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	78db      	ldrb	r3, [r3, #3]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d128      	bne.n	8005dc4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d110      	bne.n	8005da4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00f      	b.n	8005dc4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	1ff80000 	.word	0x1ff80000

08005df4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	f040 80cd 	bne.w	8005fb0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d132      	bne.n	8005e84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7c:	0cdb      	lsrs	r3, r3, #19
 8005e7e:	04db      	lsls	r3, r3, #19
 8005e80:	6113      	str	r3, [r2, #16]
 8005e82:	e04e      	b.n	8005f22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	0cdb      	lsrs	r3, r3, #19
 8005ea0:	04db      	lsls	r3, r3, #19
 8005ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ec6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d903      	bls.n	8005edc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f12:	6939      	ldr	r1, [r7, #16]
 8005f14:	0148      	lsls	r0, r1, #5
 8005f16:	6979      	ldr	r1, [r7, #20]
 8005f18:	4401      	add	r1, r0
 8005f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d11e      	bne.n	8005f66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e092      	b.n	800608c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d07e      	beq.n	800608c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005faa:	4313      	orrs	r3, r2
 8005fac:	634b      	str	r3, [r1, #52]	; 0x34
 8005fae:	e06d      	b.n	800608c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fca:	0cdb      	lsrs	r3, r3, #19
 8005fcc:	04db      	lsls	r3, r3, #19
 8005fce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ff2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603a:	6939      	ldr	r1, [r7, #16]
 800603c:	0148      	lsls	r0, r1, #5
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	4401      	add	r1, r0
 8006042:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10d      	bne.n	800606c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68d9      	ldr	r1, [r3, #12]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	460a      	mov	r2, r1
 800606a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800608a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800609a:	b480      	push	{r7}
 800609c:	b089      	sub	sp, #36	; 0x24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	4611      	mov	r1, r2
 80060a6:	461a      	mov	r2, r3
 80060a8:	460b      	mov	r3, r1
 80060aa:	71fb      	strb	r3, [r7, #7]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d123      	bne.n	8006108 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060c0:	88bb      	ldrh	r3, [r7, #4]
 80060c2:	3303      	adds	r3, #3
 80060c4:	089b      	lsrs	r3, r3, #2
 80060c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e018      	b.n	8006100 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	031a      	lsls	r2, r3, #12
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	461a      	mov	r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	429a      	cmp	r2, r3
 8006106:	d3e2      	bcc.n	80060ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3724      	adds	r7, #36	; 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006116:	b480      	push	{r7}
 8006118:	b08b      	sub	sp, #44	; 0x2c
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	4613      	mov	r3, r2
 8006122:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	b29b      	uxth	r3, r3
 8006132:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	623b      	str	r3, [r7, #32]
 8006140:	e014      	b.n	800616c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	601a      	str	r2, [r3, #0]
    pDest++;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	3301      	adds	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	3301      	adds	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	3301      	adds	r3, #1
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3e6      	bcc.n	8006142 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006174:	8bfb      	ldrh	r3, [r7, #30]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01e      	beq.n	80061b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006184:	461a      	mov	r2, r3
 8006186:	f107 0310 	add.w	r3, r7, #16
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	701a      	strb	r2, [r3, #0]
      i++;
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	3301      	adds	r3, #1
 80061a4:	623b      	str	r3, [r7, #32]
      pDest++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061ac:	8bfb      	ldrh	r3, [r7, #30]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061b2:	8bfb      	ldrh	r3, [r7, #30]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ea      	bne.n	800618e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	372c      	adds	r7, #44	; 0x2c
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d12c      	bne.n	800623c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	db12      	blt.n	800621a <USB_EPSetStall+0x54>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00f      	beq.n	800621a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006218:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e02b      	b.n	8006294 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	db12      	blt.n	8006274 <USB_EPSetStall+0xae>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006272:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d128      	bne.n	8006310 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d003      	beq.n	80062ee <USB_EPClearStall+0x4c>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d138      	bne.n	8006360 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e027      	b.n	8006360 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800632e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	78db      	ldrb	r3, [r3, #3]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d003      	beq.n	8006340 <USB_EPClearStall+0x9e>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d10f      	bne.n	8006360 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800638c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006390:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e8:	f023 0302 	bic.w	r3, r3, #2
 80063ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800642a:	f043 0302 	orr.w	r3, r3, #2
 800642e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	0c1b      	lsrs	r3, r3, #16
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	b29b      	uxth	r3, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	4013      	ands	r3, r2
 80064f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064fa:	68bb      	ldr	r3, [r7, #8]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
 8006538:	01db      	lsls	r3, r3, #7
 800653a:	b2db      	uxtb	r3, r3
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006556:	68bb      	ldr	r3, [r7, #8]
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f003 0301 	and.w	r3, r3, #1
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800659e:	f023 0307 	bic.w	r3, r3, #7
 80065a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	460b      	mov	r3, r1
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	333c      	adds	r3, #60	; 0x3c
 80065de:	3304      	adds	r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4a26      	ldr	r2, [pc, #152]	; (8006680 <USB_EP0_OutStart+0xb8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d90a      	bls.n	8006602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fc:	d101      	bne.n	8006602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e037      	b.n	8006672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	2300      	movs	r3, #0
 800660c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	f043 0318 	orr.w	r3, r3, #24
 8006634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006644:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10f      	bne.n	8006670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800666e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	4f54300a 	.word	0x4f54300a

08006684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <USB_CoreReset+0x60>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e01a      	b.n	80066d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	daf3      	bge.n	8006690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f043 0201 	orr.w	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <USB_CoreReset+0x60>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e006      	b.n	80066d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d0f1      	beq.n	80066b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	00030d40 	.word	0x00030d40

080066e8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80066f4:	2010      	movs	r0, #16
 80066f6:	f001 ff03 	bl	8008500 <USBD_static_malloc>
 80066fa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800670a:	2302      	movs	r3, #2
 800670c:	e01b      	b.n	8006746 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7c1b      	ldrb	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2207      	movs	r2, #7
 8006722:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006724:	e002      	b.n	800672c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	220a      	movs	r2, #10
 800672a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800672c:	2304      	movs	r3, #4
 800672e:	2203      	movs	r2, #3
 8006730:	2181      	movs	r1, #129	; 0x81
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fdd3 	bl	80082de <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800675a:	2181      	movs	r1, #129	; 0x81
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fde4 	bl	800832a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677e:	4618      	mov	r0, r3
 8006780:	f001 fecc 	bl	800851c <USBD_static_free>
    pdev->pClassData = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0e8      	b.n	800698e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d046      	beq.n	8006856 <USBD_HID_Setup+0xbe>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	f040 80d8 	bne.w	800697e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	3b02      	subs	r3, #2
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d836      	bhi.n	8006846 <USBD_HID_Setup+0xae>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <USBD_HID_Setup+0x48>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006837 	.word	0x08006837
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006847 	.word	0x08006847
 80067ec:	08006847 	.word	0x08006847
 80067f0:	08006847 	.word	0x08006847
 80067f4:	08006847 	.word	0x08006847
 80067f8:	08006847 	.word	0x08006847
 80067fc:	08006847 	.word	0x08006847
 8006800:	08006825 	.word	0x08006825
 8006804:	08006809 	.word	0x08006809
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]
          break;
 8006814:	e01e      	b.n	8006854 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f9fa 	bl	8007c16 <USBD_CtlSendData>
          break;
 8006822:	e017      	b.n	8006854 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	b29b      	uxth	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
          break;
 8006834:	e00e      	b.n	8006854 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3304      	adds	r3, #4
 800683a:	2201      	movs	r2, #1
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f9e9 	bl	8007c16 <USBD_CtlSendData>
          break;
 8006844:	e006      	b.n	8006854 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f973 	bl	8007b34 <USBD_CtlError>
          ret = USBD_FAIL;
 800684e:	2303      	movs	r3, #3
 8006850:	75fb      	strb	r3, [r7, #23]
          break;
 8006852:	bf00      	nop
      }
      break;
 8006854:	e09a      	b.n	800698c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b0b      	cmp	r3, #11
 800685c:	f200 8086 	bhi.w	800696c <USBD_HID_Setup+0x1d4>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <USBD_HID_Setup+0xd0>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006899 	.word	0x08006899
 800686c:	0800697b 	.word	0x0800697b
 8006870:	0800696d 	.word	0x0800696d
 8006874:	0800696d 	.word	0x0800696d
 8006878:	0800696d 	.word	0x0800696d
 800687c:	0800696d 	.word	0x0800696d
 8006880:	080068c3 	.word	0x080068c3
 8006884:	0800696d 	.word	0x0800696d
 8006888:	0800696d 	.word	0x0800696d
 800688c:	0800696d 	.word	0x0800696d
 8006890:	0800691b 	.word	0x0800691b
 8006894:	08006945 	.word	0x08006945
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d107      	bne.n	80068b4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068a4:	f107 030a 	add.w	r3, r7, #10
 80068a8:	2202      	movs	r2, #2
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f9b2 	bl	8007c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068b2:	e063      	b.n	800697c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 f93c 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	75fb      	strb	r3, [r7, #23]
          break;
 80068c0:	e05c      	b.n	800697c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	885b      	ldrh	r3, [r3, #2]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b22      	cmp	r3, #34	; 0x22
 80068cc:	d108      	bne.n	80068e0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b4a      	cmp	r3, #74	; 0x4a
 80068d4:	bf28      	it	cs
 80068d6:	234a      	movcs	r3, #74	; 0x4a
 80068d8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <USBD_HID_Setup+0x200>)
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	e015      	b.n	800690c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	885b      	ldrh	r3, [r3, #2]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b21      	cmp	r3, #33	; 0x21
 80068ea:	d108      	bne.n	80068fe <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80068ec:	4b2b      	ldr	r3, [pc, #172]	; (800699c <USBD_HID_Setup+0x204>)
 80068ee:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	bf28      	it	cs
 80068f8:	2309      	movcs	r3, #9
 80068fa:	82bb      	strh	r3, [r7, #20]
 80068fc:	e006      	b.n	800690c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 f917 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	75fb      	strb	r3, [r7, #23]
            break;
 800690a:	e037      	b.n	800697c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800690c:	8abb      	ldrh	r3, [r7, #20]
 800690e:	461a      	mov	r2, r3
 8006910:	6939      	ldr	r1, [r7, #16]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f97f 	bl	8007c16 <USBD_CtlSendData>
          break;
 8006918:	e030      	b.n	800697c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d107      	bne.n	8006936 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3308      	adds	r3, #8
 800692a:	2201      	movs	r2, #1
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 f971 	bl	8007c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006934:	e022      	b.n	800697c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 f8fb 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 800693e:	2303      	movs	r3, #3
 8006940:	75fb      	strb	r3, [r7, #23]
          break;
 8006942:	e01b      	b.n	800697c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b03      	cmp	r3, #3
 800694e:	d106      	bne.n	800695e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800695c:	e00e      	b.n	800697c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 f8e7 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8006966:	2303      	movs	r3, #3
 8006968:	75fb      	strb	r3, [r7, #23]
          break;
 800696a:	e007      	b.n	800697c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f8e0 	bl	8007b34 <USBD_CtlError>
          ret = USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	75fb      	strb	r3, [r7, #23]
          break;
 8006978:	e000      	b.n	800697c <USBD_HID_Setup+0x1e4>
          break;
 800697a:	bf00      	nop
      }
      break;
 800697c:	e006      	b.n	800698c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f8d7 	bl	8007b34 <USBD_CtlError>
      ret = USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	75fb      	strb	r3, [r7, #23]
      break;
 800698a:	bf00      	nop
  }

  return (uint8_t)ret;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200000c8 	.word	0x200000c8
 800699c:	200000b0 	.word	0x200000b0

080069a0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	20000044 	.word	0x20000044

080069c0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2222      	movs	r2, #34	; 0x22
 80069cc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000068 	.word	0x20000068

080069e0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2222      	movs	r2, #34	; 0x22
 80069ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80069ee:	4b03      	ldr	r3, [pc, #12]	; (80069fc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	2000008c 	.word	0x2000008c

08006a00 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a12:	2200      	movs	r2, #0
 8006a14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006a32:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	200000bc 	.word	0x200000bc

08006a44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e01f      	b.n	8006a9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	79fa      	ldrb	r2, [r7, #7]
 8006a8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 fbbd 	bl	8008210 <USBD_LL_Init>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e016      	b.n	8006aea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	f107 020e 	add.w	r2, r7, #14
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fbd4 	bl	80082a8 <USBD_LL_Start>
 8006b00:	4603      	mov	r3, r0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
  }

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 ff90 	bl	8007ac0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d01a      	beq.n	8006bfa <USBD_LL_SetupStage+0x72>
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d822      	bhi.n	8006c0e <USBD_LL_SetupStage+0x86>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <USBD_LL_SetupStage+0x4a>
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d00a      	beq.n	8006be6 <USBD_LL_SetupStage+0x5e>
 8006bd0:	e01d      	b.n	8006c0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa62 	bl	80070a4 <USBD_StdDevReq>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
      break;
 8006be4:	e020      	b.n	8006c28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fac6 	bl	8007180 <USBD_StdItfReq>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	e016      	b.n	8006c28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fb05 	bl	8007212 <USBD_StdEPReq>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0c:	e00c      	b.n	8006c28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fba3 	bl	8008368 <USBD_LL_StallEP>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
      break;
 8006c26:	bf00      	nop
  }

  return ret;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d138      	bne.n	8006cb8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d14a      	bne.n	8006cee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d913      	bls.n	8006c8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	bf28      	it	cs
 8006c7e:	4613      	movcs	r3, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fff2 	bl	8007c6e <USBD_CtlContinueRx>
 8006c8a:	e030      	b.n	8006cee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d10b      	bne.n	8006cb0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 ffed 	bl	8007c90 <USBD_CtlSendStatus>
 8006cb6:	e01a      	b.n	8006cee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d114      	bne.n	8006cee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	7afa      	ldrb	r2, [r7, #11]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	4798      	blx	r3
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	e000      	b.n	8006cf0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	460b      	mov	r3, r1
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d16b      	bne.n	8006de4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d156      	bne.n	8006dca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d914      	bls.n	8006d52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	1ad2      	subs	r2, r2, r3
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 ff84 	bl	8007c4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d44:	2300      	movs	r3, #0
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f001 fbb6 	bl	80084bc <USBD_LL_PrepareReceive>
 8006d50:	e03b      	b.n	8006dca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d11c      	bne.n	8006d98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d316      	bcc.n	8006d98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d20f      	bcs.n	8006d98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 ff65 	bl	8007c4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 fb93 	bl	80084bc <USBD_LL_PrepareReceive>
 8006d96:	e018      	b.n	8006dca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d10b      	bne.n	8006dbc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 fad2 	bl	8008368 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 ff76 	bl	8007cb6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d122      	bne.n	8006e1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fe98 	bl	8006b0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006de2:	e01a      	b.n	8006e1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d114      	bne.n	8006e1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00e      	beq.n	8006e1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	7afa      	ldrb	r2, [r7, #11]
 8006e06:	4611      	mov	r1, r2
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	4798      	blx	r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	e000      	b.n	8006e1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e02f      	b.n	8006eb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00f      	beq.n	8006e82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6852      	ldr	r2, [r2, #4]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e82:	2340      	movs	r3, #64	; 0x40
 8006e84:	2200      	movs	r2, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fa28 	bl	80082de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2240      	movs	r2, #64	; 0x40
 8006e9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e9e:	2340      	movs	r3, #64	; 0x40
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fa1a 	bl	80082de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2240      	movs	r2, #64	; 0x40
 8006eb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d106      	bne.n	8006f2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e012      	b.n	8006f78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d10b      	bne.n	8006f76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e014      	b.n	8006fc4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d10d      	bne.n	8006fc2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e014      	b.n	8007010 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d10d      	bne.n	800700e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	4611      	mov	r1, r2
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6852      	ldr	r2, [r2, #4]
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	4611      	mov	r1, r2
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
  }

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007066:	b480      	push	{r7}
 8007068:	b087      	sub	sp, #28
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3301      	adds	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007084:	8a3b      	ldrh	r3, [r7, #16]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	b21a      	sxth	r2, r3
 800708a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800708e:	4313      	orrs	r3, r2
 8007090:	b21b      	sxth	r3, r3
 8007092:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007094:	89fb      	ldrh	r3, [r7, #14]
}
 8007096:	4618      	mov	r0, r3
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	d005      	beq.n	80070ca <USBD_StdDevReq+0x26>
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d853      	bhi.n	800716a <USBD_StdDevReq+0xc6>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <USBD_StdDevReq+0x3a>
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d14f      	bne.n	800716a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
      break;
 80070dc:	e04a      	b.n	8007174 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	d83b      	bhi.n	800715e <USBD_StdDevReq+0xba>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <USBD_StdDevReq+0x48>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007141 	.word	0x08007141
 80070f0:	08007155 	.word	0x08007155
 80070f4:	0800715f 	.word	0x0800715f
 80070f8:	0800714b 	.word	0x0800714b
 80070fc:	0800715f 	.word	0x0800715f
 8007100:	0800711f 	.word	0x0800711f
 8007104:	08007115 	.word	0x08007115
 8007108:	0800715f 	.word	0x0800715f
 800710c:	08007137 	.word	0x08007137
 8007110:	08007129 	.word	0x08007129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9de 	bl	80074d8 <USBD_GetDescriptor>
          break;
 800711c:	e024      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb43 	bl	80077ac <USBD_SetAddress>
          break;
 8007126:	e01f      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb82 	bl	8007834 <USBD_SetConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
          break;
 8007134:	e018      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fc21 	bl	8007980 <USBD_GetConfig>
          break;
 800713e:	e013      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc52 	bl	80079ec <USBD_GetStatus>
          break;
 8007148:	e00e      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fc81 	bl	8007a54 <USBD_SetFeature>
          break;
 8007152:	e009      	b.n	8007168 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fc90 	bl	8007a7c <USBD_ClrFeature>
          break;
 800715c:	e004      	b.n	8007168 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fce7 	bl	8007b34 <USBD_CtlError>
          break;
 8007166:	bf00      	nop
      }
      break;
 8007168:	e004      	b.n	8007174 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fce1 	bl	8007b34 <USBD_CtlError>
      break;
 8007172:	bf00      	nop
  }

  return ret;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop

08007180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d005      	beq.n	80071a6 <USBD_StdItfReq+0x26>
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d82f      	bhi.n	80071fe <USBD_StdItfReq+0x7e>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <USBD_StdItfReq+0x26>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d12b      	bne.n	80071fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d81d      	bhi.n	80071f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	889b      	ldrh	r3, [r3, #4]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d813      	bhi.n	80071e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	88db      	ldrh	r3, [r3, #6]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d110      	bne.n	80071fa <USBD_StdItfReq+0x7a>
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fd56 	bl	8007c90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071e4:	e009      	b.n	80071fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fca3 	bl	8007b34 <USBD_CtlError>
          break;
 80071ee:	e004      	b.n	80071fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fc9e 	bl	8007b34 <USBD_CtlError>
          break;
 80071f8:	e000      	b.n	80071fc <USBD_StdItfReq+0x7c>
          break;
 80071fa:	bf00      	nop
      }
      break;
 80071fc:	e004      	b.n	8007208 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc97 	bl	8007b34 <USBD_CtlError>
      break;
 8007206:	bf00      	nop
  }

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	889b      	ldrh	r3, [r3, #4]
 8007224:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d007      	beq.n	8007242 <USBD_StdEPReq+0x30>
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	f200 8145 	bhi.w	80074c2 <USBD_StdEPReq+0x2b0>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <USBD_StdEPReq+0x44>
 800723c:	2b20      	cmp	r3, #32
 800723e:	f040 8140 	bne.w	80074c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	e13a      	b.n	80074cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d007      	beq.n	800726e <USBD_StdEPReq+0x5c>
 800725e:	2b03      	cmp	r3, #3
 8007260:	f300 8129 	bgt.w	80074b6 <USBD_StdEPReq+0x2a4>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d07f      	beq.n	8007368 <USBD_StdEPReq+0x156>
 8007268:	2b01      	cmp	r3, #1
 800726a:	d03c      	beq.n	80072e6 <USBD_StdEPReq+0xd4>
 800726c:	e123      	b.n	80074b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d002      	beq.n	8007280 <USBD_StdEPReq+0x6e>
 800727a:	2b03      	cmp	r3, #3
 800727c:	d016      	beq.n	80072ac <USBD_StdEPReq+0x9a>
 800727e:	e02c      	b.n	80072da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <USBD_StdEPReq+0x90>
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d00a      	beq.n	80072a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f869 	bl	8008368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007296:	2180      	movs	r1, #128	; 0x80
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f865 	bl	8008368 <USBD_LL_StallEP>
 800729e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a0:	e020      	b.n	80072e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc45 	bl	8007b34 <USBD_CtlError>
              break;
 80072aa:	e01b      	b.n	80072e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	885b      	ldrh	r3, [r3, #2]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10e      	bne.n	80072d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <USBD_StdEPReq+0xc0>
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b80      	cmp	r3, #128	; 0x80
 80072be:	d008      	beq.n	80072d2 <USBD_StdEPReq+0xc0>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	88db      	ldrh	r3, [r3, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 f84b 	bl	8008368 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fcdc 	bl	8007c90 <USBD_CtlSendStatus>

              break;
 80072d8:	e004      	b.n	80072e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc29 	bl	8007b34 <USBD_CtlError>
              break;
 80072e2:	bf00      	nop
          }
          break;
 80072e4:	e0ec      	b.n	80074c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d002      	beq.n	80072f8 <USBD_StdEPReq+0xe6>
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d016      	beq.n	8007324 <USBD_StdEPReq+0x112>
 80072f6:	e030      	b.n	800735a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <USBD_StdEPReq+0x108>
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	d00a      	beq.n	800731a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f82d 	bl	8008368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f829 	bl	8008368 <USBD_LL_StallEP>
 8007316:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007318:	e025      	b.n	8007366 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fc09 	bl	8007b34 <USBD_CtlError>
              break;
 8007322:	e020      	b.n	8007366 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	885b      	ldrh	r3, [r3, #2]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d11b      	bne.n	8007364 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 f833 	bl	80083a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fca5 	bl	8007c90 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007358:	e004      	b.n	8007364 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbe9 	bl	8007b34 <USBD_CtlError>
              break;
 8007362:	e000      	b.n	8007366 <USBD_StdEPReq+0x154>
              break;
 8007364:	bf00      	nop
          }
          break;
 8007366:	e0ab      	b.n	80074c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d002      	beq.n	800737a <USBD_StdEPReq+0x168>
 8007374:	2b03      	cmp	r3, #3
 8007376:	d032      	beq.n	80073de <USBD_StdEPReq+0x1cc>
 8007378:	e097      	b.n	80074aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <USBD_StdEPReq+0x17e>
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d004      	beq.n	8007390 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fbd3 	bl	8007b34 <USBD_CtlError>
                break;
 800738e:	e091      	b.n	80074b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	da0b      	bge.n	80073b0 <USBD_StdEPReq+0x19e>
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	3310      	adds	r3, #16
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	3304      	adds	r3, #4
 80073ae:	e00b      	b.n	80073c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4413      	add	r3, r2
 80073c6:	3304      	adds	r3, #4
 80073c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2202      	movs	r2, #2
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc1d 	bl	8007c16 <USBD_CtlSendData>
              break;
 80073dc:	e06a      	b.n	80074b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da11      	bge.n	800740a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d117      	bne.n	8007430 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb96 	bl	8007b34 <USBD_CtlError>
                  break;
 8007408:	e054      	b.n	80074b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	f003 020f 	and.w	r2, r3, #15
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fb83 	bl	8007b34 <USBD_CtlError>
                  break;
 800742e:	e041      	b.n	80074b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	da0b      	bge.n	8007450 <USBD_StdEPReq+0x23e>
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	3310      	adds	r3, #16
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	3304      	adds	r3, #4
 800744e:	e00b      	b.n	8007468 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	3304      	adds	r3, #4
 8007468:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <USBD_StdEPReq+0x264>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b80      	cmp	r3, #128	; 0x80
 8007474:	d103      	bne.n	800747e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e00e      	b.n	800749c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 ffae 	bl	80083e4 <USBD_LL_IsStallEP>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2201      	movs	r2, #1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e002      	b.n	800749c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2202      	movs	r2, #2
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fbb7 	bl	8007c16 <USBD_CtlSendData>
              break;
 80074a8:	e004      	b.n	80074b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb41 	bl	8007b34 <USBD_CtlError>
              break;
 80074b2:	bf00      	nop
          }
          break;
 80074b4:	e004      	b.n	80074c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fb3b 	bl	8007b34 <USBD_CtlError>
          break;
 80074be:	bf00      	nop
      }
      break;
 80074c0:	e004      	b.n	80074cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fb35 	bl	8007b34 <USBD_CtlError>
      break;
 80074ca:	bf00      	nop
  }

  return ret;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	885b      	ldrh	r3, [r3, #2]
 80074f2:	0a1b      	lsrs	r3, r3, #8
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b06      	cmp	r3, #6
 80074fa:	f200 8128 	bhi.w	800774e <USBD_GetDescriptor+0x276>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_GetDescriptor+0x2c>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007521 	.word	0x08007521
 8007508:	08007539 	.word	0x08007539
 800750c:	08007579 	.word	0x08007579
 8007510:	0800774f 	.word	0x0800774f
 8007514:	0800774f 	.word	0x0800774f
 8007518:	080076ef 	.word	0x080076ef
 800751c:	0800771b 	.word	0x0800771b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
      break;
 8007536:	e112      	b.n	800775e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7c1b      	ldrb	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10d      	bne.n	800755c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	f107 0208 	add.w	r2, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	2202      	movs	r2, #2
 8007558:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800755a:	e100      	b.n	800775e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
      break;
 8007576:	e0f2      	b.n	800775e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b05      	cmp	r3, #5
 8007580:	f200 80ac 	bhi.w	80076dc <USBD_GetDescriptor+0x204>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <USBD_GetDescriptor+0xb4>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075d9 	.word	0x080075d9
 8007594:	0800760d 	.word	0x0800760d
 8007598:	08007641 	.word	0x08007641
 800759c:	08007675 	.word	0x08007675
 80075a0:	080076a9 	.word	0x080076a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e091      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fab2 	bl	8007b34 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e089      	b.n	80076ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	7c12      	ldrb	r2, [r2, #16]
 80075f0:	f107 0108 	add.w	r1, r7, #8
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
 80075f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fa:	e077      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa98 	bl	8007b34 <USBD_CtlError>
            err++;
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	3301      	adds	r3, #1
 8007608:	72fb      	strb	r3, [r7, #11]
          break;
 800760a:	e06f      	b.n	80076ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 0108 	add.w	r1, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762e:	e05d      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa7e 	bl	8007b34 <USBD_CtlError>
            err++;
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	3301      	adds	r3, #1
 800763c:	72fb      	strb	r3, [r7, #11]
          break;
 800763e:	e055      	b.n	80076ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	f107 0108 	add.w	r1, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007662:	e043      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa64 	bl	8007b34 <USBD_CtlError>
            err++;
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	3301      	adds	r3, #1
 8007670:	72fb      	strb	r3, [r7, #11]
          break;
 8007672:	e03b      	b.n	80076ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	7c12      	ldrb	r2, [r2, #16]
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007696:	e029      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa4a 	bl	8007b34 <USBD_CtlError>
            err++;
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	3301      	adds	r3, #1
 80076a4:	72fb      	strb	r3, [r7, #11]
          break;
 80076a6:	e021      	b.n	80076ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ca:	e00f      	b.n	80076ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa30 	bl	8007b34 <USBD_CtlError>
            err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
          break;
 80076da:	e007      	b.n	80076ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa28 	bl	8007b34 <USBD_CtlError>
          err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80076ea:	bf00      	nop
      }
      break;
 80076ec:	e037      	b.n	800775e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7c1b      	ldrb	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	f107 0208 	add.w	r2, r7, #8
 8007702:	4610      	mov	r0, r2
 8007704:	4798      	blx	r3
 8007706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007708:	e029      	b.n	800775e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa11 	bl	8007b34 <USBD_CtlError>
        err++;
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	3301      	adds	r3, #1
 8007716:	72fb      	strb	r3, [r7, #11]
      break;
 8007718:	e021      	b.n	800775e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7c1b      	ldrb	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10d      	bne.n	800773e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f107 0208 	add.w	r2, r7, #8
 800772e:	4610      	mov	r0, r2
 8007730:	4798      	blx	r3
 8007732:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	2207      	movs	r2, #7
 800773a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800773c:	e00f      	b.n	800775e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9f7 	bl	8007b34 <USBD_CtlError>
        err++;
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	3301      	adds	r3, #1
 800774a:	72fb      	strb	r3, [r7, #11]
      break;
 800774c:	e007      	b.n	800775e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9ef 	bl	8007b34 <USBD_CtlError>
      err++;
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	3301      	adds	r3, #1
 800775a:	72fb      	strb	r3, [r7, #11]
      break;
 800775c:	bf00      	nop
  }

  if (err != 0U)
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11e      	bne.n	80077a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	88db      	ldrh	r3, [r3, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d016      	beq.n	800779a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800776c:	893b      	ldrh	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88da      	ldrh	r2, [r3, #6]
 8007776:	893b      	ldrh	r3, [r7, #8]
 8007778:	4293      	cmp	r3, r2
 800777a:	bf28      	it	cs
 800777c:	4613      	movcs	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	461a      	mov	r2, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa44 	bl	8007c16 <USBD_CtlSendData>
 800778e:	e009      	b.n	80077a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f9ce 	bl	8007b34 <USBD_CtlError>
 8007798:	e004      	b.n	80077a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa78 	bl	8007c90 <USBD_CtlSendStatus>
 80077a0:	e000      	b.n	80077a4 <USBD_GetDescriptor+0x2cc>
    return;
 80077a2:	bf00      	nop
  }
}
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	889b      	ldrh	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d131      	bne.n	8007822 <USBD_SetAddress+0x76>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d12d      	bne.n	8007822 <USBD_SetAddress+0x76>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	2b7f      	cmp	r3, #127	; 0x7f
 80077cc:	d829      	bhi.n	8007822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d104      	bne.n	80077f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9a3 	bl	8007b34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	e01d      	b.n	800782c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fe1d 	bl	800843c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa44 	bl	8007c90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	e009      	b.n	800782c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007820:	e004      	b.n	800782c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f985 	bl	8007b34 <USBD_CtlError>
  }
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <USBD_SetConfig+0x148>)
 800784a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800784c:	4b4b      	ldr	r3, [pc, #300]	; (800797c <USBD_SetConfig+0x148>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d905      	bls.n	8007860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f96c 	bl	8007b34 <USBD_CtlError>
    return USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	e088      	b.n	8007972 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d002      	beq.n	8007872 <USBD_SetConfig+0x3e>
 800786c:	2b03      	cmp	r3, #3
 800786e:	d025      	beq.n	80078bc <USBD_SetConfig+0x88>
 8007870:	e071      	b.n	8007956 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007872:	4b42      	ldr	r3, [pc, #264]	; (800797c <USBD_SetConfig+0x148>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01c      	beq.n	80078b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800787a:	4b40      	ldr	r3, [pc, #256]	; (800797c <USBD_SetConfig+0x148>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007884:	4b3d      	ldr	r3, [pc, #244]	; (800797c <USBD_SetConfig+0x148>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff f948 	bl	8006b20 <USBD_SetClassConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f949 	bl	8007b34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a2:	e065      	b.n	8007970 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9f3 	bl	8007c90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078b2:	e05d      	b.n	8007970 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f9eb 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 80078ba:	e059      	b.n	8007970 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <USBD_SetConfig+0x148>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <USBD_SetConfig+0x148>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <USBD_SetConfig+0x148>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff f93b 	bl	8006b58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9d4 	bl	8007c90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e8:	e042      	b.n	8007970 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <USBD_SetConfig+0x148>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d02a      	beq.n	800794e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff f929 	bl	8006b58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <USBD_SetConfig+0x148>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <USBD_SetConfig+0x148>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f902 	bl	8006b20 <USBD_SetClassConfig>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f903 	bl	8007b34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff f90e 	bl	8006b58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007944:	e014      	b.n	8007970 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9a2 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 800794c:	e010      	b.n	8007970 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f99e 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 8007954:	e00c      	b.n	8007970 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8eb 	bl	8007b34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <USBD_SetConfig+0x148>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff f8f7 	bl	8006b58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	bf00      	nop
  }

  return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000180 	.word	0x20000180

08007980 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d004      	beq.n	800799c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8cd 	bl	8007b34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800799a:	e023      	b.n	80079e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	dc02      	bgt.n	80079ae <USBD_GetConfig+0x2e>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc03      	bgt.n	80079b4 <USBD_GetConfig+0x34>
 80079ac:	e015      	b.n	80079da <USBD_GetConfig+0x5a>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d00b      	beq.n	80079ca <USBD_GetConfig+0x4a>
 80079b2:	e012      	b.n	80079da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3308      	adds	r3, #8
 80079be:	2201      	movs	r2, #1
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f927 	bl	8007c16 <USBD_CtlSendData>
        break;
 80079c8:	e00c      	b.n	80079e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f91f 	bl	8007c16 <USBD_CtlSendData>
        break;
 80079d8:	e004      	b.n	80079e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8a9 	bl	8007b34 <USBD_CtlError>
        break;
 80079e2:	bf00      	nop
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d81e      	bhi.n	8007a42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d004      	beq.n	8007a16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f890 	bl	8007b34 <USBD_CtlError>
        break;
 8007a14:	e01a      	b.n	8007a4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f043 0202 	orr.w	r2, r3, #2
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	330c      	adds	r3, #12
 8007a36:	2202      	movs	r2, #2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8eb 	bl	8007c16 <USBD_CtlSendData>
      break;
 8007a40:	e004      	b.n	8007a4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f875 	bl	8007b34 <USBD_CtlError>
      break;
 8007a4a:	bf00      	nop
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d106      	bne.n	8007a74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f90e 	bl	8007c90 <USBD_CtlSendStatus>
  }
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d80b      	bhi.n	8007aac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	885b      	ldrh	r3, [r3, #2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d10c      	bne.n	8007ab6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8f3 	bl	8007c90 <USBD_CtlSendStatus>
      }
      break;
 8007aaa:	e004      	b.n	8007ab6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f840 	bl	8007b34 <USBD_CtlError>
      break;
 8007ab4:	e000      	b.n	8007ab8 <USBD_ClrFeature+0x3c>
      break;
 8007ab6:	bf00      	nop
  }
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fabb 	bl	8007066 <SWAPBYTE>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff faae 	bl	8007066 <SWAPBYTE>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff faa1 	bl	8007066 <SWAPBYTE>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	80da      	strh	r2, [r3, #6]
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b3e:	2180      	movs	r1, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fc11 	bl	8008368 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fc0d 	bl	8008368 <USBD_LL_StallEP>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d036      	beq.n	8007bda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f000 f836 	bl	8007be2 <USBD_GetLen>
 8007b76:	4603      	mov	r3, r0
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	3301      	adds	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ba6:	e013      	b.n	8007bd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
    idx++;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e7      	bne.n	8007ba8 <USBD_GetString+0x52>
 8007bd8:	e000      	b.n	8007bdc <USBD_GetString+0x86>
    return;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bf2:	e005      	b.n	8007c00 <USBD_GetLen+0x1e>
  {
    len++;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f5      	bne.n	8007bf4 <USBD_GetLen+0x12>
  }

  return len;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fc1c 	bl	800847a <USBD_LL_Transmit>

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fc0b 	bl	800847a <USBD_LL_Transmit>

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fc1b 	bl	80084bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fbe7 	bl	800847a <USBD_LL_Transmit>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fbf5 	bl	80084bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	490e      	ldr	r1, [pc, #56]	; (8007d1c <MX_USB_DEVICE_Init+0x40>)
 8007ce4:	480e      	ldr	r0, [pc, #56]	; (8007d20 <MX_USB_DEVICE_Init+0x44>)
 8007ce6:	f7fe fead 	bl	8006a44 <USBD_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cf0:	f7f8 fedc 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007cf4:	490b      	ldr	r1, [pc, #44]	; (8007d24 <MX_USB_DEVICE_Init+0x48>)
 8007cf6:	480a      	ldr	r0, [pc, #40]	; (8007d20 <MX_USB_DEVICE_Init+0x44>)
 8007cf8:	f7fe fed4 	bl	8006aa4 <USBD_RegisterClass>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d02:	f7f8 fed3 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d06:	4806      	ldr	r0, [pc, #24]	; (8007d20 <MX_USB_DEVICE_Init+0x44>)
 8007d08:	f7fe fef3 	bl	8006af2 <USBD_Start>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d12:	f7f8 fecb 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d16:	bf00      	nop
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000114 	.word	0x20000114
 8007d20:	20000354 	.word	0x20000354
 8007d24:	2000000c 	.word	0x2000000c

08007d28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2212      	movs	r2, #18
 8007d38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20000130 	.word	0x20000130

08007d4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	6039      	str	r1, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d5e:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	20000144 	.word	0x20000144

08007d70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	4907      	ldr	r1, [pc, #28]	; (8007da4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d86:	4808      	ldr	r0, [pc, #32]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d88:	f7ff fee5 	bl	8007b56 <USBD_GetString>
 8007d8c:	e004      	b.n	8007d98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4904      	ldr	r1, [pc, #16]	; (8007da4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d92:	4805      	ldr	r0, [pc, #20]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d94:	f7ff fedf 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d98:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000624 	.word	0x20000624
 8007da8:	080085f8 	.word	0x080085f8

08007dac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	4904      	ldr	r1, [pc, #16]	; (8007dcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dbc:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dbe:	f7ff feca 	bl	8007b56 <USBD_GetString>
  return USBD_StrDesc;
 8007dc2:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20000624 	.word	0x20000624
 8007dd0:	08008610 	.word	0x08008610

08007dd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	221a      	movs	r2, #26
 8007de4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007de6:	f000 f843 	bl	8007e70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dea:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000148 	.word	0x20000148

08007df8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4907      	ldr	r1, [pc, #28]	; (8007e2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e0e:	4808      	ldr	r0, [pc, #32]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e10:	f7ff fea1 	bl	8007b56 <USBD_GetString>
 8007e14:	e004      	b.n	8007e20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e1c:	f7ff fe9b 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000624 	.word	0x20000624
 8007e30:	08008624 	.word	0x08008624

08007e34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4907      	ldr	r1, [pc, #28]	; (8007e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e4a:	4808      	ldr	r0, [pc, #32]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e4c:	f7ff fe83 	bl	8007b56 <USBD_GetString>
 8007e50:	e004      	b.n	8007e5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	4904      	ldr	r1, [pc, #16]	; (8007e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e56:	4805      	ldr	r0, [pc, #20]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e58:	f7ff fe7d 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e5c:	4b02      	ldr	r3, [pc, #8]	; (8007e68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000624 	.word	0x20000624
 8007e6c:	08008630 	.word	0x08008630

08007e70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <Get_SerialNum+0x44>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <Get_SerialNum+0x48>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e82:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <Get_SerialNum+0x4c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e96:	2208      	movs	r2, #8
 8007e98:	4909      	ldr	r1, [pc, #36]	; (8007ec0 <Get_SerialNum+0x50>)
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f814 	bl	8007ec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	4908      	ldr	r1, [pc, #32]	; (8007ec4 <Get_SerialNum+0x54>)
 8007ea4:	68b8      	ldr	r0, [r7, #8]
 8007ea6:	f000 f80f 	bl	8007ec8 <IntToUnicode>
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	1fff7a10 	.word	0x1fff7a10
 8007eb8:	1fff7a14 	.word	0x1fff7a14
 8007ebc:	1fff7a18 	.word	0x1fff7a18
 8007ec0:	2000014a 	.word	0x2000014a
 8007ec4:	2000015a 	.word	0x2000015a

08007ec8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
 8007ede:	e027      	b.n	8007f30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	0f1b      	lsrs	r3, r3, #28
 8007ee4:	2b09      	cmp	r3, #9
 8007ee6:	d80b      	bhi.n	8007f00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	0f1b      	lsrs	r3, r3, #28
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3230      	adds	r2, #48	; 0x30
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e00a      	b.n	8007f16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	0f1b      	lsrs	r3, r3, #28
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	440b      	add	r3, r1
 8007f10:	3237      	adds	r2, #55	; 0x37
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	3301      	adds	r3, #1
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	4413      	add	r3, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
 8007f30:	7dfa      	ldrb	r2, [r7, #23]
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d3d3      	bcc.n	8007ee0 <IntToUnicode+0x18>
  }
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f50:	f107 0314 	add.w	r3, r7, #20
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f68:	d158      	bne.n	800801c <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	4a2c      	ldr	r2, [pc, #176]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007f74:	f043 0301 	orr.w	r3, r3, #1
 8007f78:	6313      	str	r3, [r2, #48]	; 0x30
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4823      	ldr	r0, [pc, #140]	; (8008028 <HAL_PCD_MspInit+0xe0>)
 8007f9c:	f7fa f8fc 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8007fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8007fb6:	f107 0314 	add.w	r3, r7, #20
 8007fba:	4619      	mov	r1, r3
 8007fbc:	481a      	ldr	r0, [pc, #104]	; (8008028 <HAL_PCD_MspInit+0xe0>)
 8007fbe:	f7fa f8eb 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fd4:	230a      	movs	r3, #10
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4812      	ldr	r0, [pc, #72]	; (8008028 <HAL_PCD_MspInit+0xe0>)
 8007fe0:	f7fa f8da 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	4a0e      	ldr	r2, [pc, #56]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fee:	6353      	str	r3, [r2, #52]	; 0x34
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8007ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8008000:	4b08      	ldr	r3, [pc, #32]	; (8008024 <HAL_PCD_MspInit+0xdc>)
 8008002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	2043      	movs	r0, #67	; 0x43
 8008012:	f7f9 fd1a 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008016:	2043      	movs	r0, #67	; 0x43
 8008018:	f7f9 fd33 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800801c:	bf00      	nop
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40023800 	.word	0x40023800
 8008028:	40020000 	.word	0x40020000

0800802c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fe fda0 	bl	8006b88 <USBD_LL_SetupStage>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	4619      	mov	r1, r3
 800807a:	f7fe fdda 	bl	8006c32 <USBD_LL_DataOutStage>
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4613      	mov	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	3348      	adds	r3, #72	; 0x48
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	4619      	mov	r1, r3
 80080ae:	f7fe fe23 	bl	8006cf8 <USBD_LL_DataInStage>
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe ff37 	bl	8006f3c <USBD_LL_SOF>
}
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
 80080ee:	e008      	b.n	8008102 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d102      	bne.n	80080fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	e001      	b.n	8008102 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080fe:	f7f8 fcd5 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fed7 	bl	8006ec0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fe83 	bl	8006e24 <USBD_LL_Reset>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fed2 	bl	8006ee0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <HAL_PCD_SuspendCallback+0x48>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a03      	ldr	r2, [pc, #12]	; (8008170 <HAL_PCD_SuspendCallback+0x48>)
 8008162:	f043 0306 	orr.w	r3, r3, #6
 8008166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed00 	.word	0xe000ed00

08008174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fec2 	bl	8006f0c <USBD_LL_Resume>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe ff10 	bl	8006fcc <USBD_LL_IsoOUTIncomplete>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fed8 	bl	8006f80 <USBD_LL_IsoINIncomplete>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe ff16 	bl	8007018 <USBD_LL_DevConnected>
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe ff13 	bl	800702e <USBD_LL_DevDisconnected>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d13c      	bne.n	800829a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <USBD_LL_Init+0x94>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <USBD_LL_Init+0x94>)
 800822c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008230:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <USBD_LL_Init+0x94>)
 8008232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008236:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008238:	4b1a      	ldr	r3, [pc, #104]	; (80082a4 <USBD_LL_Init+0x94>)
 800823a:	2204      	movs	r2, #4
 800823c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800823e:	4b19      	ldr	r3, [pc, #100]	; (80082a4 <USBD_LL_Init+0x94>)
 8008240:	2202      	movs	r2, #2
 8008242:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008244:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <USBD_LL_Init+0x94>)
 8008246:	2200      	movs	r2, #0
 8008248:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800824a:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <USBD_LL_Init+0x94>)
 800824c:	2202      	movs	r2, #2
 800824e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008250:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <USBD_LL_Init+0x94>)
 8008252:	2200      	movs	r2, #0
 8008254:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <USBD_LL_Init+0x94>)
 8008258:	2200      	movs	r2, #0
 800825a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800825c:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <USBD_LL_Init+0x94>)
 800825e:	2200      	movs	r2, #0
 8008260:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008262:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <USBD_LL_Init+0x94>)
 8008264:	2200      	movs	r2, #0
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008268:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <USBD_LL_Init+0x94>)
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800826e:	480d      	ldr	r0, [pc, #52]	; (80082a4 <USBD_LL_Init+0x94>)
 8008270:	f7fa ff2c 	bl	80030cc <HAL_PCD_Init>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800827a:	f7f8 fc17 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800827e:	2180      	movs	r1, #128	; 0x80
 8008280:	4808      	ldr	r0, [pc, #32]	; (80082a4 <USBD_LL_Init+0x94>)
 8008282:	f7fc f872 	bl	800436a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008286:	2240      	movs	r2, #64	; 0x40
 8008288:	2100      	movs	r1, #0
 800828a:	4806      	ldr	r0, [pc, #24]	; (80082a4 <USBD_LL_Init+0x94>)
 800828c:	f7fc f826 	bl	80042dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008290:	2280      	movs	r2, #128	; 0x80
 8008292:	2101      	movs	r1, #1
 8008294:	4803      	ldr	r0, [pc, #12]	; (80082a4 <USBD_LL_Init+0x94>)
 8008296:	f7fc f821 	bl	80042dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000824 	.word	0x20000824

080082a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fb f821 	bl	8003306 <HAL_PCD_Start>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f930 	bl	8008530 <USBD_Get_USB_Status>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	461a      	mov	r2, r3
 80082ec:	4603      	mov	r3, r0
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70bb      	strb	r3, [r7, #2]
 80082f4:	4613      	mov	r3, r2
 80082f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008306:	78bb      	ldrb	r3, [r7, #2]
 8008308:	883a      	ldrh	r2, [r7, #0]
 800830a:	78f9      	ldrb	r1, [r7, #3]
 800830c:	f7fb fc05 	bl	8003b1a <HAL_PCD_EP_Open>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f90a 	bl	8008530 <USBD_Get_USB_Status>
 800831c:	4603      	mov	r3, r0
 800831e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008320:	7bbb      	ldrb	r3, [r7, #14]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7fb fc4e 	bl	8003bea <HAL_PCD_EP_Close>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f8eb 	bl	8008530 <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f7fb fd0e 	bl	8003da8 <HAL_PCD_EP_SetStall>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f8cc 	bl	8008530 <USBD_Get_USB_Status>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839c:	7bbb      	ldrb	r3, [r7, #14]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fb fd53 	bl	8003e70 <HAL_PCD_EP_ClrStall>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 f8ad 	bl	8008530 <USBD_Get_USB_Status>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083da:	7bbb      	ldrb	r3, [r7, #14]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da0b      	bge.n	8008418 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	333e      	adds	r3, #62	; 0x3e
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	e00b      	b.n	8008430 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800842e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7fb fb38 	bl	8003ad0 <HAL_PCD_SetAddress>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f862 	bl	8008530 <USBD_Get_USB_Status>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008470:	7bbb      	ldrb	r3, [r7, #14]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
 8008486:	460b      	mov	r3, r1
 8008488:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008498:	7af9      	ldrb	r1, [r7, #11]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	f7fb fc39 	bl	8003d14 <HAL_PCD_EP_Transmit>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f841 	bl	8008530 <USBD_Get_USB_Status>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	460b      	mov	r3, r1
 80084ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084da:	7af9      	ldrb	r1, [r7, #11]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f7fb fbcd 	bl	8003c7e <HAL_PCD_EP_Receive>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f820 	bl	8008530 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008508:	4b03      	ldr	r3, [pc, #12]	; (8008518 <USBD_static_malloc+0x18>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000184 	.word	0x20000184

0800851c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d817      	bhi.n	8008574 <USBD_Get_USB_Status+0x44>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <USBD_Get_USB_Status+0x1c>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	0800855d 	.word	0x0800855d
 8008550:	08008563 	.word	0x08008563
 8008554:	08008569 	.word	0x08008569
 8008558:	0800856f 	.word	0x0800856f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
    break;
 8008560:	e00b      	b.n	800857a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008562:	2303      	movs	r3, #3
 8008564:	73fb      	strb	r3, [r7, #15]
    break;
 8008566:	e008      	b.n	800857a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
    break;
 800856c:	e005      	b.n	800857a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800856e:	2303      	movs	r3, #3
 8008570:	73fb      	strb	r3, [r7, #15]
    break;
 8008572:	e002      	b.n	800857a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	73fb      	strb	r3, [r7, #15]
    break;
 8008578:	bf00      	nop
  }
  return usb_status;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	; (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	; (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	; (80085cc <__libc_init_array+0x44>)
 800859c:	f000 f820 	bl	80085e0 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08008668 	.word	0x08008668
 80085c4:	08008668 	.word	0x08008668
 80085c8:	08008668 	.word	0x08008668
 80085cc:	0800866c 	.word	0x0800866c

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
