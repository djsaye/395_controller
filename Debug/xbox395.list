
xbox395.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076dc  080076dc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e4  080076e4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e8  080076e8  000176e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080076ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000a18  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b98  20000b98  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001856f  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003632  00000000  00000000  0003871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  0003ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241b9  00000000  00000000  0003de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fe3  00000000  00000000  00062011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5aa  00000000  00000000  00078ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014359e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004728  00000000  00000000  001435f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007664 	.word	0x08007664

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007664 	.word	0x08007664

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fcc1 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f81f 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f91b 	bl	8000708 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f885 	bl	80005e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8b1 	bl	800063c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8df 	bl	800069c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fc3f 	bl	8006d60 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t buttons_state;
  while (1)
  {
	 poll_buttons(&buttons_state);
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fa33 	bl	8000950 <poll_buttons>
	 report_data[8] = buttons_state;
 80004ea:	88fa      	ldrh	r2, [r7, #6]
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <main+0x44>)
 80004ee:	821a      	strh	r2, [r3, #16]
	 USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &report_data, (9)*sizeof(uint16_t));
 80004f0:	2212      	movs	r2, #18
 80004f2:	4904      	ldr	r1, [pc, #16]	; (8000504 <main+0x44>)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <main+0x48>)
 80004f6:	f005 fa6d 	bl	80059d4 <USBD_HID_SendReport>
	 HAL_Delay(10);
 80004fa:	200a      	movs	r0, #10
 80004fc:	f000 fd18 	bl	8000f30 <HAL_Delay>
	 poll_buttons(&buttons_state);
 8000500:	e7ef      	b.n	80004e2 <main+0x22>
 8000502:	bf00      	nop
 8000504:	20000208 	.word	0x20000208
 8000508:	200002c0 	.word	0x200002c0

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f007 f89a 	bl	8007654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f002 ff20 	bl	80033d8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 faa7 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f981 	bl	80038c8 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 fa90 	bl	8000af0 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f000 ff8b 	bl	8001538 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 fa62 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001b4 	.word	0x200001b4
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_I2S3_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_I2S3_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_I2S3_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <MX_I2S3_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2S3_Init+0x54>)
 800067c:	f001 f8a0 	bl	80017c0 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 fa33 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000274 	.word	0x20000274
 8000694:	40003c00 	.word	0x40003c00
 8000698:	00017700 	.word	0x00017700

0800069c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_SPI1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI1_Init+0x64>)
 80006ee:	f003 fc13 	bl	8003f18 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f9fa 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000021c 	.word	0x2000021c
 8000704:	40013000 	.word	0x40013000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	4b85      	ldr	r3, [pc, #532]	; (8000938 <MX_GPIO_Init+0x230>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a84      	ldr	r2, [pc, #528]	; (8000938 <MX_GPIO_Init+0x230>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b82      	ldr	r3, [pc, #520]	; (8000938 <MX_GPIO_Init+0x230>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	4b7e      	ldr	r3, [pc, #504]	; (8000938 <MX_GPIO_Init+0x230>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a7d      	ldr	r2, [pc, #500]	; (8000938 <MX_GPIO_Init+0x230>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b7b      	ldr	r3, [pc, #492]	; (8000938 <MX_GPIO_Init+0x230>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b77      	ldr	r3, [pc, #476]	; (8000938 <MX_GPIO_Init+0x230>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a76      	ldr	r2, [pc, #472]	; (8000938 <MX_GPIO_Init+0x230>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b74      	ldr	r3, [pc, #464]	; (8000938 <MX_GPIO_Init+0x230>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b70      	ldr	r3, [pc, #448]	; (8000938 <MX_GPIO_Init+0x230>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <MX_GPIO_Init+0x230>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <MX_GPIO_Init+0x230>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b69      	ldr	r3, [pc, #420]	; (8000938 <MX_GPIO_Init+0x230>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a68      	ldr	r2, [pc, #416]	; (8000938 <MX_GPIO_Init+0x230>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <MX_GPIO_Init+0x230>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b62      	ldr	r3, [pc, #392]	; (8000938 <MX_GPIO_Init+0x230>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a61      	ldr	r2, [pc, #388]	; (8000938 <MX_GPIO_Init+0x230>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <MX_GPIO_Init+0x230>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	485c      	ldr	r0, [pc, #368]	; (800093c <MX_GPIO_Init+0x234>)
 80007cc:	f000 fe9a 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	485a      	ldr	r0, [pc, #360]	; (8000940 <MX_GPIO_Init+0x238>)
 80007d6:	f000 fe95 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007da:	2200      	movs	r2, #0
 80007dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007e0:	4858      	ldr	r0, [pc, #352]	; (8000944 <MX_GPIO_Init+0x23c>)
 80007e2:	f000 fe8f 	bl	8001504 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	484f      	ldr	r0, [pc, #316]	; (800093c <MX_GPIO_Init+0x234>)
 80007fe:	f000 fccd 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x238>)
 800081a:	f000 fcbf 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON4_Pin BUTTON5_Pin
                           BUTTON6_Pin BUTTON7_Pin BUTTON8_Pin BUTTON9_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON4_Pin|BUTTON5_Pin
 800081e:	f640 3376 	movw	r3, #2934	; 0xb76
 8000822:	61fb      	str	r3, [r7, #28]
                          |BUTTON6_Pin|BUTTON7_Pin|BUTTON8_Pin|BUTTON9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4843      	ldr	r0, [pc, #268]	; (8000940 <MX_GPIO_Init+0x238>)
 8000834:	f000 fcb2 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000848:	2305      	movs	r3, #5
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	483b      	ldr	r0, [pc, #236]	; (8000940 <MX_GPIO_Init+0x238>)
 8000854:	f000 fca2 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	2301      	movs	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <MX_GPIO_Init+0x240>)
 800086e:	f000 fc95 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000872:	2304      	movs	r3, #4
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4831      	ldr	r0, [pc, #196]	; (800094c <MX_GPIO_Init+0x244>)
 8000886:	f000 fc89 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON12_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON12_Pin;
 800088a:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4827      	ldr	r0, [pc, #156]	; (800093c <MX_GPIO_Init+0x234>)
 80008a0:	f000 fc7c 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_GPIO_Init+0x244>)
 80008c2:	f000 fc6b 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4819      	ldr	r0, [pc, #100]	; (8000944 <MX_GPIO_Init+0x23c>)
 80008e0:	f000 fc5c 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON10_Pin BUTTON11_Pin */
  GPIO_InitStruct.Pin = BUTTON10_Pin|BUTTON11_Pin;
 80008e4:	2306      	movs	r3, #6
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0x23c>)
 80008f8:	f000 fc50 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008fc:	2320      	movs	r3, #32
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_GPIO_Init+0x23c>)
 8000910:	f000 fc44 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000918:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0x234>)
 800092a:	f000 fc37 	bl	800119c <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	; 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020800 	.word	0x40020800
 8000944:	40020c00 	.word	0x40020c00
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <poll_buttons>:

/* USER CODE BEGIN 4 */
void poll_buttons (uint16_t * p_button_state)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	*p_button_state = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800095e:	2102      	movs	r1, #2
 8000960:	4860      	ldr	r0, [pc, #384]	; (8000ae4 <poll_buttons+0x194>)
 8000962:	f000 fdb7 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	4619      	mov	r1, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	881a      	ldrh	r2, [r3, #0]
 800096e:	b28b      	uxth	r3, r1
 8000970:	4313      	orrs	r3, r2
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) << 1;
 8000978:	2104      	movs	r1, #4
 800097a:	485a      	ldr	r0, [pc, #360]	; (8000ae4 <poll_buttons+0x194>)
 800097c:	f000 fdaa 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	0059      	lsls	r1, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	b21a      	sxth	r2, r3
 800098a:	b20b      	sxth	r3, r1
 800098c:	4313      	orrs	r3, r2
 800098e:	b21b      	sxth	r3, r3
 8000990:	b29a      	uxth	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) << 2;
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	4853      	ldr	r0, [pc, #332]	; (8000ae8 <poll_buttons+0x198>)
 800099a:	f000 fd9b 	bl	80014d4 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	0099      	lsls	r1, r3, #2
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	b20b      	sxth	r3, r1
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin) << 3;
 80009b4:	2110      	movs	r1, #16
 80009b6:	484b      	ldr	r0, [pc, #300]	; (8000ae4 <poll_buttons+0x194>)
 80009b8:	f000 fd8c 	bl	80014d4 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	00d9      	lsls	r1, r3, #3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	b20b      	sxth	r3, r1
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin) << 4;
 80009d2:	2120      	movs	r1, #32
 80009d4:	4843      	ldr	r0, [pc, #268]	; (8000ae4 <poll_buttons+0x194>)
 80009d6:	f000 fd7d 	bl	80014d4 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	0119      	lsls	r1, r3, #4
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	b20b      	sxth	r3, r1
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin) << 5;
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <poll_buttons+0x194>)
 80009f4:	f000 fd6e 	bl	80014d4 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	0159      	lsls	r1, r3, #5
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	b20b      	sxth	r3, r1
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin) << 6;
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4834      	ldr	r0, [pc, #208]	; (8000ae4 <poll_buttons+0x194>)
 8000a14:	f000 fd5e 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	0199      	lsls	r1, r3, #6
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	b20b      	sxth	r3, r1
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin) << 7;
 8000a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a32:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <poll_buttons+0x194>)
 8000a34:	f000 fd4e 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	01d9      	lsls	r1, r3, #7
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	b20b      	sxth	r3, r1
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin) << 8;
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <poll_buttons+0x194>)
 8000a54:	f000 fd3e 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	0219      	lsls	r1, r3, #8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	b20b      	sxth	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin) << 9;
 8000a6e:	2102      	movs	r1, #2
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <poll_buttons+0x19c>)
 8000a72:	f000 fd2f 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	0259      	lsls	r1, r3, #9
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	b20b      	sxth	r3, r1
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON11_GPIO_Port, BUTTON11_Pin) << 10;
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <poll_buttons+0x19c>)
 8000a90:	f000 fd20 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	0299      	lsls	r1, r3, #10
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	b20b      	sxth	r3, r1
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(BUTTON12_GPIO_Port, BUTTON12_Pin) << 11;
 8000aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <poll_buttons+0x198>)
 8000ab0:	f000 fd10 	bl	80014d4 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	02d9      	lsls	r1, r3, #11
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	b20b      	sxth	r3, r1
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
	*p_button_state ^= 0x0FFF;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	f483 637f 	eor.w	r3, r3, #4080	; 0xff0
 8000ad2:	f083 030f 	eor.w	r3, r3, #15
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	801a      	strh	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f000 faec 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f000 faf8 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <HAL_I2S_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15a      	bne.n	8000cc2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c10:	23c0      	movs	r3, #192	; 0xc0
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 f83b 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c28:	f7ff ff62 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <HAL_I2S_MspInit+0xf8>)
 8000c9c:	f000 fa7e 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_I2S_MspInit+0xfc>)
 8000cbe:	f000 fa6d 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_SPI_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d36:	23e0      	movs	r3, #224	; 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000d52:	f000 fa23 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f89a 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <OTG_FS_IRQHandler+0x10>)
 8000dc6:	f001 faeb 	bl	80023a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000790 	.word	0x20000790

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd7 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f006 fbf1 	bl	800760c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fb49 	bl	80004c0 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000e3c:	080076ec 	.word	0x080076ec
  ldr r2, =_sbss
 8000e40:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000e44:	20000b98 	.word	0x20000b98

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe3c 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200002bc 	.word	0x200002bc

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200002bc 	.word	0x200002bc

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5b      	ldr	r2, [pc, #364]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x310>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_GPIO_Init+0x334>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e001      	b.n	80014f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e12b      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff faf4 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800159c:	f002 fb68 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 80015a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a81      	ldr	r2, [pc, #516]	; (80017ac <HAL_I2C_Init+0x274>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d807      	bhi.n	80015bc <HAL_I2C_Init+0x84>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a80      	ldr	r2, [pc, #512]	; (80017b0 <HAL_I2C_Init+0x278>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e006      	b.n	80015ca <HAL_I2C_Init+0x92>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a7d      	ldr	r2, [pc, #500]	; (80017b4 <HAL_I2C_Init+0x27c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf94      	ite	ls
 80015c4:	2301      	movls	r3, #1
 80015c6:	2300      	movhi	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0e7      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a78      	ldr	r2, [pc, #480]	; (80017b8 <HAL_I2C_Init+0x280>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9b      	lsrs	r3, r3, #18
 80015dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_I2C_Init+0x274>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d802      	bhi.n	800160c <HAL_I2C_Init+0xd4>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	e009      	b.n	8001620 <HAL_I2C_Init+0xe8>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a69      	ldr	r2, [pc, #420]	; (80017bc <HAL_I2C_Init+0x284>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	3301      	adds	r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	495c      	ldr	r1, [pc, #368]	; (80017ac <HAL_I2C_Init+0x274>)
 800163c:	428b      	cmp	r3, r1
 800163e:	d819      	bhi.n	8001674 <HAL_I2C_Init+0x13c>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e59      	subs	r1, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fbb1 f3f3 	udiv	r3, r1, r3
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <HAL_I2C_Init+0x138>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e59      	subs	r1, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fbb1 f3f3 	udiv	r3, r1, r3
 8001668:	3301      	adds	r3, #1
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	e051      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001670:	2304      	movs	r3, #4
 8001672:	e04f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_I2C_Init+0x168>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	e012      	b.n	80016c6 <HAL_I2C_Init+0x18e>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x196>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e022      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10e      	bne.n	80016f4 <HAL_I2C_Init+0x1bc>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e58      	subs	r0, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	440b      	add	r3, r1
 80016e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1e58      	subs	r0, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	0099      	lsls	r1, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	6809      	ldr	r1, [r1, #0]
 8001718:	4313      	orrs	r3, r2
 800171a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6911      	ldr	r1, [r2, #16]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68d2      	ldr	r2, [r2, #12]
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	000186a0 	.word	0x000186a0
 80017b0:	001e847f 	.word	0x001e847f
 80017b4:	003d08ff 	.word	0x003d08ff
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	10624dd3 	.word	0x10624dd3

080017c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e128      	b.n	8001a24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <HAL_I2S_Init+0x26c>)
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f9f5 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001808:	f023 030f 	bic.w	r3, r3, #15
 800180c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d060      	beq.n	80018e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001826:	2310      	movs	r3, #16
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e001      	b.n	8001830 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b20      	cmp	r3, #32
 8001836:	d802      	bhi.n	800183e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800183e:	2001      	movs	r0, #1
 8001840:	f002 fb0c 	bl	8003e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8001844:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184e:	d125      	bne.n	800189c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d010      	beq.n	800187a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	3305      	adds	r3, #5
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e01f      	b.n	80018ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	fbb2 f2f3 	udiv	r2, r2, r3
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	3305      	adds	r3, #5
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e00e      	b.n	80018ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	3305      	adds	r3, #5
 80018b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_I2S_Init+0x270>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	e003      	b.n	80018e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d902      	bls.n	80018f4 <HAL_I2S_Init+0x134>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2bff      	cmp	r3, #255	; 0xff
 80018f2:	d907      	bls.n	8001904 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e08f      	b.n	8001a24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	ea42 0103 	orr.w	r1, r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	430a      	orrs	r2, r1
 8001916:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001922:	f023 030f 	bic.w	r3, r3, #15
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6851      	ldr	r1, [r2, #4]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6892      	ldr	r2, [r2, #8]
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68d2      	ldr	r2, [r2, #12]
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6992      	ldr	r2, [r2, #24]
 800193a:	430a      	orrs	r2, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001946:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d161      	bne.n	8001a14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_I2S_Init+0x274>)
 8001954:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <HAL_I2S_Init+0x278>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_I2S_Init+0x1a4>
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_I2S_Init+0x27c>)
 8001962:	e001      	b.n	8001968 <HAL_I2S_Init+0x1a8>
 8001964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4932      	ldr	r1, [pc, #200]	; (8001a38 <HAL_I2S_Init+0x278>)
 8001970:	428a      	cmp	r2, r1
 8001972:	d101      	bne.n	8001978 <HAL_I2S_Init+0x1b8>
 8001974:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_I2S_Init+0x27c>)
 8001976:	e001      	b.n	800197c <HAL_I2S_Init+0x1bc>
 8001978:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800197c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001980:	f023 030f 	bic.w	r3, r3, #15
 8001984:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_I2S_Init+0x278>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_I2S_Init+0x1d4>
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_I2S_Init+0x27c>)
 8001992:	e001      	b.n	8001998 <HAL_I2S_Init+0x1d8>
 8001994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001998:	2202      	movs	r2, #2
 800199a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <HAL_I2S_Init+0x278>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_I2S_Init+0x1ea>
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_I2S_Init+0x27c>)
 80019a8:	e001      	b.n	80019ae <HAL_I2S_Init+0x1ee>
 80019aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ba:	d003      	beq.n	80019c4 <HAL_I2S_Init+0x204>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e001      	b.n	80019d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019da:	4313      	orrs	r3, r2
 80019dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	897b      	ldrh	r3, [r7, #10]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_I2S_Init+0x278>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_I2S_Init+0x24c>
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_I2S_Init+0x27c>)
 8001a0a:	e001      	b.n	8001a10 <HAL_I2S_Init+0x250>
 8001a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a10:	897a      	ldrh	r2, [r7, #10]
 8001a12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08001b37 	.word	0x08001b37
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	08001c4d 	.word	0x08001c4d
 8001a38:	40003800 	.word	0x40003800
 8001a3c:	40003400 	.word	0x40003400

08001a40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	1c9a      	adds	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10e      	bne.n	8001ad0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ac0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffb8 	bl	8001a40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	b292      	uxth	r2, r2
 8001aec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	1c9a      	adds	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10e      	bne.n	8001b2e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff93 	bl	8001a54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d13a      	bne.n	8001bc8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d109      	bne.n	8001b70 <I2S_IRQHandler+0x3a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	2b40      	cmp	r3, #64	; 0x40
 8001b68:	d102      	bne.n	8001b70 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffb4 	bl	8001ad8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d126      	bne.n	8001bc8 <I2S_IRQHandler+0x92>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d11f      	bne.n	8001bc8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff50 	bl	8001a68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d136      	bne.n	8001c42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d109      	bne.n	8001bf2 <I2S_IRQHandler+0xbc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d102      	bne.n	8001bf2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff45 	bl	8001a7c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d122      	bne.n	8001c42 <I2S_IRQHandler+0x10c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d11b      	bne.n	8001c42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff13 	bl	8001a68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4aa2      	ldr	r2, [pc, #648]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c66:	4ba2      	ldr	r3, [pc, #648]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c68:	e001      	b.n	8001c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a9b      	ldr	r2, [pc, #620]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c84:	4b9a      	ldr	r3, [pc, #616]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c86:	e001      	b.n	8001c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c98:	d004      	beq.n	8001ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8099 	bne.w	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f925 	bl	8001f08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f9c8 	bl	8002068 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d13a      	bne.n	8001d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d035      	beq.n	8001d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cf8:	e001      	b.n	8001cfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4979      	ldr	r1, [pc, #484]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d06:	428b      	cmp	r3, r1
 8001d08:	d101      	bne.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d0a:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d0c:	e001      	b.n	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f043 0202 	orr.w	r2, r3, #2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe88 	bl	8001a68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	f040 80be 	bne.w	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b8 	beq.w	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a59      	ldr	r2, [pc, #356]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d8a:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d8c:	e001      	b.n	8001d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4954      	ldr	r1, [pc, #336]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d9a:	428b      	cmp	r3, r1
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001da0:	e001      	b.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001daa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fe4a 	bl	8001a68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dd4:	e084      	b.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d107      	bne.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8be 	bl	8001f6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8fd 	bl	8002004 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d12f      	bne.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02a      	beq.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e3a:	e001      	b.n	8001e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4929      	ldr	r1, [pc, #164]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e4e:	e001      	b.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fdfa 	bl	8001a68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d131      	bne.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02c      	beq.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e94:	e001      	b.n	8001e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ea2:	428b      	cmp	r3, r1
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ea8:	e001      	b.n	8001eae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fdc5 	bl	8001a68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ede:	e000      	b.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ee0:	bf00      	nop
}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40003800 	.word	0x40003800
 8001ef0:	40003400 	.word	0x40003400

08001ef4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c99      	adds	r1, r3, #2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6251      	str	r1, [r2, #36]	; 0x24
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d113      	bne.n	8001f62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d106      	bne.n	8001f62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffc9 	bl	8001ef4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c99      	adds	r1, r3, #2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f7e:	8819      	ldrh	r1, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <I2SEx_TxISR_I2SExt+0x90>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <I2SEx_TxISR_I2SExt+0x22>
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <I2SEx_TxISR_I2SExt+0x94>)
 8001f8c:	e001      	b.n	8001f92 <I2SEx_TxISR_I2SExt+0x26>
 8001f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f92:	460a      	mov	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d121      	bne.n	8001ff2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <I2SEx_TxISR_I2SExt+0x90>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <I2SEx_TxISR_I2SExt+0x50>
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <I2SEx_TxISR_I2SExt+0x94>)
 8001fba:	e001      	b.n	8001fc0 <I2SEx_TxISR_I2SExt+0x54>
 8001fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <I2SEx_TxISR_I2SExt+0x90>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d101      	bne.n	8001fd0 <I2SEx_TxISR_I2SExt+0x64>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <I2SEx_TxISR_I2SExt+0x94>)
 8001fce:	e001      	b.n	8001fd4 <I2SEx_TxISR_I2SExt+0x68>
 8001fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff81 	bl	8001ef4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40003800 	.word	0x40003800
 8002000:	40003400 	.word	0x40003400

08002004 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68d8      	ldr	r0, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	1c99      	adds	r1, r3, #2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800201c:	b282      	uxth	r2, r0
 800201e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d113      	bne.n	8002060 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002046:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff4a 	bl	8001ef4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <I2SEx_RxISR_I2SExt+0x90>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <I2SEx_RxISR_I2SExt+0x16>
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <I2SEx_RxISR_I2SExt+0x94>)
 800207c:	e001      	b.n	8002082 <I2SEx_RxISR_I2SExt+0x1a>
 800207e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002082:	68d8      	ldr	r0, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	1c99      	adds	r1, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800208e:	b282      	uxth	r2, r0
 8002090:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <I2SEx_RxISR_I2SExt+0x90>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <I2SEx_RxISR_I2SExt+0x50>
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <I2SEx_RxISR_I2SExt+0x94>)
 80020b6:	e001      	b.n	80020bc <I2SEx_RxISR_I2SExt+0x54>
 80020b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <I2SEx_RxISR_I2SExt+0x90>)
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d101      	bne.n	80020cc <I2SEx_RxISR_I2SExt+0x64>
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <I2SEx_RxISR_I2SExt+0x94>)
 80020ca:	e001      	b.n	80020d0 <I2SEx_RxISR_I2SExt+0x68>
 80020cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff03 	bl	8001ef4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40003800 	.word	0x40003800
 80020fc:	40003400 	.word	0x40003400

08002100 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b08f      	sub	sp, #60	; 0x3c
 8002104:	af0a      	add	r7, sp, #40	; 0x28
 8002106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e10f      	b.n	8002332 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f004 ff4d 	bl	8006fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 f87e 	bl	8004252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	687e      	ldr	r6, [r7, #4]
 800215e:	466d      	mov	r5, sp
 8002160:	f106 0410 	add.w	r4, r6, #16
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002170:	e885 0003 	stmia.w	r5, {r0, r1}
 8002174:	1d33      	adds	r3, r6, #4
 8002176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f001 ff56 	bl	800402a <USB_CoreInit>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f002 f86c 	bl	8004274 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e04a      	b.n	8002238 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	333d      	adds	r3, #61	; 0x3d
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	333c      	adds	r3, #60	; 0x3c
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	b298      	uxth	r0, r3
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	4602      	mov	r2, r0
 80021e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333f      	adds	r3, #63	; 0x3f
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3344      	adds	r3, #68	; 0x44
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3348      	adds	r3, #72	; 0x48
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3350      	adds	r3, #80	; 0x50
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	3301      	adds	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d3af      	bcc.n	80021a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e044      	b.n	80022d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	3301      	adds	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3b5      	bcc.n	8002248 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	687e      	ldr	r6, [r7, #4]
 80022e4:	466d      	mov	r5, sp
 80022e6:	f106 0410 	add.w	r4, r6, #16
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fa:	1d33      	adds	r3, r6, #4
 80022fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f002 f804 	bl	800430c <USB_DevInit>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00d      	b.n	8002332 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f880 	bl	8005430 <USB_DevDisconnect>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_PCD_Start+0x1c>
 8002352:	2302      	movs	r3, #2
 8002354:	e020      	b.n	8002398 <HAL_PCD_Start+0x5e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d109      	bne.n	800237a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800236a:	2b01      	cmp	r3, #1
 800236c:	d005      	beq.n	800237a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f001 ff56 	bl	8004230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f830 	bl	80053ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b08d      	sub	sp, #52	; 0x34
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 f8ee 	bl	8005598 <USB_GetMode>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 839d 	bne.w	8002afe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f852 	bl	8005472 <USB_ReadInterrupts>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8393 	beq.w	8002afc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f849 	bl	8005472 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f002 0202 	and.w	r2, r2, #2
 80023f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 f837 	bl	8005472 <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b10      	cmp	r3, #16
 800240c:	d161      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0210 	bic.w	r2, r2, #16
 800241c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	0c5b      	lsrs	r3, r3, #17
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	2b02      	cmp	r3, #2
 8002448:	d124      	bne.n	8002494 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d035      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	6a38      	ldr	r0, [r7, #32]
 800246a:	f002 fe6e 	bl	800514a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247a:	441a      	add	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248c:	441a      	add	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	e016      	b.n	80024c2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	0c5b      	lsrs	r3, r3, #17
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	2b06      	cmp	r3, #6
 800249e:	d110      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024a6:	2208      	movs	r2, #8
 80024a8:	4619      	mov	r1, r3
 80024aa:	6a38      	ldr	r0, [r7, #32]
 80024ac:	f002 fe4d 	bl	800514a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024bc:	441a      	add	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0210 	orr.w	r2, r2, #16
 80024d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 ffcb 	bl	8005472 <USB_ReadInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024e6:	d16e      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 ffd1 	bl	8005498 <USB_ReadDevAllOutEpInterrupt>
 80024f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024f8:	e062      	b.n	80025c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d057      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fff6 	bl	8005500 <USB_ReadDevOutEPInterrupt>
 8002514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	2301      	movs	r3, #1
 8002530:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fd99 	bl	800306c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	461a      	mov	r2, r3
 8002552:	2308      	movs	r3, #8
 8002554:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fe93 	bl	8003284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002574:	461a      	mov	r2, r3
 8002576:	2310      	movs	r3, #16
 8002578:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	2320      	movs	r3, #32
 8002594:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d199      	bne.n	80024fa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 ff51 	bl	8005472 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025da:	f040 80c0 	bne.w	800275e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 ff72 	bl	80054cc <USB_ReadDevAllInEpInterrupt>
 80025e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025ee:	e0b2      	b.n	8002756 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a7 	beq.w	800274a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f002 ff98 	bl	800553c <USB_ReadDevInEPInterrupt>
 800260c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d057      	beq.n	80026c8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	2201      	movs	r2, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	69f9      	ldr	r1, [r7, #28]
 8002634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002638:	4013      	ands	r3, r2
 800263a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002648:	461a      	mov	r2, r3
 800264a:	2301      	movs	r3, #1
 800264c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d132      	bne.n	80026bc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3348      	adds	r3, #72	; 0x48
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4403      	add	r3, r0
 8002676:	3344      	adds	r3, #68	; 0x44
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4419      	add	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4403      	add	r3, r0
 800268a:	3348      	adds	r3, #72	; 0x48
 800268c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d113      	bne.n	80026bc <HAL_PCD_IRQHandler+0x31c>
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026b4:	461a      	mov	r2, r3
 80026b6:	2101      	movs	r1, #1
 80026b8:	f002 ffa0 	bl	80055fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f004 fd21 	bl	800710a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026de:	461a      	mov	r2, r3
 80026e0:	2308      	movs	r3, #8
 80026e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fa:	461a      	mov	r2, r3
 80026fc:	2310      	movs	r3, #16
 80026fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002716:	461a      	mov	r2, r3
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002732:	461a      	mov	r2, r3
 8002734:	2302      	movs	r3, #2
 8002736:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fc03 	bl	8002f50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	f47f af49 	bne.w	80025f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fe85 	bl	8005472 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800276e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002772:	d122      	bne.n	80027ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800279a:	2100      	movs	r1, #0
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fe0f 	bl	80033c0 <HAL_PCDEx_LPM_Callback>
 80027a2:	e002      	b.n	80027aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f004 fd27 	bl	80071f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fe57 	bl	8005472 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ce:	d112      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f004 fce3 	bl	80071ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fe39 	bl	8005472 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	f040 80c7 	bne.w	800299c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2110      	movs	r1, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fed3 	bl	80045d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	e056      	b.n	80028e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002840:	461a      	mov	r2, r3
 8002842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002846:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002858:	0151      	lsls	r1, r2, #5
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	440a      	add	r2, r1
 800285e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002866:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	440a      	add	r2, r1
 800287e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002886:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800289a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ac:	0151      	lsls	r1, r2, #5
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	440a      	add	r2, r1
 80028b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	3301      	adds	r3, #1
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d3a3      	bcc.n	8002834 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	2b00      	cmp	r3, #0
 8002906:	d016      	beq.n	8002936 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002918:	f043 030b 	orr.w	r3, r3, #11
 800291c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292e:	f043 030b 	orr.w	r3, r3, #11
 8002932:	6453      	str	r3, [r2, #68]	; 0x44
 8002934:	e015      	b.n	8002962 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002944:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002948:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800294c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295c:	f043 030b 	orr.w	r3, r3, #11
 8002960:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002970:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002974:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002986:	461a      	mov	r2, r3
 8002988:	f002 fe38 	bl	80055fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fd66 	bl	8005472 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	d124      	bne.n	80029fc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fdfc 	bl	80055b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fe64 	bl	800468e <USB_GetDevSpeed>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681c      	ldr	r4, [r3, #0]
 80029d2:	f001 f941 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 80029d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f001 fb83 	bl	80040ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f004 fbb7 	bl	800715a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fd36 	bl	8005472 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d10a      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f004 fb94 	bl	800713e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f002 0208 	and.w	r2, r2, #8
 8002a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fd21 	bl	8005472 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a3a:	d10f      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f004 fbf6 	bl	8007238 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 fd06 	bl	8005472 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a70:	d10f      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f004 fbc9 	bl	8007214 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fceb 	bl	8005472 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d10a      	bne.n	8002abe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f004 fbd7 	bl	800725c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fcd5 	bl	8005472 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d115      	bne.n	8002afe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f004 fbc7 	bl	8007278 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	e000      	b.n	8002afe <HAL_PCD_IRQHandler+0x75e>
      return;
 8002afc:	bf00      	nop
    }
  }
}
 8002afe:	3734      	adds	r7, #52	; 0x34
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}

08002b04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_SetAddress+0x1a>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e013      	b.n	8002b46 <HAL_PCD_SetAddress+0x42>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 fc33 	bl	80053a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	4608      	mov	r0, r1
 8002b58:	4611      	mov	r1, r2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	70fb      	strb	r3, [r7, #3]
 8002b60:	460b      	mov	r3, r1
 8002b62:	803b      	strh	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	da0f      	bge.n	8002b94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3338      	adds	r3, #56	; 0x38
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	3304      	adds	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
 8002b92:	e00f      	b.n	8002bb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bc0:	883a      	ldrh	r2, [r7, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	78ba      	ldrb	r2, [r7, #2]
 8002bca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d102      	bne.n	8002bea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_PCD_EP_Open+0xaa>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e00e      	b.n	8002c16 <HAL_PCD_EP_Open+0xc8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fd66 	bl	80046d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c14:	7afb      	ldrb	r3, [r7, #11]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da0f      	bge.n	8002c52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3338      	adds	r3, #56	; 0x38
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	705a      	strb	r2, [r3, #1]
 8002c50:	e00f      	b.n	8002c72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_PCD_EP_Close+0x6e>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e00e      	b.n	8002caa <HAL_PCD_EP_Close+0x8c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fda4 	bl	80047e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6979      	ldr	r1, [r7, #20]
 8002d26:	f002 f87f 	bl	8004e28 <USB_EP0StartXfer>
 8002d2a:	e008      	b.n	8002d3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	f001 fe31 	bl	80049a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	460b      	mov	r3, r1
 8002d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3338      	adds	r3, #56	; 0x38
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2201      	movs	r2, #1
 8002d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d88:	7afb      	ldrb	r3, [r7, #11]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	f002 f835 	bl	8004e28 <USB_EP0StartXfer>
 8002dbe:	e008      	b.n	8002dd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	f001 fde7 	bl	80049a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d901      	bls.n	8002dfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e050      	b.n	8002e9c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da0f      	bge.n	8002e22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3338      	adds	r3, #56	; 0x38
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	3304      	adds	r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	705a      	strb	r2, [r3, #1]
 8002e20:	e00d      	b.n	8002e3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_PCD_EP_SetStall+0x82>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e01e      	b.n	8002e9c <HAL_PCD_EP_SetStall+0xc0>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 f9c4 	bl	80051fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	b2d9      	uxtb	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f002 fbb5 	bl	80055fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d901      	bls.n	8002ec2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e042      	b.n	8002f48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da0f      	bge.n	8002eea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3338      	adds	r3, #56	; 0x38
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	705a      	strb	r2, [r3, #1]
 8002ee8:	e00f      	b.n	8002f0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	3304      	adds	r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_EP_ClrStall+0x86>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e00e      	b.n	8002f48 <HAL_PCD_EP_ClrStall+0xa4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 f9cc 	bl	80052d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	3338      	adds	r3, #56	; 0x38
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e06c      	b.n	8003062 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d902      	bls.n	8002fa4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fac:	e02b      	b.n	8003006 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d902      	bls.n	8002fca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3303      	adds	r3, #3
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68d9      	ldr	r1, [r3, #12]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6978      	ldr	r0, [r7, #20]
 8002fea:	f002 f870 	bl	80050ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	441a      	add	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	b29b      	uxth	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	429a      	cmp	r2, r3
 800301a:	d809      	bhi.n	8003030 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003024:	429a      	cmp	r2, r3
 8003026:	d203      	bcs.n	8003030 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1be      	bne.n	8002fae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	429a      	cmp	r2, r3
 800303a:	d811      	bhi.n	8003060 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	2201      	movs	r2, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	43db      	mvns	r3, r3
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800305c:	4013      	ands	r3, r2
 800305e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	333c      	adds	r3, #60	; 0x3c
 8003084:	3304      	adds	r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f040 80a0 	bne.w	80031e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a72      	ldr	r2, [pc, #456]	; (800327c <PCD_EP_OutXfrComplete_int+0x210>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	f240 80dd 	bls.w	8003272 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80d7 	beq.w	8003272 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d0:	461a      	mov	r2, r3
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	6093      	str	r3, [r2, #8]
 80030d8:	e0cb      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	461a      	mov	r2, r3
 80030f2:	2320      	movs	r3, #32
 80030f4:	6093      	str	r3, [r2, #8]
 80030f6:	e0bc      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 80b7 	bne.w	8003272 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a5d      	ldr	r2, [pc, #372]	; (800327c <PCD_EP_OutXfrComplete_int+0x210>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d90f      	bls.n	800312c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003122:	461a      	mov	r2, r3
 8003124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	e0a2      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800313e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	440b      	add	r3, r1
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003152:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4403      	add	r3, r0
 8003162:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003166:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4403      	add	r3, r0
 800318a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4419      	add	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4403      	add	r3, r0
 80031a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d114      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ce:	461a      	mov	r2, r3
 80031d0:	2101      	movs	r1, #1
 80031d2:	f002 fa13 	bl	80055fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f003 ff79 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
 80031e2:	e046      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <PCD_EP_OutXfrComplete_int+0x214>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d124      	bne.n	8003236 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	461a      	mov	r2, r3
 8003204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003208:	6093      	str	r3, [r2, #8]
 800320a:	e032      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	2320      	movs	r3, #32
 8003226:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f003 ff50 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
 8003234:	e01d      	b.n	8003272 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d114      	bne.n	8003266 <PCD_EP_OutXfrComplete_int+0x1fa>
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800325e:	461a      	mov	r2, r3
 8003260:	2100      	movs	r1, #0
 8003262:	f002 f9cb 	bl	80055fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f003 ff31 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	4f54300a 	.word	0x4f54300a
 8003280:	4f54310a 	.word	0x4f54310a

08003284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	333c      	adds	r3, #60	; 0x3c
 800329c:	3304      	adds	r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <PCD_EP_OutSetupPacket_int+0x88>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d90e      	bls.n	80032d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	461a      	mov	r2, r3
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f003 fee9 	bl	80070b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <PCD_EP_OutSetupPacket_int+0x88>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90c      	bls.n	8003300 <PCD_EP_OutSetupPacket_int+0x7c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032f8:	461a      	mov	r2, r3
 80032fa:	2101      	movs	r1, #1
 80032fc:	f002 f97e 	bl	80055fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	4f54300a 	.word	0x4f54300a

08003310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800332e:	883b      	ldrh	r3, [r7, #0]
 8003330:	0419      	lsls	r1, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	430a      	orrs	r2, r1
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e028      	b.n	8003390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e00d      	b.n	800336e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	3301      	adds	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	3b01      	subs	r3, #1
 8003374:	429a      	cmp	r2, r3
 8003376:	d3ec      	bcc.n	8003352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003378:	883b      	ldrh	r3, [r7, #0]
 800337a:	0418      	lsls	r0, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	3b01      	subs	r3, #1
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4302      	orrs	r2, r0
 8003388:	3340      	adds	r3, #64	; 0x40
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e264      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	4ba3      	ldr	r3, [pc, #652]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d00c      	beq.n	800341c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4ba0      	ldr	r3, [pc, #640]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d112      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b9d      	ldr	r3, [pc, #628]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4b99      	ldr	r3, [pc, #612]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x108>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e23f      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x74>
 800343e:	4b91      	ldr	r3, [pc, #580]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a90      	ldr	r2, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a8a      	ldr	r2, [pc, #552]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a87      	ldr	r2, [pc, #540]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 8003470:	4b84      	ldr	r3, [pc, #528]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a83      	ldr	r2, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b81      	ldr	r3, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a80      	ldr	r2, [pc, #512]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fd42 	bl	8000f18 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fd fd3e 	bl	8000f18 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e204      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xc0>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd fd2e 	bl	8000f18 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fd fd2a 	bl	8000f18 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1f0      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0xe8>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b62      	ldr	r3, [pc, #392]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1c4      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4952      	ldr	r1, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <HAL_RCC_OscConfig+0x2b0>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd fce3 	bl	8000f18 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003556:	f7fd fcdf 	bl	8000f18 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a5      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4940      	ldr	r1, [pc, #256]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_RCC_OscConfig+0x2b0>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fcc2 	bl	8000f18 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003598:	f7fd fcbe 	bl	8000f18 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e184      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d030      	beq.n	8003624 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCC_OscConfig+0x2b4>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fd fca2 	bl	8000f18 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fd fc9e 	bl	8000f18 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e164      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x200>
 80035f6:	e015      	b.n	8003624 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x2b4>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fc8b 	bl	8000f18 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003606:	f7fd fc87 	bl	8000f18 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e14d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a0 	beq.w	8003772 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x2b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d121      	bne.n	80036b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_RCC_OscConfig+0x2b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HAL_RCC_OscConfig+0x2b8>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fd fc4d 	bl	8000f18 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e011      	b.n	80036a6 <HAL_RCC_OscConfig+0x2ce>
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	42470000 	.word	0x42470000
 800368c:	42470e80 	.word	0x42470e80
 8003690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fd fc40 	bl	8000f18 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e106      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x4e4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
 80036ba:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e01c      	b.n	8003702 <HAL_RCC_OscConfig+0x32a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_OscConfig+0x312>
 80036d0:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a7a      	ldr	r2, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x32a>
 80036ea:	4b75      	ldr	r3, [pc, #468]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a74      	ldr	r2, [pc, #464]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	4b72      	ldr	r3, [pc, #456]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a71      	ldr	r2, [pc, #452]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d015      	beq.n	8003736 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fc05 	bl	8000f18 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fd fc01 	bl	8000f18 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0c5      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ee      	beq.n	8003712 <HAL_RCC_OscConfig+0x33a>
 8003734:	e014      	b.n	8003760 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7fd fbef 	bl	8000f18 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd fbeb 	bl	8000f18 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0af      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ee      	bne.n	800373e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a55      	ldr	r2, [pc, #340]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 809b 	beq.w	80038b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d05c      	beq.n	8003842 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d141      	bne.n	8003814 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fd fbbf 	bl	8000f18 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fd fbbb 	bl	8000f18 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e081      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	4937      	ldr	r1, [pc, #220]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fb94 	bl	8000f18 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fb90 	bl	8000f18 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e056      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x41c>
 8003812:	e04e      	b.n	80038b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd fb7d 	bl	8000f18 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003822:	f7fd fb79 	bl	8000f18 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e03f      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x44a>
 8003840:	e037      	b.n	80038b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e032      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384e:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d028      	beq.n	80038ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d121      	bne.n	80038ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d11a      	bne.n	80038ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800387e:	4013      	ands	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003884:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003886:	4293      	cmp	r3, r2
 8003888:	d111      	bne.n	80038ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d107      	bne.n	80038ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40007000 	.word	0x40007000
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470060 	.word	0x42470060

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0cc      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d90c      	bls.n	8003904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d044      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d119      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	2b03      	cmp	r3, #3
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e067      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4934      	ldr	r1, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fd faae 	bl	8000f18 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fd faaa 	bl	8000f18 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e04f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d20c      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fa0e 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	40023800 	.word	0x40023800
 8003a88:	080076c4 	.word	0x080076c4
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80bd 	bhi.w	8003c38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e0b7      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aca:	60bb      	str	r3, [r7, #8]
       break;
 8003acc:	e0b7      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ad0:	60bb      	str	r3, [r7, #8]
      break;
 8003ad2:	e0b4      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04d      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	461a      	mov	r2, r3
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	ea02 0800 	and.w	r8, r2, r0
 8003b02:	ea03 0901 	and.w	r9, r3, r1
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	014b      	lsls	r3, r1, #5
 8003b14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b18:	0142      	lsls	r2, r0, #5
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	ebb0 0008 	subs.w	r0, r0, r8
 8003b22:	eb61 0109 	sbc.w	r1, r1, r9
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	018b      	lsls	r3, r1, #6
 8003b30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b34:	0182      	lsls	r2, r0, #6
 8003b36:	1a12      	subs	r2, r2, r0
 8003b38:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	00d9      	lsls	r1, r3, #3
 8003b46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b4a:	00d0      	lsls	r0, r2, #3
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	eb12 0208 	adds.w	r2, r2, r8
 8003b54:	eb43 0309 	adc.w	r3, r3, r9
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	0259      	lsls	r1, r3, #9
 8003b62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b66:	0250      	lsls	r0, r2, #9
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	f7fc fb26 	bl	80001c8 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e04a      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	ea02 0400 	and.w	r4, r2, r0
 8003b9e:	ea03 0501 	and.w	r5, r3, r1
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	014b      	lsls	r3, r1, #5
 8003bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb4:	0142      	lsls	r2, r0, #5
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	1b00      	subs	r0, r0, r4
 8003bbc:	eb61 0105 	sbc.w	r1, r1, r5
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	018b      	lsls	r3, r1, #6
 8003bca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bce:	0182      	lsls	r2, r0, #6
 8003bd0:	1a12      	subs	r2, r2, r0
 8003bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	00d9      	lsls	r1, r3, #3
 8003be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be4:	00d0      	lsls	r0, r2, #3
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	1912      	adds	r2, r2, r4
 8003bec:	eb45 0303 	adc.w	r3, r5, r3
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	0299      	lsls	r1, r3, #10
 8003bfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bfe:	0290      	lsls	r0, r2, #10
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f7fc fada 	bl	80001c8 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	3301      	adds	r3, #1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	60bb      	str	r3, [r7, #8]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c3a:	60bb      	str	r3, [r7, #8]
      break;
 8003c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	00f42400 	.word	0x00f42400
 8003c54:	007a1200 	.word	0x007a1200

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000000 	.word	0x20000000

08003c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c74:	f7ff fff0 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	080076d4 	.word	0x080076d4

08003c98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d035      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cc0:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc6:	f7fd f927 	bl	8000f18 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cce:	f7fd f923 	bl	8000f18 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e0b0      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce0:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	019a      	lsls	r2, r3, #6
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	071b      	lsls	r3, r3, #28
 8003cf8:	4955      	ldr	r1, [pc, #340]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d00:	4b52      	ldr	r3, [pc, #328]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d06:	f7fd f907 	bl	8000f18 <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d0e:	f7fd f903 	bl	8000f18 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e090      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d20:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8083 	beq.w	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3e      	ldr	r2, [pc, #248]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d62:	f7fd f8d9 	bl	8000f18 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd f8d5 	bl	8000f18 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e062      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02f      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d028      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d114      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fd f8a3 	bl	8000f18 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd f89f 	bl	8000f18 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e02a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	490d      	ldr	r1, [pc, #52]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e2c:	6093      	str	r3, [r2, #8]
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	4905      	ldr	r1, [pc, #20]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	42470068 	.word	0x42470068
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42470e40 	.word	0x42470e40

08003e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d13e      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d12f      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e92:	617b      	str	r3, [r7, #20]
          break;
 8003e94:	e02f      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003eb6:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee0:	0f1b      	lsrs	r3, r3, #28
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
          break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
          break;
 8003ef4:	bf00      	nop
        }
      }
      break;
 8003ef6:	bf00      	nop
    }
  }
  return frequency;
 8003ef8:	697b      	ldr	r3, [r7, #20]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	00bb8000 	.word	0x00bb8000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07b      	b.n	8004022 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3a:	d009      	beq.n	8003f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
 8003f42:	e005      	b.n	8003f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc feb6 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	ea42 0103 	orr.w	r1, r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0104 	and.w	r1, r3, #4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0210 	and.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800402a:	b084      	sub	sp, #16
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	f107 001c 	add.w	r0, r7, #28
 8004038:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2b01      	cmp	r3, #1
 8004040:	d122      	bne.n	8004088 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800406a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fb1b 	bl	80056b8 <USB_CoreReset>
 8004082:	4603      	mov	r3, r0
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	e01a      	b.n	80040be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fb0f 	bl	80056b8 <USB_CoreReset>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800409e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
 80040b0:	e005      	b.n	80040be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10b      	bne.n	80040dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f043 0206 	orr.w	r2, r3, #6
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040e8:	b004      	add	sp, #16
 80040ea:	4770      	bx	lr

080040ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d165      	bne.n	80041cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4a41      	ldr	r2, [pc, #260]	; (8004208 <USB_SetTurnaroundTime+0x11c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d906      	bls.n	8004116 <USB_SetTurnaroundTime+0x2a>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4a40      	ldr	r2, [pc, #256]	; (800420c <USB_SetTurnaroundTime+0x120>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d202      	bcs.n	8004116 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004110:	230f      	movs	r3, #15
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	e062      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4a3c      	ldr	r2, [pc, #240]	; (800420c <USB_SetTurnaroundTime+0x120>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d306      	bcc.n	800412c <USB_SetTurnaroundTime+0x40>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4a3b      	ldr	r2, [pc, #236]	; (8004210 <USB_SetTurnaroundTime+0x124>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d202      	bcs.n	800412c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004126:	230e      	movs	r3, #14
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e057      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a38      	ldr	r2, [pc, #224]	; (8004210 <USB_SetTurnaroundTime+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d306      	bcc.n	8004142 <USB_SetTurnaroundTime+0x56>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a37      	ldr	r2, [pc, #220]	; (8004214 <USB_SetTurnaroundTime+0x128>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d202      	bcs.n	8004142 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800413c:	230d      	movs	r3, #13
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e04c      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4a33      	ldr	r2, [pc, #204]	; (8004214 <USB_SetTurnaroundTime+0x128>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d306      	bcc.n	8004158 <USB_SetTurnaroundTime+0x6c>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4a32      	ldr	r2, [pc, #200]	; (8004218 <USB_SetTurnaroundTime+0x12c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d802      	bhi.n	8004158 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004152:	230c      	movs	r3, #12
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e041      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <USB_SetTurnaroundTime+0x12c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d906      	bls.n	800416e <USB_SetTurnaroundTime+0x82>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a2e      	ldr	r2, [pc, #184]	; (800421c <USB_SetTurnaroundTime+0x130>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d802      	bhi.n	800416e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004168:	230b      	movs	r3, #11
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e036      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <USB_SetTurnaroundTime+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d906      	bls.n	8004184 <USB_SetTurnaroundTime+0x98>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <USB_SetTurnaroundTime+0x134>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d802      	bhi.n	8004184 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800417e:	230a      	movs	r3, #10
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e02b      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <USB_SetTurnaroundTime+0x134>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d906      	bls.n	800419a <USB_SetTurnaroundTime+0xae>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a25      	ldr	r2, [pc, #148]	; (8004224 <USB_SetTurnaroundTime+0x138>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d202      	bcs.n	800419a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004194:	2309      	movs	r3, #9
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e020      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <USB_SetTurnaroundTime+0x138>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d306      	bcc.n	80041b0 <USB_SetTurnaroundTime+0xc4>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a20      	ldr	r2, [pc, #128]	; (8004228 <USB_SetTurnaroundTime+0x13c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041aa:	2308      	movs	r3, #8
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e015      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <USB_SetTurnaroundTime+0x13c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d906      	bls.n	80041c6 <USB_SetTurnaroundTime+0xda>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a1c      	ldr	r2, [pc, #112]	; (800422c <USB_SetTurnaroundTime+0x140>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d202      	bcs.n	80041c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041c0:	2307      	movs	r3, #7
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e00a      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041c6:	2306      	movs	r3, #6
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e007      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041d2:	2309      	movs	r3, #9
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e001      	b.n	80041dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041d8:	2309      	movs	r3, #9
 80041da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	00d8acbf 	.word	0x00d8acbf
 800420c:	00e4e1c0 	.word	0x00e4e1c0
 8004210:	00f42400 	.word	0x00f42400
 8004214:	01067380 	.word	0x01067380
 8004218:	011a499f 	.word	0x011a499f
 800421c:	01312cff 	.word	0x01312cff
 8004220:	014ca43f 	.word	0x014ca43f
 8004224:	016e3600 	.word	0x016e3600
 8004228:	01a6ab1f 	.word	0x01a6ab1f
 800422c:	01e84800 	.word	0x01e84800

08004230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d115      	bne.n	80042c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042a2:	2001      	movs	r0, #1
 80042a4:	f7fc fe44 	bl	8000f30 <HAL_Delay>
      ms++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f001 f972 	bl	8005598 <USB_GetMode>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d01e      	beq.n	80042f8 <USB_SetCurrentMode+0x84>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b31      	cmp	r3, #49	; 0x31
 80042be:	d9f0      	bls.n	80042a2 <USB_SetCurrentMode+0x2e>
 80042c0:	e01a      	b.n	80042f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d115      	bne.n	80042f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7fc fe2b 	bl	8000f30 <HAL_Delay>
      ms++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 f959 	bl	8005598 <USB_GetMode>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <USB_SetCurrentMode+0x84>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b31      	cmp	r3, #49	; 0x31
 80042f0:	d9f0      	bls.n	80042d4 <USB_SetCurrentMode+0x60>
 80042f2:	e001      	b.n	80042f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e005      	b.n	8004304 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b32      	cmp	r3, #50	; 0x32
 80042fc:	d101      	bne.n	8004302 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800430c:	b084      	sub	sp, #16
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800431a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e009      	b.n	8004340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3340      	adds	r3, #64	; 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3301      	adds	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0e      	cmp	r3, #14
 8004344:	d9f2      	bls.n	800432c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11c      	bne.n	8004386 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f043 0302 	orr.w	r3, r3, #2
 800435e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
 8004384:	e00b      	b.n	800439e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b0:	4619      	mov	r1, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	461a      	mov	r2, r3
 80043ba:	680b      	ldr	r3, [r1, #0]
 80043bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043ca:	2100      	movs	r1, #0
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f945 	bl	800465c <USB_SetDevSpeed>
 80043d2:	e008      	b.n	80043e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043d4:	2101      	movs	r1, #1
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f940 	bl	800465c <USB_SetDevSpeed>
 80043dc:	e003      	b.n	80043e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043de:	2103      	movs	r1, #3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f93b 	bl	800465c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043e6:	2110      	movs	r1, #16
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8f3 	bl	80045d4 <USB_FlushTxFifo>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f90f 	bl	800461c <USB_FlushRxFifo>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	461a      	mov	r2, r3
 8004410:	2300      	movs	r3, #0
 8004412:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e043      	b.n	80044ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004448:	d118      	bne.n	800447c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e013      	b.n	800448e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	461a      	mov	r2, r3
 8004474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e008      	b.n	800448e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004488:	461a      	mov	r2, r3
 800448a:	2300      	movs	r3, #0
 800448c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	461a      	mov	r2, r3
 800449c:	2300      	movs	r3, #0
 800449e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3301      	adds	r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3b7      	bcc.n	8004432 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e043      	b.n	8004550 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044de:	d118      	bne.n	8004512 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e013      	b.n	8004524 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	461a      	mov	r2, r3
 800450a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e008      	b.n	8004524 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d3b7      	bcc.n	80044c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004578:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f043 0210 	orr.w	r2, r3, #16
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <USB_DevInit+0x2c4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f043 0208 	orr.w	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045cc:	b004      	add	sp, #16
 80045ce:	4770      	bx	lr
 80045d0:	803c3800 	.word	0x803c3800

080045d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	019b      	lsls	r3, r3, #6
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <USB_FlushTxFifo+0x44>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d0f1      	beq.n	80045ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	00030d40 	.word	0x00030d40

0800461c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2210      	movs	r2, #16
 800462c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <USB_FlushRxFifo+0x3c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e006      	b.n	800464c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d0f1      	beq.n	800462e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	00030d40 	.word	0x00030d40

0800465c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]
 80046b2:	e00a      	b.n	80046ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d002      	beq.n	80046c0 <USB_GetDevSpeed+0x32>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d102      	bne.n	80046c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046c0:	2302      	movs	r3, #2
 80046c2:	75fb      	strb	r3, [r7, #23]
 80046c4:	e001      	b.n	80046ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046c6:	230f      	movs	r3, #15
 80046c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d13a      	bne.n	800476a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	b29b      	uxth	r3, r3
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004712:	4313      	orrs	r3, r2
 8004714:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d155      	bne.n	80047d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	78db      	ldrb	r3, [r3, #3]
 8004746:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004748:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	059b      	lsls	r3, r3, #22
 800474e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004750:	4313      	orrs	r3, r2
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e036      	b.n	80047d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004788:	4313      	orrs	r3, r2
 800478a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11a      	bne.n	80047d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047be:	430b      	orrs	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d161      	bne.n	80048c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481a:	d11f      	bne.n	800485c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800485a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a0:	4013      	ands	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0159      	lsls	r1, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	4619      	mov	r1, r3
 80048c0:	4b35      	ldr	r3, [pc, #212]	; (8004998 <USB_DeactivateEndpoint+0x1b0>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
 80048c6:	e060      	b.n	800498a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048de:	d11f      	bne.n	8004920 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800491e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	43db      	mvns	r3, r3
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004940:	4013      	ands	r3, r2
 8004942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	43db      	mvns	r3, r3
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004964:	4013      	ands	r3, r2
 8004966:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0159      	lsls	r1, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	440b      	add	r3, r1
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	4619      	mov	r1, r3
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <USB_DeactivateEndpoint+0x1b4>)
 8004986:	4013      	ands	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	ec337800 	.word	0xec337800
 800499c:	eff37800 	.word	0xeff37800

080049a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 815c 	bne.w	8004c7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d132      	bne.n	8004a30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	0cdb      	lsrs	r3, r3, #19
 8004a2a:	04db      	lsls	r3, r3, #19
 8004a2c:	6113      	str	r3, [r2, #16]
 8004a2e:	e074      	b.n	8004b1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4a:	0cdb      	lsrs	r3, r3, #19
 8004a4c:	04db      	lsls	r3, r3, #19
 8004a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6959      	ldr	r1, [r3, #20]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	440b      	add	r3, r1
 8004a8c:	1e59      	subs	r1, r3, #1
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a98:	4b9d      	ldr	r3, [pc, #628]	; (8004d10 <USB_EPStartXfer+0x370>)
 8004a9a:	400b      	ands	r3, r1
 8004a9c:	69b9      	ldr	r1, [r7, #24]
 8004a9e:	0148      	lsls	r0, r1, #5
 8004aa0:	69f9      	ldr	r1, [r7, #28]
 8004aa2:	4401      	add	r1, r0
 8004aa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	0148      	lsls	r0, r1, #5
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	4401      	add	r1, r0
 8004aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	78db      	ldrb	r3, [r3, #3]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d11f      	bne.n	8004b1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004af8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d14b      	bne.n	8004bb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d128      	bne.n	8004b96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d110      	bne.n	8004b76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e00f      	b.n	8004b96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e12f      	b.n	8004e18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	78db      	ldrb	r3, [r3, #3]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d015      	beq.n	8004c0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8117 	beq.w	8004e18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	69f9      	ldr	r1, [r7, #28]
 8004c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c06:	4313      	orrs	r3, r2
 8004c08:	634b      	str	r3, [r1, #52]	; 0x34
 8004c0a:	e105      	b.n	8004e18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d110      	bne.n	8004c3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e00f      	b.n	8004c5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68d9      	ldr	r1, [r3, #12]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	b298      	uxth	r0, r3
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4603      	mov	r3, r0
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa2b 	bl	80050ce <USB_WritePacket>
 8004c78:	e0ce      	b.n	8004e18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	0cdb      	lsrs	r3, r3, #19
 8004c96:	04db      	lsls	r3, r3, #19
 8004c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d126      	bne.n	8004d14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	0148      	lsls	r0, r1, #5
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d0a:	6113      	str	r3, [r2, #16]
 8004d0c:	e036      	b.n	8004d7c <USB_EPStartXfer+0x3dc>
 8004d0e:	bf00      	nop
 8004d10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	04d9      	lsls	r1, r3, #19
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <USB_EPStartXfer+0x484>)
 8004d3e:	400b      	ands	r3, r1
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	0148      	lsls	r0, r1, #5
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	4401      	add	r1, r0
 8004d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	8af9      	ldrh	r1, [r7, #22]
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	0148      	lsls	r0, r1, #5
 8004d70:	69f9      	ldr	r1, [r7, #28]
 8004d72:	4401      	add	r1, r0
 8004d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10d      	bne.n	8004d9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	68d9      	ldr	r1, [r3, #12]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d128      	bne.n	8004df8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d110      	bne.n	8004dd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00f      	b.n	8004df8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	1ff80000 	.word	0x1ff80000

08004e28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 80cd 	bne.w	8004fe4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d132      	bne.n	8004eb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	0cdb      	lsrs	r3, r3, #19
 8004eb2:	04db      	lsls	r3, r3, #19
 8004eb4:	6113      	str	r3, [r2, #16]
 8004eb6:	e04e      	b.n	8004f56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	0cdb      	lsrs	r3, r3, #19
 8004ed4:	04db      	lsls	r3, r3, #19
 8004ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ef6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004efa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d903      	bls.n	8004f10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f46:	6939      	ldr	r1, [r7, #16]
 8004f48:	0148      	lsls	r0, r1, #5
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	4401      	add	r1, r0
 8004f4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d11e      	bne.n	8004f9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e092      	b.n	80050c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d07e      	beq.n	80050c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	634b      	str	r3, [r1, #52]	; 0x34
 8004fe2:	e06d      	b.n	80050c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffe:	0cdb      	lsrs	r3, r3, #19
 8005000:	04db      	lsls	r3, r3, #19
 8005002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005026:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	6939      	ldr	r1, [r7, #16]
 8005070:	0148      	lsls	r0, r1, #5
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	4401      	add	r1, r0
 8005076:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800507a:	4313      	orrs	r3, r2
 800507c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10d      	bne.n	80050a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	68d9      	ldr	r1, [r3, #12]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	460a      	mov	r2, r1
 800509e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b089      	sub	sp, #36	; 0x24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	4611      	mov	r1, r2
 80050da:	461a      	mov	r2, r3
 80050dc:	460b      	mov	r3, r1
 80050de:	71fb      	strb	r3, [r7, #7]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d123      	bne.n	800513c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050f4:	88bb      	ldrh	r3, [r7, #4]
 80050f6:	3303      	adds	r3, #3
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e018      	b.n	8005134 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	031a      	lsls	r2, r3, #12
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	4413      	add	r3, r2
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	461a      	mov	r2, r3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	3301      	adds	r3, #1
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d3e2      	bcc.n	8005102 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3724      	adds	r7, #36	; 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800514a:	b480      	push	{r7}
 800514c:	b08b      	sub	sp, #44	; 0x2c
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	4613      	mov	r3, r2
 8005156:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	b29b      	uxth	r3, r3
 8005166:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	e014      	b.n	80051a0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	601a      	str	r2, [r3, #0]
    pDest++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	3301      	adds	r3, #1
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3e6      	bcc.n	8005176 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051a8:	8bfb      	ldrh	r3, [r7, #30]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01e      	beq.n	80051ec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	461a      	mov	r2, r3
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	701a      	strb	r2, [r3, #0]
      i++;
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	3301      	adds	r3, #1
 80051d8:	623b      	str	r3, [r7, #32]
      pDest++;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051e0:	8bfb      	ldrh	r3, [r7, #30]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051e6:	8bfb      	ldrh	r3, [r7, #30]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ea      	bne.n	80051c2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	372c      	adds	r7, #44	; 0x2c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d12c      	bne.n	8005270 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	db12      	blt.n	800524e <USB_EPSetStall+0x54>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00f      	beq.n	800524e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800524c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e02b      	b.n	80052c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	db12      	blt.n	80052a8 <USB_EPSetStall+0xae>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00f      	beq.n	80052a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d128      	bne.n	8005344 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	78db      	ldrb	r3, [r3, #3]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d003      	beq.n	8005322 <USB_EPClearStall+0x4c>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	78db      	ldrb	r3, [r3, #3]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d138      	bne.n	8005394 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e027      	b.n	8005394 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005362:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	78db      	ldrb	r3, [r3, #3]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d003      	beq.n	8005374 <USB_EPClearStall+0x9e>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	78db      	ldrb	r3, [r3, #3]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d10f      	bne.n	8005394 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005392:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541c:	f023 0302 	bic.w	r3, r3, #2
 8005420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800545e:	f043 0302 	orr.w	r3, r3, #2
 8005462:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	0c1b      	lsrs	r3, r3, #16
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	b29b      	uxth	r3, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800552e:	68bb      	ldr	r3, [r7, #8]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	01db      	lsls	r3, r3, #7
 800556e:	b2db      	uxtb	r3, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4013      	ands	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800558a:	68bb      	ldr	r3, [r7, #8]
}
 800558c:	4618      	mov	r0, r3
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0301 	and.w	r3, r3, #1
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	460b      	mov	r3, r1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	333c      	adds	r3, #60	; 0x3c
 8005612:	3304      	adds	r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <USB_EP0_OutStart+0xb8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d90a      	bls.n	8005636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005630:	d101      	bne.n	8005636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e037      	b.n	80056a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005664:	f043 0318 	orr.w	r3, r3, #24
 8005668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005678:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800567c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10f      	bne.n	80056a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	4f54300a 	.word	0x4f54300a

080056b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <USB_CoreReset+0x60>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e01a      	b.n	800570a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	daf3      	bge.n	80056c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f043 0201 	orr.w	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <USB_CoreReset+0x60>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e006      	b.n	800570a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b01      	cmp	r3, #1
 8005706:	d0f1      	beq.n	80056ec <USB_CoreReset+0x34>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	00030d40 	.word	0x00030d40

0800571c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005728:	2010      	movs	r0, #16
 800572a:	f001 ff2b 	bl	8007584 <USBD_static_malloc>
 800572e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800573e:	2302      	movs	r3, #2
 8005740:	e01b      	b.n	800577a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7c1b      	ldrb	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2207      	movs	r2, #7
 8005756:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005758:	e002      	b.n	8005760 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	220a      	movs	r2, #10
 800575e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005760:	2304      	movs	r3, #4
 8005762:	2203      	movs	r2, #3
 8005764:	2181      	movs	r1, #129	; 0x81
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fdfb 	bl	8007362 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800578e:	2181      	movs	r1, #129	; 0x81
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fe0c 	bl	80073ae <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fef4 	bl	80075a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057dc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0e8      	b.n	80059c2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d046      	beq.n	800588a <USBD_HID_Setup+0xbe>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f040 80d8 	bne.w	80059b2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	3b02      	subs	r3, #2
 8005808:	2b09      	cmp	r3, #9
 800580a:	d836      	bhi.n	800587a <USBD_HID_Setup+0xae>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <USBD_HID_Setup+0x48>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	0800586b 	.word	0x0800586b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800587b 	.word	0x0800587b
 8005820:	0800587b 	.word	0x0800587b
 8005824:	0800587b 	.word	0x0800587b
 8005828:	0800587b 	.word	0x0800587b
 800582c:	0800587b 	.word	0x0800587b
 8005830:	0800587b 	.word	0x0800587b
 8005834:	08005859 	.word	0x08005859
 8005838:	0800583d 	.word	0x0800583d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	885b      	ldrh	r3, [r3, #2]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]
          break;
 8005848:	e01e      	b.n	8005888 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fa22 	bl	8006c9a <USBD_CtlSendData>
          break;
 8005856:	e017      	b.n	8005888 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	885b      	ldrh	r3, [r3, #2]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	b29b      	uxth	r3, r3
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
          break;
 8005868:	e00e      	b.n	8005888 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	2201      	movs	r2, #1
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fa11 	bl	8006c9a <USBD_CtlSendData>
          break;
 8005878:	e006      	b.n	8005888 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 f99b 	bl	8006bb8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005882:	2303      	movs	r3, #3
 8005884:	75fb      	strb	r3, [r7, #23]
          break;
 8005886:	bf00      	nop
      }
      break;
 8005888:	e09a      	b.n	80059c0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b0b      	cmp	r3, #11
 8005890:	f200 8086 	bhi.w	80059a0 <USBD_HID_Setup+0x1d4>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USBD_HID_Setup+0xd0>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058cd 	.word	0x080058cd
 80058a0:	080059af 	.word	0x080059af
 80058a4:	080059a1 	.word	0x080059a1
 80058a8:	080059a1 	.word	0x080059a1
 80058ac:	080059a1 	.word	0x080059a1
 80058b0:	080059a1 	.word	0x080059a1
 80058b4:	080058f7 	.word	0x080058f7
 80058b8:	080059a1 	.word	0x080059a1
 80058bc:	080059a1 	.word	0x080059a1
 80058c0:	080059a1 	.word	0x080059a1
 80058c4:	0800594f 	.word	0x0800594f
 80058c8:	08005979 	.word	0x08005979
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d107      	bne.n	80058e8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058d8:	f107 030a 	add.w	r3, r7, #10
 80058dc:	2202      	movs	r2, #2
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f9da 	bl	8006c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058e6:	e063      	b.n	80059b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 f964 	bl	8006bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	75fb      	strb	r3, [r7, #23]
          break;
 80058f4:	e05c      	b.n	80059b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	885b      	ldrh	r3, [r3, #2]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b22      	cmp	r3, #34	; 0x22
 8005900:	d108      	bne.n	8005914 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	88db      	ldrh	r3, [r3, #6]
 8005906:	2b65      	cmp	r3, #101	; 0x65
 8005908:	bf28      	it	cs
 800590a:	2365      	movcs	r3, #101	; 0x65
 800590c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800590e:	4b2f      	ldr	r3, [pc, #188]	; (80059cc <USBD_HID_Setup+0x200>)
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	e015      	b.n	8005940 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	885b      	ldrh	r3, [r3, #2]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b21      	cmp	r3, #33	; 0x21
 800591e:	d108      	bne.n	8005932 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005920:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <USBD_HID_Setup+0x204>)
 8005922:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	88db      	ldrh	r3, [r3, #6]
 8005928:	2b09      	cmp	r3, #9
 800592a:	bf28      	it	cs
 800592c:	2309      	movcs	r3, #9
 800592e:	82bb      	strh	r3, [r7, #20]
 8005930:	e006      	b.n	8005940 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 f93f 	bl	8006bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800593a:	2303      	movs	r3, #3
 800593c:	75fb      	strb	r3, [r7, #23]
            break;
 800593e:	e037      	b.n	80059b0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005940:	8abb      	ldrh	r3, [r7, #20]
 8005942:	461a      	mov	r2, r3
 8005944:	6939      	ldr	r1, [r7, #16]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 f9a7 	bl	8006c9a <USBD_CtlSendData>
          break;
 800594c:	e030      	b.n	80059b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d107      	bne.n	800596a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3308      	adds	r3, #8
 800595e:	2201      	movs	r2, #1
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f999 	bl	8006c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005968:	e022      	b.n	80059b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f923 	bl	8006bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005972:	2303      	movs	r3, #3
 8005974:	75fb      	strb	r3, [r7, #23]
          break;
 8005976:	e01b      	b.n	80059b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b03      	cmp	r3, #3
 8005982:	d106      	bne.n	8005992 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	885b      	ldrh	r3, [r3, #2]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005990:	e00e      	b.n	80059b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 f90f 	bl	8006bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800599a:	2303      	movs	r3, #3
 800599c:	75fb      	strb	r3, [r7, #23]
          break;
 800599e:	e007      	b.n	80059b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f908 	bl	8006bb8 <USBD_CtlError>
          ret = USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	75fb      	strb	r3, [r7, #23]
          break;
 80059ac:	e000      	b.n	80059b0 <USBD_HID_Setup+0x1e4>
          break;
 80059ae:	bf00      	nop
      }
      break;
 80059b0:	e006      	b.n	80059c0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f8ff 	bl	8006bb8 <USBD_CtlError>
      ret = USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	75fb      	strb	r3, [r7, #23]
      break;
 80059be:	bf00      	nop
  }

  return (uint8_t)ret;
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200000c8 	.word	0x200000c8
 80059d0:	200000b0 	.word	0x200000b0

080059d4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e013      	b.n	8005a1c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d10c      	bne.n	8005a1a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	7b1b      	ldrb	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d108      	bne.n	8005a1a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	2181      	movs	r1, #129	; 0x81
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f001 fd72 	bl	80074fe <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2222      	movs	r2, #34	; 0x22
 8005a30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005a32:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	20000044 	.word	0x20000044

08005a44 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2222      	movs	r2, #34	; 0x22
 8005a50:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000068 	.word	0x20000068

08005a64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2222      	movs	r2, #34	; 0x22
 8005a70:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005a72:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	2000008c 	.word	0x2000008c

08005a84 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a96:	2200      	movs	r2, #0
 8005a98:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	200000bc 	.word	0x200000bc

08005ac8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e01f      	b.n	8005b20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	79fa      	ldrb	r2, [r7, #7]
 8005b12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f001 fbbd 	bl	8007294 <USBD_LL_Init>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e016      	b.n	8005b6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f107 020e 	add.w	r2, r7, #14
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 fbd4 	bl	800732c <USBD_LL_Start>
 8005b84:	4603      	mov	r3, r0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	4611      	mov	r1, r2
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	4798      	blx	r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
  }

  return USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 ff90 	bl	8006b44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d01a      	beq.n	8005c7e <USBD_LL_SetupStage+0x72>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d822      	bhi.n	8005c92 <USBD_LL_SetupStage+0x86>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <USBD_LL_SetupStage+0x4a>
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d00a      	beq.n	8005c6a <USBD_LL_SetupStage+0x5e>
 8005c54:	e01d      	b.n	8005c92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa62 	bl	8006128 <USBD_StdDevReq>
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
      break;
 8005c68:	e020      	b.n	8005cac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fac6 	bl	8006204 <USBD_StdItfReq>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e016      	b.n	8005cac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb05 	bl	8006296 <USBD_StdEPReq>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e00c      	b.n	8005cac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fba3 	bl	80073ec <USBD_LL_StallEP>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8005caa:	bf00      	nop
  }

  return ret;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d138      	bne.n	8005d3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005cd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d14a      	bne.n	8005d72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d913      	bls.n	8005d10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bf28      	it	cs
 8005d02:	4613      	movcs	r3, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fff2 	bl	8006cf2 <USBD_CtlContinueRx>
 8005d0e:	e030      	b.n	8005d72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d10b      	bne.n	8005d34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 ffed 	bl	8006d14 <USBD_CtlSendStatus>
 8005d3a:	e01a      	b.n	8005d72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d114      	bne.n	8005d72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	7afa      	ldrb	r2, [r7, #11]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	4798      	blx	r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	e000      	b.n	8005d74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	460b      	mov	r3, r1
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d8a:	7afb      	ldrb	r3, [r7, #11]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d16b      	bne.n	8005e68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3314      	adds	r3, #20
 8005d94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d156      	bne.n	8005e4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d914      	bls.n	8005dd6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 ff84 	bl	8006cd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f001 fbb6 	bl	8007540 <USBD_LL_PrepareReceive>
 8005dd4:	e03b      	b.n	8005e4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d11c      	bne.n	8005e1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d316      	bcc.n	8005e1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d20f      	bcs.n	8005e1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 ff65 	bl	8006cd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f001 fb93 	bl	8007540 <USBD_LL_PrepareReceive>
 8005e1a:	e018      	b.n	8005e4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d10b      	bne.n	8005e40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f001 fad2 	bl	80073ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 ff76 	bl	8006d3a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d122      	bne.n	8005e9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fe98 	bl	8005b8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e66:	e01a      	b.n	8005e9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d114      	bne.n	8005e9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	7afa      	ldrb	r2, [r7, #11]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	4798      	blx	r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	e000      	b.n	8005ea0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e02f      	b.n	8005f3c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6852      	ldr	r2, [r2, #4]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	4611      	mov	r1, r2
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fa28 	bl	8007362 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2240      	movs	r2, #64	; 0x40
 8005f1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fa1a 	bl	8007362 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2240      	movs	r2, #64	; 0x40
 8005f38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d106      	bne.n	8005fb2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d10b      	bne.n	8005ffa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800601a:	2303      	movs	r3, #3
 800601c:	e014      	b.n	8006048 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d10d      	bne.n	8006046 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	4611      	mov	r1, r2
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	e014      	b.n	8006094 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b03      	cmp	r3, #3
 8006074:	d10d      	bne.n	8006092 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	4611      	mov	r1, r2
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6852      	ldr	r2, [r2, #4]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	4611      	mov	r1, r2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3301      	adds	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006108:	8a3b      	ldrh	r3, [r7, #16]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	b21a      	sxth	r2, r3
 800610e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006112:	4313      	orrs	r3, r2
 8006114:	b21b      	sxth	r3, r3
 8006116:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006118:	89fb      	ldrh	r3, [r7, #14]
}
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d005      	beq.n	800614e <USBD_StdDevReq+0x26>
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d853      	bhi.n	80061ee <USBD_StdDevReq+0xc6>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <USBD_StdDevReq+0x3a>
 800614a:	2b20      	cmp	r3, #32
 800614c:	d14f      	bne.n	80061ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
      break;
 8006160:	e04a      	b.n	80061f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b09      	cmp	r3, #9
 8006168:	d83b      	bhi.n	80061e2 <USBD_StdDevReq+0xba>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USBD_StdDevReq+0x48>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061c5 	.word	0x080061c5
 8006174:	080061d9 	.word	0x080061d9
 8006178:	080061e3 	.word	0x080061e3
 800617c:	080061cf 	.word	0x080061cf
 8006180:	080061e3 	.word	0x080061e3
 8006184:	080061a3 	.word	0x080061a3
 8006188:	08006199 	.word	0x08006199
 800618c:	080061e3 	.word	0x080061e3
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061ad 	.word	0x080061ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9de 	bl	800655c <USBD_GetDescriptor>
          break;
 80061a0:	e024      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb43 	bl	8006830 <USBD_SetAddress>
          break;
 80061aa:	e01f      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb82 	bl	80068b8 <USBD_SetConfig>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
          break;
 80061b8:	e018      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fc21 	bl	8006a04 <USBD_GetConfig>
          break;
 80061c2:	e013      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fc52 	bl	8006a70 <USBD_GetStatus>
          break;
 80061cc:	e00e      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc81 	bl	8006ad8 <USBD_SetFeature>
          break;
 80061d6:	e009      	b.n	80061ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fc90 	bl	8006b00 <USBD_ClrFeature>
          break;
 80061e0:	e004      	b.n	80061ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fce7 	bl	8006bb8 <USBD_CtlError>
          break;
 80061ea:	bf00      	nop
      }
      break;
 80061ec:	e004      	b.n	80061f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fce1 	bl	8006bb8 <USBD_CtlError>
      break;
 80061f6:	bf00      	nop
  }

  return ret;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop

08006204 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800621a:	2b40      	cmp	r3, #64	; 0x40
 800621c:	d005      	beq.n	800622a <USBD_StdItfReq+0x26>
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d82f      	bhi.n	8006282 <USBD_StdItfReq+0x7e>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <USBD_StdItfReq+0x26>
 8006226:	2b20      	cmp	r3, #32
 8006228:	d12b      	bne.n	8006282 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006230:	b2db      	uxtb	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	2b02      	cmp	r3, #2
 8006236:	d81d      	bhi.n	8006274 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	889b      	ldrh	r3, [r3, #4]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d813      	bhi.n	800626a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	88db      	ldrh	r3, [r3, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d110      	bne.n	800627e <USBD_StdItfReq+0x7a>
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fd56 	bl	8006d14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006268:	e009      	b.n	800627e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fca3 	bl	8006bb8 <USBD_CtlError>
          break;
 8006272:	e004      	b.n	800627e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fc9e 	bl	8006bb8 <USBD_CtlError>
          break;
 800627c:	e000      	b.n	8006280 <USBD_StdItfReq+0x7c>
          break;
 800627e:	bf00      	nop
      }
      break;
 8006280:	e004      	b.n	800628c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc97 	bl	8006bb8 <USBD_CtlError>
      break;
 800628a:	bf00      	nop
  }

  return ret;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	889b      	ldrh	r3, [r3, #4]
 80062a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d007      	beq.n	80062c6 <USBD_StdEPReq+0x30>
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	f200 8145 	bhi.w	8006546 <USBD_StdEPReq+0x2b0>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <USBD_StdEPReq+0x44>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	f040 8140 	bne.w	8006546 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	e13a      	b.n	8006550 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d007      	beq.n	80062f2 <USBD_StdEPReq+0x5c>
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	f300 8129 	bgt.w	800653a <USBD_StdEPReq+0x2a4>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d07f      	beq.n	80063ec <USBD_StdEPReq+0x156>
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d03c      	beq.n	800636a <USBD_StdEPReq+0xd4>
 80062f0:	e123      	b.n	800653a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d002      	beq.n	8006304 <USBD_StdEPReq+0x6e>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d016      	beq.n	8006330 <USBD_StdEPReq+0x9a>
 8006302:	e02c      	b.n	800635e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <USBD_StdEPReq+0x90>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d00a      	beq.n	8006326 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f869 	bl	80073ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f865 	bl	80073ec <USBD_LL_StallEP>
 8006322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006324:	e020      	b.n	8006368 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc45 	bl	8006bb8 <USBD_CtlError>
              break;
 800632e:	e01b      	b.n	8006368 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10e      	bne.n	8006356 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <USBD_StdEPReq+0xc0>
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d008      	beq.n	8006356 <USBD_StdEPReq+0xc0>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	88db      	ldrh	r3, [r3, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f84b 	bl	80073ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fcdc 	bl	8006d14 <USBD_CtlSendStatus>

              break;
 800635c:	e004      	b.n	8006368 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc29 	bl	8006bb8 <USBD_CtlError>
              break;
 8006366:	bf00      	nop
          }
          break;
 8006368:	e0ec      	b.n	8006544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d002      	beq.n	800637c <USBD_StdEPReq+0xe6>
 8006376:	2b03      	cmp	r3, #3
 8006378:	d016      	beq.n	80063a8 <USBD_StdEPReq+0x112>
 800637a:	e030      	b.n	80063de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <USBD_StdEPReq+0x108>
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d00a      	beq.n	800639e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f82d 	bl	80073ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f829 	bl	80073ec <USBD_LL_StallEP>
 800639a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800639c:	e025      	b.n	80063ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fc09 	bl	8006bb8 <USBD_CtlError>
              break;
 80063a6:	e020      	b.n	80063ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	885b      	ldrh	r3, [r3, #2]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d11b      	bne.n	80063e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f833 	bl	800742a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fca5 	bl	8006d14 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80063dc:	e004      	b.n	80063e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fbe9 	bl	8006bb8 <USBD_CtlError>
              break;
 80063e6:	e000      	b.n	80063ea <USBD_StdEPReq+0x154>
              break;
 80063e8:	bf00      	nop
          }
          break;
 80063ea:	e0ab      	b.n	8006544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d002      	beq.n	80063fe <USBD_StdEPReq+0x168>
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d032      	beq.n	8006462 <USBD_StdEPReq+0x1cc>
 80063fc:	e097      	b.n	800652e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <USBD_StdEPReq+0x17e>
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d004      	beq.n	8006414 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fbd3 	bl	8006bb8 <USBD_CtlError>
                break;
 8006412:	e091      	b.n	8006538 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006418:	2b00      	cmp	r3, #0
 800641a:	da0b      	bge.n	8006434 <USBD_StdEPReq+0x19e>
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	3310      	adds	r3, #16
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	3304      	adds	r3, #4
 8006432:	e00b      	b.n	800644c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	3304      	adds	r3, #4
 800644c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2202      	movs	r2, #2
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fc1d 	bl	8006c9a <USBD_CtlSendData>
              break;
 8006460:	e06a      	b.n	8006538 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da11      	bge.n	800648e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3324      	adds	r3, #36	; 0x24
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d117      	bne.n	80064b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb96 	bl	8006bb8 <USBD_CtlError>
                  break;
 800648c:	e054      	b.n	8006538 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fb83 	bl	8006bb8 <USBD_CtlError>
                  break;
 80064b2:	e041      	b.n	8006538 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	da0b      	bge.n	80064d4 <USBD_StdEPReq+0x23e>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3310      	adds	r3, #16
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	3304      	adds	r3, #4
 80064d2:	e00b      	b.n	80064ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4413      	add	r3, r2
 80064ea:	3304      	adds	r3, #4
 80064ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <USBD_StdEPReq+0x264>
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d103      	bne.n	8006502 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e00e      	b.n	8006520 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 ffae 	bl	8007468 <USBD_LL_IsStallEP>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e002      	b.n	8006520 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2202      	movs	r2, #2
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fbb7 	bl	8006c9a <USBD_CtlSendData>
              break;
 800652c:	e004      	b.n	8006538 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb41 	bl	8006bb8 <USBD_CtlError>
              break;
 8006536:	bf00      	nop
          }
          break;
 8006538:	e004      	b.n	8006544 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb3b 	bl	8006bb8 <USBD_CtlError>
          break;
 8006542:	bf00      	nop
      }
      break;
 8006544:	e004      	b.n	8006550 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb35 	bl	8006bb8 <USBD_CtlError>
      break;
 800654e:	bf00      	nop
  }

  return ret;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	2b06      	cmp	r3, #6
 800657e:	f200 8128 	bhi.w	80067d2 <USBD_GetDescriptor+0x276>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <USBD_GetDescriptor+0x2c>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065a5 	.word	0x080065a5
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065fd 	.word	0x080065fd
 8006594:	080067d3 	.word	0x080067d3
 8006598:	080067d3 	.word	0x080067d3
 800659c:	08006773 	.word	0x08006773
 80065a0:	0800679f 	.word	0x0800679f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	7c12      	ldrb	r2, [r2, #16]
 80065b0:	f107 0108 	add.w	r1, r7, #8
 80065b4:	4610      	mov	r0, r2
 80065b6:	4798      	blx	r3
 80065b8:	60f8      	str	r0, [r7, #12]
      break;
 80065ba:	e112      	b.n	80067e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7c1b      	ldrb	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10d      	bne.n	80065e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f107 0208 	add.w	r2, r7, #8
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	2202      	movs	r2, #2
 80065dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065de:	e100      	b.n	80067e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f107 0208 	add.w	r2, r7, #8
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
      break;
 80065fa:	e0f2      	b.n	80067e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	885b      	ldrh	r3, [r3, #2]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b05      	cmp	r3, #5
 8006604:	f200 80ac 	bhi.w	8006760 <USBD_GetDescriptor+0x204>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USBD_GetDescriptor+0xb4>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006629 	.word	0x08006629
 8006614:	0800665d 	.word	0x0800665d
 8006618:	08006691 	.word	0x08006691
 800661c:	080066c5 	.word	0x080066c5
 8006620:	080066f9 	.word	0x080066f9
 8006624:	0800672d 	.word	0x0800672d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	7c12      	ldrb	r2, [r2, #16]
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664a:	e091      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fab2 	bl	8006bb8 <USBD_CtlError>
            err++;
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	3301      	adds	r3, #1
 8006658:	72fb      	strb	r3, [r7, #11]
          break;
 800665a:	e089      	b.n	8006770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7c12      	ldrb	r2, [r2, #16]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667e:	e077      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa98 	bl	8006bb8 <USBD_CtlError>
            err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
          break;
 800668e:	e06f      	b.n	8006770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b2:	e05d      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa7e 	bl	8006bb8 <USBD_CtlError>
            err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
          break;
 80066c2:	e055      	b.n	8006770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e6:	e043      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa64 	bl	8006bb8 <USBD_CtlError>
            err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
          break;
 80066f6:	e03b      	b.n	8006770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671a:	e029      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa4a 	bl	8006bb8 <USBD_CtlError>
            err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
          break;
 800672a:	e021      	b.n	8006770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674e:	e00f      	b.n	8006770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa30 	bl	8006bb8 <USBD_CtlError>
            err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
          break;
 800675e:	e007      	b.n	8006770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa28 	bl	8006bb8 <USBD_CtlError>
          err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800676e:	bf00      	nop
      }
      break;
 8006770:	e037      	b.n	80067e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7c1b      	ldrb	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	f107 0208 	add.w	r2, r7, #8
 8006786:	4610      	mov	r0, r2
 8006788:	4798      	blx	r3
 800678a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678c:	e029      	b.n	80067e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa11 	bl	8006bb8 <USBD_CtlError>
        err++;
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	3301      	adds	r3, #1
 800679a:	72fb      	strb	r3, [r7, #11]
      break;
 800679c:	e021      	b.n	80067e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7c1b      	ldrb	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10d      	bne.n	80067c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f107 0208 	add.w	r2, r7, #8
 80067b2:	4610      	mov	r0, r2
 80067b4:	4798      	blx	r3
 80067b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	2207      	movs	r2, #7
 80067be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c0:	e00f      	b.n	80067e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9f7 	bl	8006bb8 <USBD_CtlError>
        err++;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	3301      	adds	r3, #1
 80067ce:	72fb      	strb	r3, [r7, #11]
      break;
 80067d0:	e007      	b.n	80067e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9ef 	bl	8006bb8 <USBD_CtlError>
      err++;
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	3301      	adds	r3, #1
 80067de:	72fb      	strb	r3, [r7, #11]
      break;
 80067e0:	bf00      	nop
  }

  if (err != 0U)
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11e      	bne.n	8006826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	88db      	ldrh	r3, [r3, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d016      	beq.n	800681e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067f0:	893b      	ldrh	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88da      	ldrh	r2, [r3, #6]
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bf28      	it	cs
 8006800:	4613      	movcs	r3, r2
 8006802:	b29b      	uxth	r3, r3
 8006804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	461a      	mov	r2, r3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa44 	bl	8006c9a <USBD_CtlSendData>
 8006812:	e009      	b.n	8006828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9ce 	bl	8006bb8 <USBD_CtlError>
 800681c:	e004      	b.n	8006828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa78 	bl	8006d14 <USBD_CtlSendStatus>
 8006824:	e000      	b.n	8006828 <USBD_GetDescriptor+0x2cc>
    return;
 8006826:	bf00      	nop
  }
}
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	889b      	ldrh	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d131      	bne.n	80068a6 <USBD_SetAddress+0x76>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88db      	ldrh	r3, [r3, #6]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d12d      	bne.n	80068a6 <USBD_SetAddress+0x76>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d829      	bhi.n	80068a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	885b      	ldrh	r3, [r3, #2]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d104      	bne.n	8006874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f9a3 	bl	8006bb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	e01d      	b.n	80068b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fe1d 	bl	80074c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa44 	bl	8006d14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	e009      	b.n	80068b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a4:	e004      	b.n	80068b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f985 	bl	8006bb8 <USBD_CtlError>
  }
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <USBD_SetConfig+0x148>)
 80068ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068d0:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <USBD_SetConfig+0x148>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d905      	bls.n	80068e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f96c 	bl	8006bb8 <USBD_CtlError>
    return USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e088      	b.n	80069f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d002      	beq.n	80068f6 <USBD_SetConfig+0x3e>
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d025      	beq.n	8006940 <USBD_SetConfig+0x88>
 80068f4:	e071      	b.n	80069da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068f6:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <USBD_SetConfig+0x148>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01c      	beq.n	8006938 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80068fe:	4b40      	ldr	r3, [pc, #256]	; (8006a00 <USBD_SetConfig+0x148>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006908:	4b3d      	ldr	r3, [pc, #244]	; (8006a00 <USBD_SetConfig+0x148>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff f948 	bl	8005ba4 <USBD_SetClassConfig>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f949 	bl	8006bb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006926:	e065      	b.n	80069f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f9f3 	bl	8006d14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006936:	e05d      	b.n	80069f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9eb 	bl	8006d14 <USBD_CtlSendStatus>
      break;
 800693e:	e059      	b.n	80069f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006940:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <USBD_SetConfig+0x148>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d112      	bne.n	800696e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <USBD_SetConfig+0x148>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <USBD_SetConfig+0x148>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f93b 	bl	8005bdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9d4 	bl	8006d14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800696c:	e042      	b.n	80069f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800696e:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <USBD_SetConfig+0x148>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d02a      	beq.n	80069d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff f929 	bl	8005bdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <USBD_SetConfig+0x148>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <USBD_SetConfig+0x148>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff f902 	bl	8005ba4 <USBD_SetClassConfig>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f903 	bl	8006bb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f90e 	bl	8005bdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069c8:	e014      	b.n	80069f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9a2 	bl	8006d14 <USBD_CtlSendStatus>
      break;
 80069d0:	e010      	b.n	80069f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f99e 	bl	8006d14 <USBD_CtlSendStatus>
      break;
 80069d8:	e00c      	b.n	80069f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8eb 	bl	8006bb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <USBD_SetConfig+0x148>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff f8f7 	bl	8005bdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
      break;
 80069f2:	bf00      	nop
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	2000019c 	.word	0x2000019c

08006a04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d004      	beq.n	8006a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8cd 	bl	8006bb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a1e:	e023      	b.n	8006a68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	dc02      	bgt.n	8006a32 <USBD_GetConfig+0x2e>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc03      	bgt.n	8006a38 <USBD_GetConfig+0x34>
 8006a30:	e015      	b.n	8006a5e <USBD_GetConfig+0x5a>
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d00b      	beq.n	8006a4e <USBD_GetConfig+0x4a>
 8006a36:	e012      	b.n	8006a5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3308      	adds	r3, #8
 8006a42:	2201      	movs	r2, #1
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f927 	bl	8006c9a <USBD_CtlSendData>
        break;
 8006a4c:	e00c      	b.n	8006a68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2201      	movs	r2, #1
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f91f 	bl	8006c9a <USBD_CtlSendData>
        break;
 8006a5c:	e004      	b.n	8006a68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8a9 	bl	8006bb8 <USBD_CtlError>
        break;
 8006a66:	bf00      	nop
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d81e      	bhi.n	8006ac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	88db      	ldrh	r3, [r3, #6]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d004      	beq.n	8006a9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f890 	bl	8006bb8 <USBD_CtlError>
        break;
 8006a98:	e01a      	b.n	8006ad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f043 0202 	orr.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	2202      	movs	r2, #2
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8eb 	bl	8006c9a <USBD_CtlSendData>
      break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f875 	bl	8006bb8 <USBD_CtlError>
      break;
 8006ace:	bf00      	nop
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	885b      	ldrh	r3, [r3, #2]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d106      	bne.n	8006af8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f90e 	bl	8006d14 <USBD_CtlSendStatus>
  }
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d80b      	bhi.n	8006b30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	885b      	ldrh	r3, [r3, #2]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10c      	bne.n	8006b3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8f3 	bl	8006d14 <USBD_CtlSendStatus>
      }
      break;
 8006b2e:	e004      	b.n	8006b3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f840 	bl	8006bb8 <USBD_CtlError>
      break;
 8006b38:	e000      	b.n	8006b3c <USBD_ClrFeature+0x3c>
      break;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fabb 	bl	80060ea <SWAPBYTE>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff faae 	bl	80060ea <SWAPBYTE>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff faa1 	bl	80060ea <SWAPBYTE>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	80da      	strh	r2, [r3, #6]
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc11 	bl	80073ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bca:	2100      	movs	r1, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc0d 	bl	80073ec <USBD_LL_StallEP>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d036      	beq.n	8006c5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006bf4:	6938      	ldr	r0, [r7, #16]
 8006bf6:	f000 f836 	bl	8006c66 <USBD_GetLen>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	3301      	adds	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	4413      	add	r3, r2
 8006c20:	2203      	movs	r2, #3
 8006c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	3301      	adds	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c2a:	e013      	b.n	8006c54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	4413      	add	r3, r2
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	7812      	ldrb	r2, [r2, #0]
 8006c36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	613b      	str	r3, [r7, #16]
    idx++;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	3301      	adds	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	3301      	adds	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e7      	bne.n	8006c2c <USBD_GetString+0x52>
 8006c5c:	e000      	b.n	8006c60 <USBD_GetString+0x86>
    return;
 8006c5e:	bf00      	nop
  }
}
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c76:	e005      	b.n	8006c84 <USBD_GetLen+0x1e>
  {
    len++;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f5      	bne.n	8006c78 <USBD_GetLen+0x12>
  }

  return len;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fc1c 	bl	80074fe <USBD_LL_Transmit>

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fc0b 	bl	80074fe <USBD_LL_Transmit>

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	2100      	movs	r1, #0
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fc1b 	bl	8007540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d24:	2300      	movs	r3, #0
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fbe7 	bl	80074fe <USBD_LL_Transmit>

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2205      	movs	r2, #5
 8006d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fbf5 	bl	8007540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d64:	2200      	movs	r2, #0
 8006d66:	490e      	ldr	r1, [pc, #56]	; (8006da0 <MX_USB_DEVICE_Init+0x40>)
 8006d68:	480e      	ldr	r0, [pc, #56]	; (8006da4 <MX_USB_DEVICE_Init+0x44>)
 8006d6a:	f7fe fead 	bl	8005ac8 <USBD_Init>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d74:	f7f9 febc 	bl	8000af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006d78:	490b      	ldr	r1, [pc, #44]	; (8006da8 <MX_USB_DEVICE_Init+0x48>)
 8006d7a:	480a      	ldr	r0, [pc, #40]	; (8006da4 <MX_USB_DEVICE_Init+0x44>)
 8006d7c:	f7fe fed4 	bl	8005b28 <USBD_RegisterClass>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d86:	f7f9 feb3 	bl	8000af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d8a:	4806      	ldr	r0, [pc, #24]	; (8006da4 <MX_USB_DEVICE_Init+0x44>)
 8006d8c:	f7fe fef3 	bl	8005b76 <USBD_Start>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006d96:	f7f9 feab 	bl	8000af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d9a:	bf00      	nop
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000130 	.word	0x20000130
 8006da4:	200002c0 	.word	0x200002c0
 8006da8:	2000000c 	.word	0x2000000c

08006dac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2212      	movs	r2, #18
 8006dbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dbe:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000014c 	.word	0x2000014c

08006dd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2204      	movs	r2, #4
 8006de0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000160 	.word	0x20000160

08006df4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4907      	ldr	r1, [pc, #28]	; (8006e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e0a:	4808      	ldr	r0, [pc, #32]	; (8006e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e0c:	f7ff fee5 	bl	8006bda <USBD_GetString>
 8006e10:	e004      	b.n	8006e1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4904      	ldr	r1, [pc, #16]	; (8006e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e16:	4805      	ldr	r0, [pc, #20]	; (8006e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e18:	f7ff fedf 	bl	8006bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000590 	.word	0x20000590
 8006e2c:	0800767c 	.word	0x0800767c

08006e30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	4904      	ldr	r1, [pc, #16]	; (8006e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e40:	4804      	ldr	r0, [pc, #16]	; (8006e54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e42:	f7ff feca 	bl	8006bda <USBD_GetString>
  return USBD_StrDesc;
 8006e46:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000590 	.word	0x20000590
 8006e54:	08007694 	.word	0x08007694

08006e58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	6039      	str	r1, [r7, #0]
 8006e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	221a      	movs	r2, #26
 8006e68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e6a:	f000 f843 	bl	8006ef4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e6e:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000164 	.word	0x20000164

08006e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4907      	ldr	r1, [pc, #28]	; (8006eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e92:	4808      	ldr	r0, [pc, #32]	; (8006eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e94:	f7ff fea1 	bl	8006bda <USBD_GetString>
 8006e98:	e004      	b.n	8006ea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e9e:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ea0:	f7ff fe9b 	bl	8006bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000590 	.word	0x20000590
 8006eb4:	080076a8 	.word	0x080076a8

08006eb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d105      	bne.n	8006ed6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4907      	ldr	r1, [pc, #28]	; (8006eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ece:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ed0:	f7ff fe83 	bl	8006bda <USBD_GetString>
 8006ed4:	e004      	b.n	8006ee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4904      	ldr	r1, [pc, #16]	; (8006eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eda:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006edc:	f7ff fe7d 	bl	8006bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000590 	.word	0x20000590
 8006ef0:	080076b4 	.word	0x080076b4

08006ef4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <Get_SerialNum+0x44>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f00:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <Get_SerialNum+0x48>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f06:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <Get_SerialNum+0x4c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	4909      	ldr	r1, [pc, #36]	; (8006f44 <Get_SerialNum+0x50>)
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f814 	bl	8006f4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f24:	2204      	movs	r2, #4
 8006f26:	4908      	ldr	r1, [pc, #32]	; (8006f48 <Get_SerialNum+0x54>)
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f000 f80f 	bl	8006f4c <IntToUnicode>
  }
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	1fff7a10 	.word	0x1fff7a10
 8006f3c:	1fff7a14 	.word	0x1fff7a14
 8006f40:	1fff7a18 	.word	0x1fff7a18
 8006f44:	20000166 	.word	0x20000166
 8006f48:	20000176 	.word	0x20000176

08006f4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
 8006f62:	e027      	b.n	8006fb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	0f1b      	lsrs	r3, r3, #28
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	d80b      	bhi.n	8006f84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	0f1b      	lsrs	r3, r3, #28
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4619      	mov	r1, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3230      	adds	r2, #48	; 0x30
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e00a      	b.n	8006f9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	0f1b      	lsrs	r3, r3, #28
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	440b      	add	r3, r1
 8006f94:	3237      	adds	r2, #55	; 0x37
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
 8006fb4:	7dfa      	ldrb	r2, [r7, #23]
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d3d3      	bcc.n	8006f64 <IntToUnicode+0x18>
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fec:	d158      	bne.n	80070a0 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	4a2c      	ldr	r2, [pc, #176]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800700a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800700e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007010:	2300      	movs	r3, #0
 8007012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4619      	mov	r1, r3
 800701e:	4823      	ldr	r0, [pc, #140]	; (80070ac <HAL_PCD_MspInit+0xe0>)
 8007020:	f7fa f8bc 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8007024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702a:	2302      	movs	r3, #2
 800702c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007032:	2300      	movs	r3, #0
 8007034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007036:	230a      	movs	r3, #10
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	4619      	mov	r1, r3
 8007040:	481a      	ldr	r0, [pc, #104]	; (80070ac <HAL_PCD_MspInit+0xe0>)
 8007042:	f7fa f8ab 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007046:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800704a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704c:	2302      	movs	r3, #2
 800704e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007054:	2303      	movs	r3, #3
 8007056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007058:	230a      	movs	r3, #10
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4619      	mov	r1, r3
 8007062:	4812      	ldr	r0, [pc, #72]	; (80070ac <HAL_PCD_MspInit+0xe0>)
 8007064:	f7fa f89a 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 800706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706c:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	6353      	str	r3, [r2, #52]	; 0x34
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 800707e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007082:	6453      	str	r3, [r2, #68]	; 0x44
 8007084:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <HAL_PCD_MspInit+0xdc>)
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	2043      	movs	r0, #67	; 0x43
 8007096:	f7fa f84a 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800709a:	2043      	movs	r0, #67	; 0x43
 800709c:	f7fa f863 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070a0:	bf00      	nop
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40020000 	.word	0x40020000

080070b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe fda0 	bl	8005c0c <USBD_LL_SetupStage>
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	4619      	mov	r1, r3
 80070fe:	f7fe fdda 	bl	8005cb6 <USBD_LL_DataOutStage>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3348      	adds	r3, #72	; 0x48
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	4619      	mov	r1, r3
 8007132:	f7fe fe23 	bl	8005d7c <USBD_LL_DataInStage>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe ff37 	bl	8005fc0 <USBD_LL_SOF>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	e008      	b.n	8007186 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d102      	bne.n	8007182 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
 8007180:	e001      	b.n	8007186 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007182:	f7f9 fcb5 	bl	8000af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800718c:	7bfa      	ldrb	r2, [r7, #15]
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fed7 	bl	8005f44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fe83 	bl	8005ea8 <USBD_LL_Reset>
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fed2 	bl	8005f64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <HAL_PCD_SuspendCallback+0x48>)
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	4a03      	ldr	r2, [pc, #12]	; (80071f4 <HAL_PCD_SuspendCallback+0x48>)
 80071e6:	f043 0306 	orr.w	r3, r3, #6
 80071ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	e000ed00 	.word	0xe000ed00

080071f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fec2 	bl	8005f90 <USBD_LL_Resume>
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe ff10 	bl	8006050 <USBD_LL_IsoOUTIncomplete>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fed8 	bl	8006004 <USBD_LL_IsoINIncomplete>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe ff16 	bl	800609c <USBD_LL_DevConnected>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe ff13 	bl	80060b2 <USBD_LL_DevDisconnected>
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d13c      	bne.n	800731e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072a4:	4a20      	ldr	r2, [pc, #128]	; (8007328 <USBD_LL_Init+0x94>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <USBD_LL_Init+0x94>)
 80072b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072b4:	4b1c      	ldr	r3, [pc, #112]	; (8007328 <USBD_LL_Init+0x94>)
 80072b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <USBD_LL_Init+0x94>)
 80072be:	2204      	movs	r2, #4
 80072c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <USBD_LL_Init+0x94>)
 80072c4:	2202      	movs	r2, #2
 80072c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072c8:	4b17      	ldr	r3, [pc, #92]	; (8007328 <USBD_LL_Init+0x94>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ce:	4b16      	ldr	r3, [pc, #88]	; (8007328 <USBD_LL_Init+0x94>)
 80072d0:	2202      	movs	r2, #2
 80072d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072d4:	4b14      	ldr	r3, [pc, #80]	; (8007328 <USBD_LL_Init+0x94>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <USBD_LL_Init+0x94>)
 80072dc:	2200      	movs	r2, #0
 80072de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <USBD_LL_Init+0x94>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <USBD_LL_Init+0x94>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <USBD_LL_Init+0x94>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072f2:	480d      	ldr	r0, [pc, #52]	; (8007328 <USBD_LL_Init+0x94>)
 80072f4:	f7fa ff04 	bl	8002100 <HAL_PCD_Init>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072fe:	f7f9 fbf7 	bl	8000af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	4808      	ldr	r0, [pc, #32]	; (8007328 <USBD_LL_Init+0x94>)
 8007306:	f7fc f84a 	bl	800339e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800730a:	2240      	movs	r2, #64	; 0x40
 800730c:	2100      	movs	r1, #0
 800730e:	4806      	ldr	r0, [pc, #24]	; (8007328 <USBD_LL_Init+0x94>)
 8007310:	f7fb fffe 	bl	8003310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007314:	2280      	movs	r2, #128	; 0x80
 8007316:	2101      	movs	r1, #1
 8007318:	4803      	ldr	r0, [pc, #12]	; (8007328 <USBD_LL_Init+0x94>)
 800731a:	f7fb fff9 	bl	8003310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000790 	.word	0x20000790

0800732c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fa fff9 	bl	800233a <HAL_PCD_Start>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f930 	bl	80075b4 <USBD_Get_USB_Status>
 8007354:	4603      	mov	r3, r0
 8007356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007358:	7bbb      	ldrb	r3, [r7, #14]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	4608      	mov	r0, r1
 800736c:	4611      	mov	r1, r2
 800736e:	461a      	mov	r2, r3
 8007370:	4603      	mov	r3, r0
 8007372:	70fb      	strb	r3, [r7, #3]
 8007374:	460b      	mov	r3, r1
 8007376:	70bb      	strb	r3, [r7, #2]
 8007378:	4613      	mov	r3, r2
 800737a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800738a:	78bb      	ldrb	r3, [r7, #2]
 800738c:	883a      	ldrh	r2, [r7, #0]
 800738e:	78f9      	ldrb	r1, [r7, #3]
 8007390:	f7fb fbdd 	bl	8002b4e <HAL_PCD_EP_Open>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f90a 	bl	80075b4 <USBD_Get_USB_Status>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	4611      	mov	r1, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fb fc26 	bl	8002c1e <HAL_PCD_EP_Close>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 f8eb 	bl	80075b4 <USBD_Get_USB_Status>
 80073de:	4603      	mov	r3, r0
 80073e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7fb fce6 	bl	8002ddc <HAL_PCD_EP_SetStall>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f8cc 	bl	80075b4 <USBD_Get_USB_Status>
 800741c:	4603      	mov	r3, r0
 800741e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007420:	7bbb      	ldrb	r3, [r7, #14]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7fb fd2b 	bl	8002ea4 <HAL_PCD_EP_ClrStall>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f8ad 	bl	80075b4 <USBD_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800747a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800747c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da0b      	bge.n	800749c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	4613      	mov	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	333e      	adds	r3, #62	; 0x3e
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	e00b      	b.n	80074b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fb fb10 	bl	8002b04 <HAL_PCD_SetAddress>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f862 	bl	80075b4 <USBD_Get_USB_Status>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b086      	sub	sp, #24
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	460b      	mov	r3, r1
 800750c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800751c:	7af9      	ldrb	r1, [r7, #11]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	f7fb fc11 	bl	8002d48 <HAL_PCD_EP_Transmit>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f841 	bl	80075b4 <USBD_Get_USB_Status>
 8007532:	4603      	mov	r3, r0
 8007534:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007536:	7dbb      	ldrb	r3, [r7, #22]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800755e:	7af9      	ldrb	r1, [r7, #11]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	f7fb fba5 	bl	8002cb2 <HAL_PCD_EP_Receive>
 8007568:	4603      	mov	r3, r0
 800756a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f820 	bl	80075b4 <USBD_Get_USB_Status>
 8007574:	4603      	mov	r3, r0
 8007576:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007578:	7dbb      	ldrb	r3, [r7, #22]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <USBD_static_malloc+0x18>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	200001a0 	.word	0x200001a0

080075a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d817      	bhi.n	80075f8 <USBD_Get_USB_Status+0x44>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBD_Get_USB_Status+0x1c>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	080075e7 	.word	0x080075e7
 80075d8:	080075ed 	.word	0x080075ed
 80075dc:	080075f3 	.word	0x080075f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
    break;
 80075e4:	e00b      	b.n	80075fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
    break;
 80075ea:	e008      	b.n	80075fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
    break;
 80075f0:	e005      	b.n	80075fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	73fb      	strb	r3, [r7, #15]
    break;
 80075f6:	e002      	b.n	80075fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	bf00      	nop
  }
  return usb_status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4d0d      	ldr	r5, [pc, #52]	; (8007644 <__libc_init_array+0x38>)
 8007610:	4c0d      	ldr	r4, [pc, #52]	; (8007648 <__libc_init_array+0x3c>)
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	10a4      	asrs	r4, r4, #2
 8007616:	2600      	movs	r6, #0
 8007618:	42a6      	cmp	r6, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	4d0b      	ldr	r5, [pc, #44]	; (800764c <__libc_init_array+0x40>)
 800761e:	4c0c      	ldr	r4, [pc, #48]	; (8007650 <__libc_init_array+0x44>)
 8007620:	f000 f820 	bl	8007664 <_init>
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	2600      	movs	r6, #0
 800762a:	42a6      	cmp	r6, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f855 3b04 	ldr.w	r3, [r5], #4
 8007634:	4798      	blx	r3
 8007636:	3601      	adds	r6, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f855 3b04 	ldr.w	r3, [r5], #4
 800763e:	4798      	blx	r3
 8007640:	3601      	adds	r6, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	080076e4 	.word	0x080076e4
 8007648:	080076e4 	.word	0x080076e4
 800764c:	080076e4 	.word	0x080076e4
 8007650:	080076e8 	.word	0x080076e8

08007654 <memset>:
 8007654:	4402      	add	r2, r0
 8007656:	4603      	mov	r3, r0
 8007658:	4293      	cmp	r3, r2
 800765a:	d100      	bne.n	800765e <memset+0xa>
 800765c:	4770      	bx	lr
 800765e:	f803 1b01 	strb.w	r1, [r3], #1
 8007662:	e7f9      	b.n	8007658 <memset+0x4>

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
